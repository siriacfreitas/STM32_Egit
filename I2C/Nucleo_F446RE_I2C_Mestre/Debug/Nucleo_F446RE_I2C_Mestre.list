
Nucleo_F446RE_I2C_Mestre.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000293c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002b00  08002b00  00003b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b18  08002b18  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002b18  08002b18  00003b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b20  08002b20  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b20  08002b20  00003b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002b24  08002b24  00003b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002b28  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  08002b34  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08002b34  000040c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a5c2  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001757  00000000  00000000  0000e5fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000960  00000000  00000000  0000fd58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000760  00000000  00000000  000106b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002100b  00000000  00000000  00010e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cc0f  00000000  00000000  00031e23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca16f  00000000  00000000  0003ea32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00108ba1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002710  00000000  00000000  00108be4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  0010b2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002ae8 	.word	0x08002ae8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002ae8 	.word	0x08002ae8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 fa55 	bl	80009a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f82f 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f8e5 	bl	80006d0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000506:	f000 f88b 	bl	8000620 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800050a:	f000 f8b7 	bl	800067c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 800050e:	2200      	movs	r2, #0
 8000510:	2120      	movs	r1, #32
 8000512:	4811      	ldr	r0, [pc, #68]	@ (8000558 <main+0x64>)
 8000514:	f000 fd58 	bl	8000fc8 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      uint8_t cmd = '1';
 8000518:	2331      	movs	r3, #49	@ 0x31
 800051a:	71fb      	strb	r3, [r7, #7]
      HAL_I2C_Master_Transmit(&hi2c1, I2C_SLAVE_ADDRESS, &cmd, 1, HAL_MAX_DELAY);
 800051c:	1dfa      	adds	r2, r7, #7
 800051e:	f04f 33ff 	mov.w	r3, #4294967295
 8000522:	9300      	str	r3, [sp, #0]
 8000524:	2301      	movs	r3, #1
 8000526:	2154      	movs	r1, #84	@ 0x54
 8000528:	480c      	ldr	r0, [pc, #48]	@ (800055c <main+0x68>)
 800052a:	f000 feab 	bl	8001284 <HAL_I2C_Master_Transmit>

      HAL_Delay(2000);
 800052e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000532:	f000 faab 	bl	8000a8c <HAL_Delay>

      cmd = '0';
 8000536:	2330      	movs	r3, #48	@ 0x30
 8000538:	71fb      	strb	r3, [r7, #7]
      HAL_I2C_Master_Transmit(&hi2c1, I2C_SLAVE_ADDRESS, &cmd, 1, HAL_MAX_DELAY);
 800053a:	1dfa      	adds	r2, r7, #7
 800053c:	f04f 33ff 	mov.w	r3, #4294967295
 8000540:	9300      	str	r3, [sp, #0]
 8000542:	2301      	movs	r3, #1
 8000544:	2154      	movs	r1, #84	@ 0x54
 8000546:	4805      	ldr	r0, [pc, #20]	@ (800055c <main+0x68>)
 8000548:	f000 fe9c 	bl	8001284 <HAL_I2C_Master_Transmit>
      HAL_Delay(2000);
 800054c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000550:	f000 fa9c 	bl	8000a8c <HAL_Delay>
  {
 8000554:	bf00      	nop
 8000556:	e7df      	b.n	8000518 <main+0x24>
 8000558:	40020000 	.word	0x40020000
 800055c:	20000028 	.word	0x20000028

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b094      	sub	sp, #80	@ 0x50
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 031c 	add.w	r3, r7, #28
 800056a:	2234      	movs	r2, #52	@ 0x34
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f002 fa8e 	bl	8002a90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	f107 0308 	add.w	r3, r7, #8
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000584:	2300      	movs	r3, #0
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	4b23      	ldr	r3, [pc, #140]	@ (8000618 <SystemClock_Config+0xb8>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800058c:	4a22      	ldr	r2, [pc, #136]	@ (8000618 <SystemClock_Config+0xb8>)
 800058e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000592:	6413      	str	r3, [r2, #64]	@ 0x40
 8000594:	4b20      	ldr	r3, [pc, #128]	@ (8000618 <SystemClock_Config+0xb8>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000598:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005a0:	2300      	movs	r3, #0
 80005a2:	603b      	str	r3, [r7, #0]
 80005a4:	4b1d      	ldr	r3, [pc, #116]	@ (800061c <SystemClock_Config+0xbc>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005ac:	4a1b      	ldr	r2, [pc, #108]	@ (800061c <SystemClock_Config+0xbc>)
 80005ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005b2:	6013      	str	r3, [r2, #0]
 80005b4:	4b19      	ldr	r3, [pc, #100]	@ (800061c <SystemClock_Config+0xbc>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005bc:	603b      	str	r3, [r7, #0]
 80005be:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c0:	2302      	movs	r3, #2
 80005c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c4:	2301      	movs	r3, #1
 80005c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c8:	2310      	movs	r3, #16
 80005ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005cc:	2300      	movs	r3, #0
 80005ce:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d0:	f107 031c 	add.w	r3, r7, #28
 80005d4:	4618      	mov	r0, r3
 80005d6:	f001 fcf9 	bl	8001fcc <HAL_RCC_OscConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005e0:	f000 f8b8 	bl	8000754 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e4:	230f      	movs	r3, #15
 80005e6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005fa:	f107 0308 	add.w	r3, r7, #8
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f001 f999 	bl	8001938 <HAL_RCC_ClockConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800060c:	f000 f8a2 	bl	8000754 <Error_Handler>
  }
}
 8000610:	bf00      	nop
 8000612:	3750      	adds	r7, #80	@ 0x50
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40023800 	.word	0x40023800
 800061c:	40007000 	.word	0x40007000

08000620 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000624:	4b12      	ldr	r3, [pc, #72]	@ (8000670 <MX_I2C1_Init+0x50>)
 8000626:	4a13      	ldr	r2, [pc, #76]	@ (8000674 <MX_I2C1_Init+0x54>)
 8000628:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800062a:	4b11      	ldr	r3, [pc, #68]	@ (8000670 <MX_I2C1_Init+0x50>)
 800062c:	4a12      	ldr	r2, [pc, #72]	@ (8000678 <MX_I2C1_Init+0x58>)
 800062e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000630:	4b0f      	ldr	r3, [pc, #60]	@ (8000670 <MX_I2C1_Init+0x50>)
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 84;
 8000636:	4b0e      	ldr	r3, [pc, #56]	@ (8000670 <MX_I2C1_Init+0x50>)
 8000638:	2254      	movs	r2, #84	@ 0x54
 800063a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800063c:	4b0c      	ldr	r3, [pc, #48]	@ (8000670 <MX_I2C1_Init+0x50>)
 800063e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000642:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000644:	4b0a      	ldr	r3, [pc, #40]	@ (8000670 <MX_I2C1_Init+0x50>)
 8000646:	2200      	movs	r2, #0
 8000648:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800064a:	4b09      	ldr	r3, [pc, #36]	@ (8000670 <MX_I2C1_Init+0x50>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000650:	4b07      	ldr	r3, [pc, #28]	@ (8000670 <MX_I2C1_Init+0x50>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000656:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <MX_I2C1_Init+0x50>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800065c:	4804      	ldr	r0, [pc, #16]	@ (8000670 <MX_I2C1_Init+0x50>)
 800065e:	f000 fccd 	bl	8000ffc <HAL_I2C_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000668:	f000 f874 	bl	8000754 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000028 	.word	0x20000028
 8000674:	40005400 	.word	0x40005400
 8000678:	000186a0 	.word	0x000186a0

0800067c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000680:	4b11      	ldr	r3, [pc, #68]	@ (80006c8 <MX_USART2_UART_Init+0x4c>)
 8000682:	4a12      	ldr	r2, [pc, #72]	@ (80006cc <MX_USART2_UART_Init+0x50>)
 8000684:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000686:	4b10      	ldr	r3, [pc, #64]	@ (80006c8 <MX_USART2_UART_Init+0x4c>)
 8000688:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800068c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800068e:	4b0e      	ldr	r3, [pc, #56]	@ (80006c8 <MX_USART2_UART_Init+0x4c>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000694:	4b0c      	ldr	r3, [pc, #48]	@ (80006c8 <MX_USART2_UART_Init+0x4c>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800069a:	4b0b      	ldr	r3, [pc, #44]	@ (80006c8 <MX_USART2_UART_Init+0x4c>)
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006a0:	4b09      	ldr	r3, [pc, #36]	@ (80006c8 <MX_USART2_UART_Init+0x4c>)
 80006a2:	220c      	movs	r2, #12
 80006a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a6:	4b08      	ldr	r3, [pc, #32]	@ (80006c8 <MX_USART2_UART_Init+0x4c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ac:	4b06      	ldr	r3, [pc, #24]	@ (80006c8 <MX_USART2_UART_Init+0x4c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006b2:	4805      	ldr	r0, [pc, #20]	@ (80006c8 <MX_USART2_UART_Init+0x4c>)
 80006b4:	f001 ff28 	bl	8002508 <HAL_UART_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006be:	f000 f849 	bl	8000754 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	2000007c 	.word	0x2000007c
 80006cc:	40004400 	.word	0x40004400

080006d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b088      	sub	sp, #32
 80006d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d6:	f107 030c 	add.w	r3, r7, #12
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
 80006e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	4b18      	ldr	r3, [pc, #96]	@ (800074c <MX_GPIO_Init+0x7c>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ee:	4a17      	ldr	r2, [pc, #92]	@ (800074c <MX_GPIO_Init+0x7c>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f6:	4b15      	ldr	r3, [pc, #84]	@ (800074c <MX_GPIO_Init+0x7c>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	4b11      	ldr	r3, [pc, #68]	@ (800074c <MX_GPIO_Init+0x7c>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070a:	4a10      	ldr	r2, [pc, #64]	@ (800074c <MX_GPIO_Init+0x7c>)
 800070c:	f043 0302 	orr.w	r3, r3, #2
 8000710:	6313      	str	r3, [r2, #48]	@ 0x30
 8000712:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <MX_GPIO_Init+0x7c>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	f003 0302 	and.w	r3, r3, #2
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 800071e:	2200      	movs	r2, #0
 8000720:	2120      	movs	r1, #32
 8000722:	480b      	ldr	r0, [pc, #44]	@ (8000750 <MX_GPIO_Init+0x80>)
 8000724:	f000 fc50 	bl	8000fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 8000728:	2320      	movs	r3, #32
 800072a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072c:	2301      	movs	r3, #1
 800072e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000734:	2300      	movs	r3, #0
 8000736:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	4619      	mov	r1, r3
 800073e:	4804      	ldr	r0, [pc, #16]	@ (8000750 <MX_GPIO_Init+0x80>)
 8000740:	f000 faae 	bl	8000ca0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000744:	bf00      	nop
 8000746:	3720      	adds	r7, #32
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40023800 	.word	0x40023800
 8000750:	40020000 	.word	0x40020000

08000754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000758:	b672      	cpsid	i
}
 800075a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800075c:	bf00      	nop
 800075e:	e7fd      	b.n	800075c <Error_Handler+0x8>

08000760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	4b10      	ldr	r3, [pc, #64]	@ (80007ac <HAL_MspInit+0x4c>)
 800076c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800076e:	4a0f      	ldr	r2, [pc, #60]	@ (80007ac <HAL_MspInit+0x4c>)
 8000770:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000774:	6453      	str	r3, [r2, #68]	@ 0x44
 8000776:	4b0d      	ldr	r3, [pc, #52]	@ (80007ac <HAL_MspInit+0x4c>)
 8000778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800077a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	603b      	str	r3, [r7, #0]
 8000786:	4b09      	ldr	r3, [pc, #36]	@ (80007ac <HAL_MspInit+0x4c>)
 8000788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800078a:	4a08      	ldr	r2, [pc, #32]	@ (80007ac <HAL_MspInit+0x4c>)
 800078c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000790:	6413      	str	r3, [r2, #64]	@ 0x40
 8000792:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <HAL_MspInit+0x4c>)
 8000794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000796:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800079a:	603b      	str	r3, [r7, #0]
 800079c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800079e:	2007      	movs	r0, #7
 80007a0:	f000 fa4a 	bl	8000c38 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a4:	bf00      	nop
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40023800 	.word	0x40023800

080007b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08a      	sub	sp, #40	@ 0x28
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a19      	ldr	r2, [pc, #100]	@ (8000834 <HAL_I2C_MspInit+0x84>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d12c      	bne.n	800082c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
 80007d6:	4b18      	ldr	r3, [pc, #96]	@ (8000838 <HAL_I2C_MspInit+0x88>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	4a17      	ldr	r2, [pc, #92]	@ (8000838 <HAL_I2C_MspInit+0x88>)
 80007dc:	f043 0302 	orr.w	r3, r3, #2
 80007e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e2:	4b15      	ldr	r3, [pc, #84]	@ (8000838 <HAL_I2C_MspInit+0x88>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007ee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80007f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007f4:	2312      	movs	r3, #18
 80007f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007f8:	2301      	movs	r3, #1
 80007fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fc:	2303      	movs	r3, #3
 80007fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000800:	2304      	movs	r3, #4
 8000802:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	4619      	mov	r1, r3
 800080a:	480c      	ldr	r0, [pc, #48]	@ (800083c <HAL_I2C_MspInit+0x8c>)
 800080c:	f000 fa48 	bl	8000ca0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000810:	2300      	movs	r3, #0
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	4b08      	ldr	r3, [pc, #32]	@ (8000838 <HAL_I2C_MspInit+0x88>)
 8000816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000818:	4a07      	ldr	r2, [pc, #28]	@ (8000838 <HAL_I2C_MspInit+0x88>)
 800081a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800081e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000820:	4b05      	ldr	r3, [pc, #20]	@ (8000838 <HAL_I2C_MspInit+0x88>)
 8000822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000824:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800082c:	bf00      	nop
 800082e:	3728      	adds	r7, #40	@ 0x28
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40005400 	.word	0x40005400
 8000838:	40023800 	.word	0x40023800
 800083c:	40020400 	.word	0x40020400

08000840 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08a      	sub	sp, #40	@ 0x28
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a19      	ldr	r2, [pc, #100]	@ (80008c4 <HAL_UART_MspInit+0x84>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d12b      	bne.n	80008ba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
 8000866:	4b18      	ldr	r3, [pc, #96]	@ (80008c8 <HAL_UART_MspInit+0x88>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800086a:	4a17      	ldr	r2, [pc, #92]	@ (80008c8 <HAL_UART_MspInit+0x88>)
 800086c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000870:	6413      	str	r3, [r2, #64]	@ 0x40
 8000872:	4b15      	ldr	r3, [pc, #84]	@ (80008c8 <HAL_UART_MspInit+0x88>)
 8000874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	4b11      	ldr	r3, [pc, #68]	@ (80008c8 <HAL_UART_MspInit+0x88>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	4a10      	ldr	r2, [pc, #64]	@ (80008c8 <HAL_UART_MspInit+0x88>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6313      	str	r3, [r2, #48]	@ 0x30
 800088e:	4b0e      	ldr	r3, [pc, #56]	@ (80008c8 <HAL_UART_MspInit+0x88>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800089a:	230c      	movs	r3, #12
 800089c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	2302      	movs	r3, #2
 80008a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a6:	2303      	movs	r3, #3
 80008a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008aa:	2307      	movs	r3, #7
 80008ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	4619      	mov	r1, r3
 80008b4:	4805      	ldr	r0, [pc, #20]	@ (80008cc <HAL_UART_MspInit+0x8c>)
 80008b6:	f000 f9f3 	bl	8000ca0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80008ba:	bf00      	nop
 80008bc:	3728      	adds	r7, #40	@ 0x28
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40004400 	.word	0x40004400
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40020000 	.word	0x40020000

080008d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <NMI_Handler+0x4>

080008d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <HardFault_Handler+0x4>

080008e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e4:	bf00      	nop
 80008e6:	e7fd      	b.n	80008e4 <MemManage_Handler+0x4>

080008e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ec:	bf00      	nop
 80008ee:	e7fd      	b.n	80008ec <BusFault_Handler+0x4>

080008f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f4:	bf00      	nop
 80008f6:	e7fd      	b.n	80008f4 <UsageFault_Handler+0x4>

080008f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr

08000922 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000926:	f000 f891 	bl	8000a4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
	...

08000930 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000934:	4b06      	ldr	r3, [pc, #24]	@ (8000950 <SystemInit+0x20>)
 8000936:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800093a:	4a05      	ldr	r2, [pc, #20]	@ (8000950 <SystemInit+0x20>)
 800093c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000940:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	e000ed00 	.word	0xe000ed00

08000954 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000954:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800098c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000958:	f7ff ffea 	bl	8000930 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800095c:	480c      	ldr	r0, [pc, #48]	@ (8000990 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800095e:	490d      	ldr	r1, [pc, #52]	@ (8000994 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000960:	4a0d      	ldr	r2, [pc, #52]	@ (8000998 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000964:	e002      	b.n	800096c <LoopCopyDataInit>

08000966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800096a:	3304      	adds	r3, #4

0800096c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800096c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800096e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000970:	d3f9      	bcc.n	8000966 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000972:	4a0a      	ldr	r2, [pc, #40]	@ (800099c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000974:	4c0a      	ldr	r4, [pc, #40]	@ (80009a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000978:	e001      	b.n	800097e <LoopFillZerobss>

0800097a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800097a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800097c:	3204      	adds	r2, #4

0800097e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800097e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000980:	d3fb      	bcc.n	800097a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000982:	f002 f88d 	bl	8002aa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000986:	f7ff fdb5 	bl	80004f4 <main>
  bx  lr    
 800098a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800098c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000990:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000994:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000998:	08002b28 	.word	0x08002b28
  ldr r2, =_sbss
 800099c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009a0:	200000c8 	.word	0x200000c8

080009a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009a4:	e7fe      	b.n	80009a4 <ADC_IRQHandler>
	...

080009a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009ac:	4b0e      	ldr	r3, [pc, #56]	@ (80009e8 <HAL_Init+0x40>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a0d      	ldr	r2, [pc, #52]	@ (80009e8 <HAL_Init+0x40>)
 80009b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009b8:	4b0b      	ldr	r3, [pc, #44]	@ (80009e8 <HAL_Init+0x40>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a0a      	ldr	r2, [pc, #40]	@ (80009e8 <HAL_Init+0x40>)
 80009be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009c4:	4b08      	ldr	r3, [pc, #32]	@ (80009e8 <HAL_Init+0x40>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a07      	ldr	r2, [pc, #28]	@ (80009e8 <HAL_Init+0x40>)
 80009ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d0:	2003      	movs	r0, #3
 80009d2:	f000 f931 	bl	8000c38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009d6:	2000      	movs	r0, #0
 80009d8:	f000 f808 	bl	80009ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009dc:	f7ff fec0 	bl	8000760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009e0:	2300      	movs	r3, #0
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40023c00 	.word	0x40023c00

080009ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009f4:	4b12      	ldr	r3, [pc, #72]	@ (8000a40 <HAL_InitTick+0x54>)
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	4b12      	ldr	r3, [pc, #72]	@ (8000a44 <HAL_InitTick+0x58>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	4619      	mov	r1, r3
 80009fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f000 f93b 	bl	8000c86 <HAL_SYSTICK_Config>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
 8000a18:	e00e      	b.n	8000a38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2b0f      	cmp	r3, #15
 8000a1e:	d80a      	bhi.n	8000a36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a20:	2200      	movs	r2, #0
 8000a22:	6879      	ldr	r1, [r7, #4]
 8000a24:	f04f 30ff 	mov.w	r0, #4294967295
 8000a28:	f000 f911 	bl	8000c4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a2c:	4a06      	ldr	r2, [pc, #24]	@ (8000a48 <HAL_InitTick+0x5c>)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a32:	2300      	movs	r3, #0
 8000a34:	e000      	b.n	8000a38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20000000 	.word	0x20000000
 8000a44:	20000008 	.word	0x20000008
 8000a48:	20000004 	.word	0x20000004

08000a4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a50:	4b06      	ldr	r3, [pc, #24]	@ (8000a6c <HAL_IncTick+0x20>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	461a      	mov	r2, r3
 8000a56:	4b06      	ldr	r3, [pc, #24]	@ (8000a70 <HAL_IncTick+0x24>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	4a04      	ldr	r2, [pc, #16]	@ (8000a70 <HAL_IncTick+0x24>)
 8000a5e:	6013      	str	r3, [r2, #0]
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	20000008 	.word	0x20000008
 8000a70:	200000c4 	.word	0x200000c4

08000a74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  return uwTick;
 8000a78:	4b03      	ldr	r3, [pc, #12]	@ (8000a88 <HAL_GetTick+0x14>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	200000c4 	.word	0x200000c4

08000a8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a94:	f7ff ffee 	bl	8000a74 <HAL_GetTick>
 8000a98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aa4:	d005      	beq.n	8000ab2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad0 <HAL_Delay+0x44>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	461a      	mov	r2, r3
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	4413      	add	r3, r2
 8000ab0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ab2:	bf00      	nop
 8000ab4:	f7ff ffde 	bl	8000a74 <HAL_GetTick>
 8000ab8:	4602      	mov	r2, r0
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	68fa      	ldr	r2, [r7, #12]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d8f7      	bhi.n	8000ab4 <HAL_Delay+0x28>
  {
  }
}
 8000ac4:	bf00      	nop
 8000ac6:	bf00      	nop
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000008 	.word	0x20000008

08000ad4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f003 0307 	and.w	r3, r3, #7
 8000ae2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8000b18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aea:	68ba      	ldr	r2, [r7, #8]
 8000aec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000af0:	4013      	ands	r3, r2
 8000af2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000afc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b06:	4a04      	ldr	r2, [pc, #16]	@ (8000b18 <__NVIC_SetPriorityGrouping+0x44>)
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	60d3      	str	r3, [r2, #12]
}
 8000b0c:	bf00      	nop
 8000b0e:	3714      	adds	r7, #20
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b20:	4b04      	ldr	r3, [pc, #16]	@ (8000b34 <__NVIC_GetPriorityGrouping+0x18>)
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	0a1b      	lsrs	r3, r3, #8
 8000b26:	f003 0307 	and.w	r3, r3, #7
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	6039      	str	r1, [r7, #0]
 8000b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	db0a      	blt.n	8000b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	490c      	ldr	r1, [pc, #48]	@ (8000b84 <__NVIC_SetPriority+0x4c>)
 8000b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b56:	0112      	lsls	r2, r2, #4
 8000b58:	b2d2      	uxtb	r2, r2
 8000b5a:	440b      	add	r3, r1
 8000b5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b60:	e00a      	b.n	8000b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	4908      	ldr	r1, [pc, #32]	@ (8000b88 <__NVIC_SetPriority+0x50>)
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	f003 030f 	and.w	r3, r3, #15
 8000b6e:	3b04      	subs	r3, #4
 8000b70:	0112      	lsls	r2, r2, #4
 8000b72:	b2d2      	uxtb	r2, r2
 8000b74:	440b      	add	r3, r1
 8000b76:	761a      	strb	r2, [r3, #24]
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	e000e100 	.word	0xe000e100
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b089      	sub	sp, #36	@ 0x24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	f003 0307 	and.w	r3, r3, #7
 8000b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba0:	69fb      	ldr	r3, [r7, #28]
 8000ba2:	f1c3 0307 	rsb	r3, r3, #7
 8000ba6:	2b04      	cmp	r3, #4
 8000ba8:	bf28      	it	cs
 8000baa:	2304      	movcs	r3, #4
 8000bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	3304      	adds	r3, #4
 8000bb2:	2b06      	cmp	r3, #6
 8000bb4:	d902      	bls.n	8000bbc <NVIC_EncodePriority+0x30>
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	3b03      	subs	r3, #3
 8000bba:	e000      	b.n	8000bbe <NVIC_EncodePriority+0x32>
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc4:	69bb      	ldr	r3, [r7, #24]
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	43da      	mvns	r2, r3
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	401a      	ands	r2, r3
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	fa01 f303 	lsl.w	r3, r1, r3
 8000bde:	43d9      	mvns	r1, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be4:	4313      	orrs	r3, r2
         );
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3724      	adds	r7, #36	@ 0x24
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
	...

08000bf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c04:	d301      	bcc.n	8000c0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c06:	2301      	movs	r3, #1
 8000c08:	e00f      	b.n	8000c2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c34 <SysTick_Config+0x40>)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c12:	210f      	movs	r1, #15
 8000c14:	f04f 30ff 	mov.w	r0, #4294967295
 8000c18:	f7ff ff8e 	bl	8000b38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c1c:	4b05      	ldr	r3, [pc, #20]	@ (8000c34 <SysTick_Config+0x40>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c22:	4b04      	ldr	r3, [pc, #16]	@ (8000c34 <SysTick_Config+0x40>)
 8000c24:	2207      	movs	r2, #7
 8000c26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	e000e010 	.word	0xe000e010

08000c38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f7ff ff47 	bl	8000ad4 <__NVIC_SetPriorityGrouping>
}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b086      	sub	sp, #24
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	4603      	mov	r3, r0
 8000c56:	60b9      	str	r1, [r7, #8]
 8000c58:	607a      	str	r2, [r7, #4]
 8000c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c60:	f7ff ff5c 	bl	8000b1c <__NVIC_GetPriorityGrouping>
 8000c64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	68b9      	ldr	r1, [r7, #8]
 8000c6a:	6978      	ldr	r0, [r7, #20]
 8000c6c:	f7ff ff8e 	bl	8000b8c <NVIC_EncodePriority>
 8000c70:	4602      	mov	r2, r0
 8000c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c76:	4611      	mov	r1, r2
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff ff5d 	bl	8000b38 <__NVIC_SetPriority>
}
 8000c7e:	bf00      	nop
 8000c80:	3718      	adds	r7, #24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b082      	sub	sp, #8
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff ffb0 	bl	8000bf4 <SysTick_Config>
 8000c94:	4603      	mov	r3, r0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
	...

08000ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b089      	sub	sp, #36	@ 0x24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000caa:	2300      	movs	r3, #0
 8000cac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61fb      	str	r3, [r7, #28]
 8000cba:	e165      	b.n	8000f88 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	697a      	ldr	r2, [r7, #20]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cd0:	693a      	ldr	r2, [r7, #16]
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	f040 8154 	bne.w	8000f82 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f003 0303 	and.w	r3, r3, #3
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d005      	beq.n	8000cf2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d130      	bne.n	8000d54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	2203      	movs	r2, #3
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	43db      	mvns	r3, r3
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	4013      	ands	r3, r2
 8000d08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	68da      	ldr	r2, [r3, #12]
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	69ba      	ldr	r2, [r7, #24]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	69ba      	ldr	r2, [r7, #24]
 8000d20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d28:	2201      	movs	r2, #1
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	43db      	mvns	r3, r3
 8000d32:	69ba      	ldr	r2, [r7, #24]
 8000d34:	4013      	ands	r3, r2
 8000d36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	091b      	lsrs	r3, r3, #4
 8000d3e:	f003 0201 	and.w	r2, r3, #1
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f003 0303 	and.w	r3, r3, #3
 8000d5c:	2b03      	cmp	r3, #3
 8000d5e:	d017      	beq.n	8000d90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	2203      	movs	r2, #3
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	43db      	mvns	r3, r3
 8000d72:	69ba      	ldr	r2, [r7, #24]
 8000d74:	4013      	ands	r3, r2
 8000d76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	689a      	ldr	r2, [r3, #8]
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f003 0303 	and.w	r3, r3, #3
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d123      	bne.n	8000de4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	08da      	lsrs	r2, r3, #3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3208      	adds	r2, #8
 8000da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	f003 0307 	and.w	r3, r3, #7
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	220f      	movs	r2, #15
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	691a      	ldr	r2, [r3, #16]
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	08da      	lsrs	r2, r3, #3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	3208      	adds	r2, #8
 8000dde:	69b9      	ldr	r1, [r7, #24]
 8000de0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	2203      	movs	r2, #3
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f003 0203 	and.w	r2, r3, #3
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	f000 80ae 	beq.w	8000f82 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	4b5d      	ldr	r3, [pc, #372]	@ (8000fa0 <HAL_GPIO_Init+0x300>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e2e:	4a5c      	ldr	r2, [pc, #368]	@ (8000fa0 <HAL_GPIO_Init+0x300>)
 8000e30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e34:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e36:	4b5a      	ldr	r3, [pc, #360]	@ (8000fa0 <HAL_GPIO_Init+0x300>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e42:	4a58      	ldr	r2, [pc, #352]	@ (8000fa4 <HAL_GPIO_Init+0x304>)
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	089b      	lsrs	r3, r3, #2
 8000e48:	3302      	adds	r3, #2
 8000e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	f003 0303 	and.w	r3, r3, #3
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	220f      	movs	r2, #15
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4013      	ands	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a4f      	ldr	r2, [pc, #316]	@ (8000fa8 <HAL_GPIO_Init+0x308>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d025      	beq.n	8000eba <HAL_GPIO_Init+0x21a>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a4e      	ldr	r2, [pc, #312]	@ (8000fac <HAL_GPIO_Init+0x30c>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d01f      	beq.n	8000eb6 <HAL_GPIO_Init+0x216>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a4d      	ldr	r2, [pc, #308]	@ (8000fb0 <HAL_GPIO_Init+0x310>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d019      	beq.n	8000eb2 <HAL_GPIO_Init+0x212>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a4c      	ldr	r2, [pc, #304]	@ (8000fb4 <HAL_GPIO_Init+0x314>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d013      	beq.n	8000eae <HAL_GPIO_Init+0x20e>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a4b      	ldr	r2, [pc, #300]	@ (8000fb8 <HAL_GPIO_Init+0x318>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d00d      	beq.n	8000eaa <HAL_GPIO_Init+0x20a>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a4a      	ldr	r2, [pc, #296]	@ (8000fbc <HAL_GPIO_Init+0x31c>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d007      	beq.n	8000ea6 <HAL_GPIO_Init+0x206>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a49      	ldr	r2, [pc, #292]	@ (8000fc0 <HAL_GPIO_Init+0x320>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d101      	bne.n	8000ea2 <HAL_GPIO_Init+0x202>
 8000e9e:	2306      	movs	r3, #6
 8000ea0:	e00c      	b.n	8000ebc <HAL_GPIO_Init+0x21c>
 8000ea2:	2307      	movs	r3, #7
 8000ea4:	e00a      	b.n	8000ebc <HAL_GPIO_Init+0x21c>
 8000ea6:	2305      	movs	r3, #5
 8000ea8:	e008      	b.n	8000ebc <HAL_GPIO_Init+0x21c>
 8000eaa:	2304      	movs	r3, #4
 8000eac:	e006      	b.n	8000ebc <HAL_GPIO_Init+0x21c>
 8000eae:	2303      	movs	r3, #3
 8000eb0:	e004      	b.n	8000ebc <HAL_GPIO_Init+0x21c>
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	e002      	b.n	8000ebc <HAL_GPIO_Init+0x21c>
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e000      	b.n	8000ebc <HAL_GPIO_Init+0x21c>
 8000eba:	2300      	movs	r3, #0
 8000ebc:	69fa      	ldr	r2, [r7, #28]
 8000ebe:	f002 0203 	and.w	r2, r2, #3
 8000ec2:	0092      	lsls	r2, r2, #2
 8000ec4:	4093      	lsls	r3, r2
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ecc:	4935      	ldr	r1, [pc, #212]	@ (8000fa4 <HAL_GPIO_Init+0x304>)
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	089b      	lsrs	r3, r3, #2
 8000ed2:	3302      	adds	r3, #2
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eda:	4b3a      	ldr	r3, [pc, #232]	@ (8000fc4 <HAL_GPIO_Init+0x324>)
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d003      	beq.n	8000efe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000efe:	4a31      	ldr	r2, [pc, #196]	@ (8000fc4 <HAL_GPIO_Init+0x324>)
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f04:	4b2f      	ldr	r3, [pc, #188]	@ (8000fc4 <HAL_GPIO_Init+0x324>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4013      	ands	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d003      	beq.n	8000f28 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f28:	4a26      	ldr	r2, [pc, #152]	@ (8000fc4 <HAL_GPIO_Init+0x324>)
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f2e:	4b25      	ldr	r3, [pc, #148]	@ (8000fc4 <HAL_GPIO_Init+0x324>)
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	43db      	mvns	r3, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d003      	beq.n	8000f52 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f52:	4a1c      	ldr	r2, [pc, #112]	@ (8000fc4 <HAL_GPIO_Init+0x324>)
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f58:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc4 <HAL_GPIO_Init+0x324>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	43db      	mvns	r3, r3
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4013      	ands	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d003      	beq.n	8000f7c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f7c:	4a11      	ldr	r2, [pc, #68]	@ (8000fc4 <HAL_GPIO_Init+0x324>)
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3301      	adds	r3, #1
 8000f86:	61fb      	str	r3, [r7, #28]
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	2b0f      	cmp	r3, #15
 8000f8c:	f67f ae96 	bls.w	8000cbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f90:	bf00      	nop
 8000f92:	bf00      	nop
 8000f94:	3724      	adds	r7, #36	@ 0x24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40013800 	.word	0x40013800
 8000fa8:	40020000 	.word	0x40020000
 8000fac:	40020400 	.word	0x40020400
 8000fb0:	40020800 	.word	0x40020800
 8000fb4:	40020c00 	.word	0x40020c00
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	40021400 	.word	0x40021400
 8000fc0:	40021800 	.word	0x40021800
 8000fc4:	40013c00 	.word	0x40013c00

08000fc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	807b      	strh	r3, [r7, #2]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fd8:	787b      	ldrb	r3, [r7, #1]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fde:	887a      	ldrh	r2, [r7, #2]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fe4:	e003      	b.n	8000fee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fe6:	887b      	ldrh	r3, [r7, #2]
 8000fe8:	041a      	lsls	r2, r3, #16
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	619a      	str	r2, [r3, #24]
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
	...

08000ffc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d101      	bne.n	800100e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e12b      	b.n	8001266 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b00      	cmp	r3, #0
 8001018:	d106      	bne.n	8001028 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff fbc4 	bl	80007b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2224      	movs	r2, #36	@ 0x24
 800102c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f022 0201 	bic.w	r2, r2, #1
 800103e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800104e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800105e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001060:	f000 fd5c 	bl	8001b1c <HAL_RCC_GetPCLK1Freq>
 8001064:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	4a81      	ldr	r2, [pc, #516]	@ (8001270 <HAL_I2C_Init+0x274>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d807      	bhi.n	8001080 <HAL_I2C_Init+0x84>
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	4a80      	ldr	r2, [pc, #512]	@ (8001274 <HAL_I2C_Init+0x278>)
 8001074:	4293      	cmp	r3, r2
 8001076:	bf94      	ite	ls
 8001078:	2301      	movls	r3, #1
 800107a:	2300      	movhi	r3, #0
 800107c:	b2db      	uxtb	r3, r3
 800107e:	e006      	b.n	800108e <HAL_I2C_Init+0x92>
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	4a7d      	ldr	r2, [pc, #500]	@ (8001278 <HAL_I2C_Init+0x27c>)
 8001084:	4293      	cmp	r3, r2
 8001086:	bf94      	ite	ls
 8001088:	2301      	movls	r3, #1
 800108a:	2300      	movhi	r3, #0
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e0e7      	b.n	8001266 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	4a78      	ldr	r2, [pc, #480]	@ (800127c <HAL_I2C_Init+0x280>)
 800109a:	fba2 2303 	umull	r2, r3, r2, r3
 800109e:	0c9b      	lsrs	r3, r3, #18
 80010a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	68ba      	ldr	r2, [r7, #8]
 80010b2:	430a      	orrs	r2, r1
 80010b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	6a1b      	ldr	r3, [r3, #32]
 80010bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	4a6a      	ldr	r2, [pc, #424]	@ (8001270 <HAL_I2C_Init+0x274>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d802      	bhi.n	80010d0 <HAL_I2C_Init+0xd4>
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	3301      	adds	r3, #1
 80010ce:	e009      	b.n	80010e4 <HAL_I2C_Init+0xe8>
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80010d6:	fb02 f303 	mul.w	r3, r2, r3
 80010da:	4a69      	ldr	r2, [pc, #420]	@ (8001280 <HAL_I2C_Init+0x284>)
 80010dc:	fba2 2303 	umull	r2, r3, r2, r3
 80010e0:	099b      	lsrs	r3, r3, #6
 80010e2:	3301      	adds	r3, #1
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	6812      	ldr	r2, [r2, #0]
 80010e8:	430b      	orrs	r3, r1
 80010ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	69db      	ldr	r3, [r3, #28]
 80010f2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80010f6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	495c      	ldr	r1, [pc, #368]	@ (8001270 <HAL_I2C_Init+0x274>)
 8001100:	428b      	cmp	r3, r1
 8001102:	d819      	bhi.n	8001138 <HAL_I2C_Init+0x13c>
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	1e59      	subs	r1, r3, #1
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001112:	1c59      	adds	r1, r3, #1
 8001114:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001118:	400b      	ands	r3, r1
 800111a:	2b00      	cmp	r3, #0
 800111c:	d00a      	beq.n	8001134 <HAL_I2C_Init+0x138>
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	1e59      	subs	r1, r3, #1
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	fbb1 f3f3 	udiv	r3, r1, r3
 800112c:	3301      	adds	r3, #1
 800112e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001132:	e051      	b.n	80011d8 <HAL_I2C_Init+0x1dc>
 8001134:	2304      	movs	r3, #4
 8001136:	e04f      	b.n	80011d8 <HAL_I2C_Init+0x1dc>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d111      	bne.n	8001164 <HAL_I2C_Init+0x168>
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	1e58      	subs	r0, r3, #1
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6859      	ldr	r1, [r3, #4]
 8001148:	460b      	mov	r3, r1
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	440b      	add	r3, r1
 800114e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001152:	3301      	adds	r3, #1
 8001154:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001158:	2b00      	cmp	r3, #0
 800115a:	bf0c      	ite	eq
 800115c:	2301      	moveq	r3, #1
 800115e:	2300      	movne	r3, #0
 8001160:	b2db      	uxtb	r3, r3
 8001162:	e012      	b.n	800118a <HAL_I2C_Init+0x18e>
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	1e58      	subs	r0, r3, #1
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6859      	ldr	r1, [r3, #4]
 800116c:	460b      	mov	r3, r1
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	440b      	add	r3, r1
 8001172:	0099      	lsls	r1, r3, #2
 8001174:	440b      	add	r3, r1
 8001176:	fbb0 f3f3 	udiv	r3, r0, r3
 800117a:	3301      	adds	r3, #1
 800117c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001180:	2b00      	cmp	r3, #0
 8001182:	bf0c      	ite	eq
 8001184:	2301      	moveq	r3, #1
 8001186:	2300      	movne	r3, #0
 8001188:	b2db      	uxtb	r3, r3
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <HAL_I2C_Init+0x196>
 800118e:	2301      	movs	r3, #1
 8001190:	e022      	b.n	80011d8 <HAL_I2C_Init+0x1dc>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d10e      	bne.n	80011b8 <HAL_I2C_Init+0x1bc>
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	1e58      	subs	r0, r3, #1
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6859      	ldr	r1, [r3, #4]
 80011a2:	460b      	mov	r3, r1
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	440b      	add	r3, r1
 80011a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80011ac:	3301      	adds	r3, #1
 80011ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011b6:	e00f      	b.n	80011d8 <HAL_I2C_Init+0x1dc>
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	1e58      	subs	r0, r3, #1
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6859      	ldr	r1, [r3, #4]
 80011c0:	460b      	mov	r3, r1
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	440b      	add	r3, r1
 80011c6:	0099      	lsls	r1, r3, #2
 80011c8:	440b      	add	r3, r1
 80011ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80011ce:	3301      	adds	r3, #1
 80011d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80011d8:	6879      	ldr	r1, [r7, #4]
 80011da:	6809      	ldr	r1, [r1, #0]
 80011dc:	4313      	orrs	r3, r2
 80011de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	69da      	ldr	r2, [r3, #28]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6a1b      	ldr	r3, [r3, #32]
 80011f2:	431a      	orrs	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	430a      	orrs	r2, r1
 80011fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001206:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	6911      	ldr	r1, [r2, #16]
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	68d2      	ldr	r2, [r2, #12]
 8001212:	4311      	orrs	r1, r2
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	6812      	ldr	r2, [r2, #0]
 8001218:	430b      	orrs	r3, r1
 800121a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	695a      	ldr	r2, [r3, #20]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	431a      	orrs	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	430a      	orrs	r2, r1
 8001236:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f042 0201 	orr.w	r2, r2, #1
 8001246:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2200      	movs	r2, #0
 800124c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2220      	movs	r2, #32
 8001252:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	000186a0 	.word	0x000186a0
 8001274:	001e847f 	.word	0x001e847f
 8001278:	003d08ff 	.word	0x003d08ff
 800127c:	431bde83 	.word	0x431bde83
 8001280:	10624dd3 	.word	0x10624dd3

08001284 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af02      	add	r7, sp, #8
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	607a      	str	r2, [r7, #4]
 800128e:	461a      	mov	r2, r3
 8001290:	460b      	mov	r3, r1
 8001292:	817b      	strh	r3, [r7, #10]
 8001294:	4613      	mov	r3, r2
 8001296:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001298:	f7ff fbec 	bl	8000a74 <HAL_GetTick>
 800129c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	2b20      	cmp	r3, #32
 80012a8:	f040 80e0 	bne.w	800146c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	2319      	movs	r3, #25
 80012b2:	2201      	movs	r2, #1
 80012b4:	4970      	ldr	r1, [pc, #448]	@ (8001478 <HAL_I2C_Master_Transmit+0x1f4>)
 80012b6:	68f8      	ldr	r0, [r7, #12]
 80012b8:	f000 f964 	bl	8001584 <I2C_WaitOnFlagUntilTimeout>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80012c2:	2302      	movs	r3, #2
 80012c4:	e0d3      	b.n	800146e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d101      	bne.n	80012d4 <HAL_I2C_Master_Transmit+0x50>
 80012d0:	2302      	movs	r3, #2
 80012d2:	e0cc      	b.n	800146e <HAL_I2C_Master_Transmit+0x1ea>
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2201      	movs	r2, #1
 80012d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d007      	beq.n	80012fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f042 0201 	orr.w	r2, r2, #1
 80012f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001308:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	2221      	movs	r2, #33	@ 0x21
 800130e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2210      	movs	r2, #16
 8001316:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	2200      	movs	r2, #0
 800131e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	893a      	ldrh	r2, [r7, #8]
 800132a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001330:	b29a      	uxth	r2, r3
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	4a50      	ldr	r2, [pc, #320]	@ (800147c <HAL_I2C_Master_Transmit+0x1f8>)
 800133a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800133c:	8979      	ldrh	r1, [r7, #10]
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	6a3a      	ldr	r2, [r7, #32]
 8001342:	68f8      	ldr	r0, [r7, #12]
 8001344:	f000 f89c 	bl	8001480 <I2C_MasterRequestWrite>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e08d      	b.n	800146e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001352:	2300      	movs	r3, #0
 8001354:	613b      	str	r3, [r7, #16]
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	695b      	ldr	r3, [r3, #20]
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	613b      	str	r3, [r7, #16]
 8001366:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001368:	e066      	b.n	8001438 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800136a:	697a      	ldr	r2, [r7, #20]
 800136c:	6a39      	ldr	r1, [r7, #32]
 800136e:	68f8      	ldr	r0, [r7, #12]
 8001370:	f000 fa22 	bl	80017b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d00d      	beq.n	8001396 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137e:	2b04      	cmp	r3, #4
 8001380:	d107      	bne.n	8001392 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001390:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e06b      	b.n	800146e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800139a:	781a      	ldrb	r2, [r3, #0]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013a6:	1c5a      	adds	r2, r3, #1
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	3b01      	subs	r3, #1
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013be:	3b01      	subs	r3, #1
 80013c0:	b29a      	uxth	r2, r3
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	695b      	ldr	r3, [r3, #20]
 80013cc:	f003 0304 	and.w	r3, r3, #4
 80013d0:	2b04      	cmp	r3, #4
 80013d2:	d11b      	bne.n	800140c <HAL_I2C_Master_Transmit+0x188>
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d017      	beq.n	800140c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013e0:	781a      	ldrb	r2, [r3, #0]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ec:	1c5a      	adds	r2, r3, #1
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	3b01      	subs	r3, #1
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001404:	3b01      	subs	r3, #1
 8001406:	b29a      	uxth	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800140c:	697a      	ldr	r2, [r7, #20]
 800140e:	6a39      	ldr	r1, [r7, #32]
 8001410:	68f8      	ldr	r0, [r7, #12]
 8001412:	f000 fa19 	bl	8001848 <I2C_WaitOnBTFFlagUntilTimeout>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d00d      	beq.n	8001438 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001420:	2b04      	cmp	r3, #4
 8001422:	d107      	bne.n	8001434 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001432:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e01a      	b.n	800146e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800143c:	2b00      	cmp	r3, #0
 800143e:	d194      	bne.n	800136a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800144e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2220      	movs	r2, #32
 8001454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	2200      	movs	r2, #0
 800145c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2200      	movs	r2, #0
 8001464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001468:	2300      	movs	r3, #0
 800146a:	e000      	b.n	800146e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800146c:	2302      	movs	r3, #2
  }
}
 800146e:	4618      	mov	r0, r3
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	00100002 	.word	0x00100002
 800147c:	ffff0000 	.word	0xffff0000

08001480 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b088      	sub	sp, #32
 8001484:	af02      	add	r7, sp, #8
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	607a      	str	r2, [r7, #4]
 800148a:	603b      	str	r3, [r7, #0]
 800148c:	460b      	mov	r3, r1
 800148e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001494:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	2b08      	cmp	r3, #8
 800149a:	d006      	beq.n	80014aa <I2C_MasterRequestWrite+0x2a>
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d003      	beq.n	80014aa <I2C_MasterRequestWrite+0x2a>
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80014a8:	d108      	bne.n	80014bc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	e00b      	b.n	80014d4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c0:	2b12      	cmp	r3, #18
 80014c2:	d107      	bne.n	80014d4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80014d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	9300      	str	r3, [sp, #0]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2200      	movs	r2, #0
 80014dc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80014e0:	68f8      	ldr	r0, [r7, #12]
 80014e2:	f000 f84f 	bl	8001584 <I2C_WaitOnFlagUntilTimeout>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d00d      	beq.n	8001508 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80014fa:	d103      	bne.n	8001504 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001502:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e035      	b.n	8001574 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	691b      	ldr	r3, [r3, #16]
 800150c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001510:	d108      	bne.n	8001524 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001512:	897b      	ldrh	r3, [r7, #10]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	461a      	mov	r2, r3
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001520:	611a      	str	r2, [r3, #16]
 8001522:	e01b      	b.n	800155c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001524:	897b      	ldrh	r3, [r7, #10]
 8001526:	11db      	asrs	r3, r3, #7
 8001528:	b2db      	uxtb	r3, r3
 800152a:	f003 0306 	and.w	r3, r3, #6
 800152e:	b2db      	uxtb	r3, r3
 8001530:	f063 030f 	orn	r3, r3, #15
 8001534:	b2da      	uxtb	r2, r3
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	490e      	ldr	r1, [pc, #56]	@ (800157c <I2C_MasterRequestWrite+0xfc>)
 8001542:	68f8      	ldr	r0, [r7, #12]
 8001544:	f000 f898 	bl	8001678 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e010      	b.n	8001574 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001552:	897b      	ldrh	r3, [r7, #10]
 8001554:	b2da      	uxtb	r2, r3
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	4907      	ldr	r1, [pc, #28]	@ (8001580 <I2C_MasterRequestWrite+0x100>)
 8001562:	68f8      	ldr	r0, [r7, #12]
 8001564:	f000 f888 	bl	8001678 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e000      	b.n	8001574 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001572:	2300      	movs	r3, #0
}
 8001574:	4618      	mov	r0, r3
 8001576:	3718      	adds	r7, #24
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	00010008 	.word	0x00010008
 8001580:	00010002 	.word	0x00010002

08001584 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	603b      	str	r3, [r7, #0]
 8001590:	4613      	mov	r3, r2
 8001592:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001594:	e048      	b.n	8001628 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800159c:	d044      	beq.n	8001628 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800159e:	f7ff fa69 	bl	8000a74 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d302      	bcc.n	80015b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d139      	bne.n	8001628 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	0c1b      	lsrs	r3, r3, #16
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d10d      	bne.n	80015da <I2C_WaitOnFlagUntilTimeout+0x56>
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	695b      	ldr	r3, [r3, #20]
 80015c4:	43da      	mvns	r2, r3
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	4013      	ands	r3, r2
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	bf0c      	ite	eq
 80015d0:	2301      	moveq	r3, #1
 80015d2:	2300      	movne	r3, #0
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	461a      	mov	r2, r3
 80015d8:	e00c      	b.n	80015f4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	43da      	mvns	r2, r3
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	4013      	ands	r3, r2
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	bf0c      	ite	eq
 80015ec:	2301      	moveq	r3, #1
 80015ee:	2300      	movne	r3, #0
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	461a      	mov	r2, r3
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d116      	bne.n	8001628 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2200      	movs	r2, #0
 80015fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2220      	movs	r2, #32
 8001604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2200      	movs	r2, #0
 800160c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001614:	f043 0220 	orr.w	r2, r3, #32
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2200      	movs	r2, #0
 8001620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e023      	b.n	8001670 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	0c1b      	lsrs	r3, r3, #16
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b01      	cmp	r3, #1
 8001630:	d10d      	bne.n	800164e <I2C_WaitOnFlagUntilTimeout+0xca>
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	695b      	ldr	r3, [r3, #20]
 8001638:	43da      	mvns	r2, r3
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	4013      	ands	r3, r2
 800163e:	b29b      	uxth	r3, r3
 8001640:	2b00      	cmp	r3, #0
 8001642:	bf0c      	ite	eq
 8001644:	2301      	moveq	r3, #1
 8001646:	2300      	movne	r3, #0
 8001648:	b2db      	uxtb	r3, r3
 800164a:	461a      	mov	r2, r3
 800164c:	e00c      	b.n	8001668 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	43da      	mvns	r2, r3
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	4013      	ands	r3, r2
 800165a:	b29b      	uxth	r3, r3
 800165c:	2b00      	cmp	r3, #0
 800165e:	bf0c      	ite	eq
 8001660:	2301      	moveq	r3, #1
 8001662:	2300      	movne	r3, #0
 8001664:	b2db      	uxtb	r3, r3
 8001666:	461a      	mov	r2, r3
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	429a      	cmp	r2, r3
 800166c:	d093      	beq.n	8001596 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800166e:	2300      	movs	r3, #0
}
 8001670:	4618      	mov	r0, r3
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
 8001684:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001686:	e071      	b.n	800176c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001692:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001696:	d123      	bne.n	80016e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80016a6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80016b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2200      	movs	r2, #0
 80016b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2220      	movs	r2, #32
 80016bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016cc:	f043 0204 	orr.w	r2, r3, #4
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2200      	movs	r2, #0
 80016d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e067      	b.n	80017b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016e6:	d041      	beq.n	800176c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016e8:	f7ff f9c4 	bl	8000a74 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d302      	bcc.n	80016fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d136      	bne.n	800176c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	0c1b      	lsrs	r3, r3, #16
 8001702:	b2db      	uxtb	r3, r3
 8001704:	2b01      	cmp	r3, #1
 8001706:	d10c      	bne.n	8001722 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	695b      	ldr	r3, [r3, #20]
 800170e:	43da      	mvns	r2, r3
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	4013      	ands	r3, r2
 8001714:	b29b      	uxth	r3, r3
 8001716:	2b00      	cmp	r3, #0
 8001718:	bf14      	ite	ne
 800171a:	2301      	movne	r3, #1
 800171c:	2300      	moveq	r3, #0
 800171e:	b2db      	uxtb	r3, r3
 8001720:	e00b      	b.n	800173a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	43da      	mvns	r2, r3
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	4013      	ands	r3, r2
 800172e:	b29b      	uxth	r3, r3
 8001730:	2b00      	cmp	r3, #0
 8001732:	bf14      	ite	ne
 8001734:	2301      	movne	r3, #1
 8001736:	2300      	moveq	r3, #0
 8001738:	b2db      	uxtb	r3, r3
 800173a:	2b00      	cmp	r3, #0
 800173c:	d016      	beq.n	800176c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2200      	movs	r2, #0
 8001742:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2220      	movs	r2, #32
 8001748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2200      	movs	r2, #0
 8001750:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001758:	f043 0220 	orr.w	r2, r3, #32
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2200      	movs	r2, #0
 8001764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e021      	b.n	80017b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	0c1b      	lsrs	r3, r3, #16
 8001770:	b2db      	uxtb	r3, r3
 8001772:	2b01      	cmp	r3, #1
 8001774:	d10c      	bne.n	8001790 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	695b      	ldr	r3, [r3, #20]
 800177c:	43da      	mvns	r2, r3
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	4013      	ands	r3, r2
 8001782:	b29b      	uxth	r3, r3
 8001784:	2b00      	cmp	r3, #0
 8001786:	bf14      	ite	ne
 8001788:	2301      	movne	r3, #1
 800178a:	2300      	moveq	r3, #0
 800178c:	b2db      	uxtb	r3, r3
 800178e:	e00b      	b.n	80017a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	43da      	mvns	r2, r3
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	4013      	ands	r3, r2
 800179c:	b29b      	uxth	r3, r3
 800179e:	2b00      	cmp	r3, #0
 80017a0:	bf14      	ite	ne
 80017a2:	2301      	movne	r3, #1
 80017a4:	2300      	moveq	r3, #0
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	f47f af6d 	bne.w	8001688 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80017ae:	2300      	movs	r3, #0
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3710      	adds	r7, #16
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80017c4:	e034      	b.n	8001830 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80017c6:	68f8      	ldr	r0, [r7, #12]
 80017c8:	f000 f886 	bl	80018d8 <I2C_IsAcknowledgeFailed>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e034      	b.n	8001840 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017dc:	d028      	beq.n	8001830 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017de:	f7ff f949 	bl	8000a74 <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	68ba      	ldr	r2, [r7, #8]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d302      	bcc.n	80017f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d11d      	bne.n	8001830 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017fe:	2b80      	cmp	r3, #128	@ 0x80
 8001800:	d016      	beq.n	8001830 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2200      	movs	r2, #0
 8001806:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2220      	movs	r2, #32
 800180c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2200      	movs	r2, #0
 8001814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181c:	f043 0220 	orr.w	r2, r3, #32
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e007      	b.n	8001840 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	695b      	ldr	r3, [r3, #20]
 8001836:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800183a:	2b80      	cmp	r3, #128	@ 0x80
 800183c:	d1c3      	bne.n	80017c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800183e:	2300      	movs	r3, #0
}
 8001840:	4618      	mov	r0, r3
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001854:	e034      	b.n	80018c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001856:	68f8      	ldr	r0, [r7, #12]
 8001858:	f000 f83e 	bl	80018d8 <I2C_IsAcknowledgeFailed>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e034      	b.n	80018d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800186c:	d028      	beq.n	80018c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800186e:	f7ff f901 	bl	8000a74 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	68ba      	ldr	r2, [r7, #8]
 800187a:	429a      	cmp	r2, r3
 800187c:	d302      	bcc.n	8001884 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d11d      	bne.n	80018c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	695b      	ldr	r3, [r3, #20]
 800188a:	f003 0304 	and.w	r3, r3, #4
 800188e:	2b04      	cmp	r3, #4
 8001890:	d016      	beq.n	80018c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2200      	movs	r2, #0
 8001896:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2220      	movs	r2, #32
 800189c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2200      	movs	r2, #0
 80018a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ac:	f043 0220 	orr.w	r2, r3, #32
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2200      	movs	r2, #0
 80018b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e007      	b.n	80018d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	f003 0304 	and.w	r3, r3, #4
 80018ca:	2b04      	cmp	r3, #4
 80018cc:	d1c3      	bne.n	8001856 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018ee:	d11b      	bne.n	8001928 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80018f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2220      	movs	r2, #32
 8001904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001914:	f043 0204 	orr.w	r2, r3, #4
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e000      	b.n	800192a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
	...

08001938 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d101      	bne.n	800194c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e0cc      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800194c:	4b68      	ldr	r3, [pc, #416]	@ (8001af0 <HAL_RCC_ClockConfig+0x1b8>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 030f 	and.w	r3, r3, #15
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	429a      	cmp	r2, r3
 8001958:	d90c      	bls.n	8001974 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800195a:	4b65      	ldr	r3, [pc, #404]	@ (8001af0 <HAL_RCC_ClockConfig+0x1b8>)
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	b2d2      	uxtb	r2, r2
 8001960:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001962:	4b63      	ldr	r3, [pc, #396]	@ (8001af0 <HAL_RCC_ClockConfig+0x1b8>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 030f 	and.w	r3, r3, #15
 800196a:	683a      	ldr	r2, [r7, #0]
 800196c:	429a      	cmp	r2, r3
 800196e:	d001      	beq.n	8001974 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e0b8      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d020      	beq.n	80019c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0304 	and.w	r3, r3, #4
 8001988:	2b00      	cmp	r3, #0
 800198a:	d005      	beq.n	8001998 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800198c:	4b59      	ldr	r3, [pc, #356]	@ (8001af4 <HAL_RCC_ClockConfig+0x1bc>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	4a58      	ldr	r2, [pc, #352]	@ (8001af4 <HAL_RCC_ClockConfig+0x1bc>)
 8001992:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001996:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0308 	and.w	r3, r3, #8
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d005      	beq.n	80019b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019a4:	4b53      	ldr	r3, [pc, #332]	@ (8001af4 <HAL_RCC_ClockConfig+0x1bc>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	4a52      	ldr	r2, [pc, #328]	@ (8001af4 <HAL_RCC_ClockConfig+0x1bc>)
 80019aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80019ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019b0:	4b50      	ldr	r3, [pc, #320]	@ (8001af4 <HAL_RCC_ClockConfig+0x1bc>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	494d      	ldr	r1, [pc, #308]	@ (8001af4 <HAL_RCC_ClockConfig+0x1bc>)
 80019be:	4313      	orrs	r3, r2
 80019c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d044      	beq.n	8001a58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d107      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019d6:	4b47      	ldr	r3, [pc, #284]	@ (8001af4 <HAL_RCC_ClockConfig+0x1bc>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d119      	bne.n	8001a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e07f      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d003      	beq.n	80019f6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019f2:	2b03      	cmp	r3, #3
 80019f4:	d107      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019f6:	4b3f      	ldr	r3, [pc, #252]	@ (8001af4 <HAL_RCC_ClockConfig+0x1bc>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d109      	bne.n	8001a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e06f      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a06:	4b3b      	ldr	r3, [pc, #236]	@ (8001af4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e067      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a16:	4b37      	ldr	r3, [pc, #220]	@ (8001af4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f023 0203 	bic.w	r2, r3, #3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	4934      	ldr	r1, [pc, #208]	@ (8001af4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a28:	f7ff f824 	bl	8000a74 <HAL_GetTick>
 8001a2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a2e:	e00a      	b.n	8001a46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a30:	f7ff f820 	bl	8000a74 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e04f      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a46:	4b2b      	ldr	r3, [pc, #172]	@ (8001af4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f003 020c 	and.w	r2, r3, #12
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d1eb      	bne.n	8001a30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a58:	4b25      	ldr	r3, [pc, #148]	@ (8001af0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 030f 	and.w	r3, r3, #15
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d20c      	bcs.n	8001a80 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a66:	4b22      	ldr	r3, [pc, #136]	@ (8001af0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	b2d2      	uxtb	r2, r2
 8001a6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a6e:	4b20      	ldr	r3, [pc, #128]	@ (8001af0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 030f 	and.w	r3, r3, #15
 8001a76:	683a      	ldr	r2, [r7, #0]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d001      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e032      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0304 	and.w	r3, r3, #4
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d008      	beq.n	8001a9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a8c:	4b19      	ldr	r3, [pc, #100]	@ (8001af4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	4916      	ldr	r1, [pc, #88]	@ (8001af4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0308 	and.w	r3, r3, #8
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d009      	beq.n	8001abe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001aaa:	4b12      	ldr	r3, [pc, #72]	@ (8001af4 <HAL_RCC_ClockConfig+0x1bc>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	490e      	ldr	r1, [pc, #56]	@ (8001af4 <HAL_RCC_ClockConfig+0x1bc>)
 8001aba:	4313      	orrs	r3, r2
 8001abc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001abe:	f000 f855 	bl	8001b6c <HAL_RCC_GetSysClockFreq>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8001af4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	091b      	lsrs	r3, r3, #4
 8001aca:	f003 030f 	and.w	r3, r3, #15
 8001ace:	490a      	ldr	r1, [pc, #40]	@ (8001af8 <HAL_RCC_ClockConfig+0x1c0>)
 8001ad0:	5ccb      	ldrb	r3, [r1, r3]
 8001ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ad6:	4a09      	ldr	r2, [pc, #36]	@ (8001afc <HAL_RCC_ClockConfig+0x1c4>)
 8001ad8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001ada:	4b09      	ldr	r3, [pc, #36]	@ (8001b00 <HAL_RCC_ClockConfig+0x1c8>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7fe ff84 	bl	80009ec <HAL_InitTick>

  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40023c00 	.word	0x40023c00
 8001af4:	40023800 	.word	0x40023800
 8001af8:	08002b00 	.word	0x08002b00
 8001afc:	20000000 	.word	0x20000000
 8001b00:	20000004 	.word	0x20000004

08001b04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b08:	4b03      	ldr	r3, [pc, #12]	@ (8001b18 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	20000000 	.word	0x20000000

08001b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b20:	f7ff fff0 	bl	8001b04 <HAL_RCC_GetHCLKFreq>
 8001b24:	4602      	mov	r2, r0
 8001b26:	4b05      	ldr	r3, [pc, #20]	@ (8001b3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	0a9b      	lsrs	r3, r3, #10
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	4903      	ldr	r1, [pc, #12]	@ (8001b40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b32:	5ccb      	ldrb	r3, [r1, r3]
 8001b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	08002b10 	.word	0x08002b10

08001b44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b48:	f7ff ffdc 	bl	8001b04 <HAL_RCC_GetHCLKFreq>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	4b05      	ldr	r3, [pc, #20]	@ (8001b64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	0b5b      	lsrs	r3, r3, #13
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	4903      	ldr	r1, [pc, #12]	@ (8001b68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b5a:	5ccb      	ldrb	r3, [r1, r3]
 8001b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40023800 	.word	0x40023800
 8001b68:	08002b10 	.word	0x08002b10

08001b6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b70:	b0ae      	sub	sp, #184	@ 0xb8
 8001b72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b74:	2300      	movs	r3, #0
 8001b76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001b80:	2300      	movs	r3, #0
 8001b82:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001b86:	2300      	movs	r3, #0
 8001b88:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b92:	4bcb      	ldr	r3, [pc, #812]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f003 030c 	and.w	r3, r3, #12
 8001b9a:	2b0c      	cmp	r3, #12
 8001b9c:	f200 8206 	bhi.w	8001fac <HAL_RCC_GetSysClockFreq+0x440>
 8001ba0:	a201      	add	r2, pc, #4	@ (adr r2, 8001ba8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba6:	bf00      	nop
 8001ba8:	08001bdd 	.word	0x08001bdd
 8001bac:	08001fad 	.word	0x08001fad
 8001bb0:	08001fad 	.word	0x08001fad
 8001bb4:	08001fad 	.word	0x08001fad
 8001bb8:	08001be5 	.word	0x08001be5
 8001bbc:	08001fad 	.word	0x08001fad
 8001bc0:	08001fad 	.word	0x08001fad
 8001bc4:	08001fad 	.word	0x08001fad
 8001bc8:	08001bed 	.word	0x08001bed
 8001bcc:	08001fad 	.word	0x08001fad
 8001bd0:	08001fad 	.word	0x08001fad
 8001bd4:	08001fad 	.word	0x08001fad
 8001bd8:	08001ddd 	.word	0x08001ddd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bdc:	4bb9      	ldr	r3, [pc, #740]	@ (8001ec4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001bde:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001be2:	e1e7      	b.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001be4:	4bb8      	ldr	r3, [pc, #736]	@ (8001ec8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001be6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001bea:	e1e3      	b.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bec:	4bb4      	ldr	r3, [pc, #720]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001bf4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bf8:	4bb1      	ldr	r3, [pc, #708]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d071      	beq.n	8001ce8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c04:	4bae      	ldr	r3, [pc, #696]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	099b      	lsrs	r3, r3, #6
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001c10:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001c14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001c18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c1c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001c20:	2300      	movs	r3, #0
 8001c22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001c26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001c2a:	4622      	mov	r2, r4
 8001c2c:	462b      	mov	r3, r5
 8001c2e:	f04f 0000 	mov.w	r0, #0
 8001c32:	f04f 0100 	mov.w	r1, #0
 8001c36:	0159      	lsls	r1, r3, #5
 8001c38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c3c:	0150      	lsls	r0, r2, #5
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	4621      	mov	r1, r4
 8001c44:	1a51      	subs	r1, r2, r1
 8001c46:	6439      	str	r1, [r7, #64]	@ 0x40
 8001c48:	4629      	mov	r1, r5
 8001c4a:	eb63 0301 	sbc.w	r3, r3, r1
 8001c4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c50:	f04f 0200 	mov.w	r2, #0
 8001c54:	f04f 0300 	mov.w	r3, #0
 8001c58:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001c5c:	4649      	mov	r1, r9
 8001c5e:	018b      	lsls	r3, r1, #6
 8001c60:	4641      	mov	r1, r8
 8001c62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c66:	4641      	mov	r1, r8
 8001c68:	018a      	lsls	r2, r1, #6
 8001c6a:	4641      	mov	r1, r8
 8001c6c:	1a51      	subs	r1, r2, r1
 8001c6e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001c70:	4649      	mov	r1, r9
 8001c72:	eb63 0301 	sbc.w	r3, r3, r1
 8001c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c78:	f04f 0200 	mov.w	r2, #0
 8001c7c:	f04f 0300 	mov.w	r3, #0
 8001c80:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001c84:	4649      	mov	r1, r9
 8001c86:	00cb      	lsls	r3, r1, #3
 8001c88:	4641      	mov	r1, r8
 8001c8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001c8e:	4641      	mov	r1, r8
 8001c90:	00ca      	lsls	r2, r1, #3
 8001c92:	4610      	mov	r0, r2
 8001c94:	4619      	mov	r1, r3
 8001c96:	4603      	mov	r3, r0
 8001c98:	4622      	mov	r2, r4
 8001c9a:	189b      	adds	r3, r3, r2
 8001c9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c9e:	462b      	mov	r3, r5
 8001ca0:	460a      	mov	r2, r1
 8001ca2:	eb42 0303 	adc.w	r3, r2, r3
 8001ca6:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ca8:	f04f 0200 	mov.w	r2, #0
 8001cac:	f04f 0300 	mov.w	r3, #0
 8001cb0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001cb4:	4629      	mov	r1, r5
 8001cb6:	024b      	lsls	r3, r1, #9
 8001cb8:	4621      	mov	r1, r4
 8001cba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001cbe:	4621      	mov	r1, r4
 8001cc0:	024a      	lsls	r2, r1, #9
 8001cc2:	4610      	mov	r0, r2
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001cd0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001cd4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001cd8:	f7fe fa94 	bl	8000204 <__aeabi_uldivmod>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001ce6:	e067      	b.n	8001db8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ce8:	4b75      	ldr	r3, [pc, #468]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	099b      	lsrs	r3, r3, #6
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001cf4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001cf8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001cfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d00:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001d02:	2300      	movs	r3, #0
 8001d04:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001d06:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001d0a:	4622      	mov	r2, r4
 8001d0c:	462b      	mov	r3, r5
 8001d0e:	f04f 0000 	mov.w	r0, #0
 8001d12:	f04f 0100 	mov.w	r1, #0
 8001d16:	0159      	lsls	r1, r3, #5
 8001d18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d1c:	0150      	lsls	r0, r2, #5
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	4621      	mov	r1, r4
 8001d24:	1a51      	subs	r1, r2, r1
 8001d26:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001d28:	4629      	mov	r1, r5
 8001d2a:	eb63 0301 	sbc.w	r3, r3, r1
 8001d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d30:	f04f 0200 	mov.w	r2, #0
 8001d34:	f04f 0300 	mov.w	r3, #0
 8001d38:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001d3c:	4649      	mov	r1, r9
 8001d3e:	018b      	lsls	r3, r1, #6
 8001d40:	4641      	mov	r1, r8
 8001d42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d46:	4641      	mov	r1, r8
 8001d48:	018a      	lsls	r2, r1, #6
 8001d4a:	4641      	mov	r1, r8
 8001d4c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d50:	4649      	mov	r1, r9
 8001d52:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d56:	f04f 0200 	mov.w	r2, #0
 8001d5a:	f04f 0300 	mov.w	r3, #0
 8001d5e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001d62:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001d66:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001d6a:	4692      	mov	sl, r2
 8001d6c:	469b      	mov	fp, r3
 8001d6e:	4623      	mov	r3, r4
 8001d70:	eb1a 0303 	adds.w	r3, sl, r3
 8001d74:	623b      	str	r3, [r7, #32]
 8001d76:	462b      	mov	r3, r5
 8001d78:	eb4b 0303 	adc.w	r3, fp, r3
 8001d7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d7e:	f04f 0200 	mov.w	r2, #0
 8001d82:	f04f 0300 	mov.w	r3, #0
 8001d86:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001d8a:	4629      	mov	r1, r5
 8001d8c:	028b      	lsls	r3, r1, #10
 8001d8e:	4621      	mov	r1, r4
 8001d90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d94:	4621      	mov	r1, r4
 8001d96:	028a      	lsls	r2, r1, #10
 8001d98:	4610      	mov	r0, r2
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001da0:	2200      	movs	r2, #0
 8001da2:	673b      	str	r3, [r7, #112]	@ 0x70
 8001da4:	677a      	str	r2, [r7, #116]	@ 0x74
 8001da6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001daa:	f7fe fa2b 	bl	8000204 <__aeabi_uldivmod>
 8001dae:	4602      	mov	r2, r0
 8001db0:	460b      	mov	r3, r1
 8001db2:	4613      	mov	r3, r2
 8001db4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001db8:	4b41      	ldr	r3, [pc, #260]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	0c1b      	lsrs	r3, r3, #16
 8001dbe:	f003 0303 	and.w	r3, r3, #3
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001dca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001dce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001dda:	e0eb      	b.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ddc:	4b38      	ldr	r3, [pc, #224]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001de4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001de8:	4b35      	ldr	r3, [pc, #212]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d06b      	beq.n	8001ecc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001df4:	4b32      	ldr	r3, [pc, #200]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	099b      	lsrs	r3, r3, #6
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001dfe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001e00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e06:	663b      	str	r3, [r7, #96]	@ 0x60
 8001e08:	2300      	movs	r3, #0
 8001e0a:	667b      	str	r3, [r7, #100]	@ 0x64
 8001e0c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001e10:	4622      	mov	r2, r4
 8001e12:	462b      	mov	r3, r5
 8001e14:	f04f 0000 	mov.w	r0, #0
 8001e18:	f04f 0100 	mov.w	r1, #0
 8001e1c:	0159      	lsls	r1, r3, #5
 8001e1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e22:	0150      	lsls	r0, r2, #5
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4621      	mov	r1, r4
 8001e2a:	1a51      	subs	r1, r2, r1
 8001e2c:	61b9      	str	r1, [r7, #24]
 8001e2e:	4629      	mov	r1, r5
 8001e30:	eb63 0301 	sbc.w	r3, r3, r1
 8001e34:	61fb      	str	r3, [r7, #28]
 8001e36:	f04f 0200 	mov.w	r2, #0
 8001e3a:	f04f 0300 	mov.w	r3, #0
 8001e3e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001e42:	4659      	mov	r1, fp
 8001e44:	018b      	lsls	r3, r1, #6
 8001e46:	4651      	mov	r1, sl
 8001e48:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e4c:	4651      	mov	r1, sl
 8001e4e:	018a      	lsls	r2, r1, #6
 8001e50:	4651      	mov	r1, sl
 8001e52:	ebb2 0801 	subs.w	r8, r2, r1
 8001e56:	4659      	mov	r1, fp
 8001e58:	eb63 0901 	sbc.w	r9, r3, r1
 8001e5c:	f04f 0200 	mov.w	r2, #0
 8001e60:	f04f 0300 	mov.w	r3, #0
 8001e64:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e68:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e6c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e70:	4690      	mov	r8, r2
 8001e72:	4699      	mov	r9, r3
 8001e74:	4623      	mov	r3, r4
 8001e76:	eb18 0303 	adds.w	r3, r8, r3
 8001e7a:	613b      	str	r3, [r7, #16]
 8001e7c:	462b      	mov	r3, r5
 8001e7e:	eb49 0303 	adc.w	r3, r9, r3
 8001e82:	617b      	str	r3, [r7, #20]
 8001e84:	f04f 0200 	mov.w	r2, #0
 8001e88:	f04f 0300 	mov.w	r3, #0
 8001e8c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001e90:	4629      	mov	r1, r5
 8001e92:	024b      	lsls	r3, r1, #9
 8001e94:	4621      	mov	r1, r4
 8001e96:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e9a:	4621      	mov	r1, r4
 8001e9c:	024a      	lsls	r2, r1, #9
 8001e9e:	4610      	mov	r0, r2
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001eaa:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001eac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001eb0:	f7fe f9a8 	bl	8000204 <__aeabi_uldivmod>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	4613      	mov	r3, r2
 8001eba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001ebe:	e065      	b.n	8001f8c <HAL_RCC_GetSysClockFreq+0x420>
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	00f42400 	.word	0x00f42400
 8001ec8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ecc:	4b3d      	ldr	r3, [pc, #244]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0x458>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	099b      	lsrs	r3, r3, #6
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	4611      	mov	r1, r2
 8001ed8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001edc:	653b      	str	r3, [r7, #80]	@ 0x50
 8001ede:	2300      	movs	r3, #0
 8001ee0:	657b      	str	r3, [r7, #84]	@ 0x54
 8001ee2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001ee6:	4642      	mov	r2, r8
 8001ee8:	464b      	mov	r3, r9
 8001eea:	f04f 0000 	mov.w	r0, #0
 8001eee:	f04f 0100 	mov.w	r1, #0
 8001ef2:	0159      	lsls	r1, r3, #5
 8001ef4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ef8:	0150      	lsls	r0, r2, #5
 8001efa:	4602      	mov	r2, r0
 8001efc:	460b      	mov	r3, r1
 8001efe:	4641      	mov	r1, r8
 8001f00:	1a51      	subs	r1, r2, r1
 8001f02:	60b9      	str	r1, [r7, #8]
 8001f04:	4649      	mov	r1, r9
 8001f06:	eb63 0301 	sbc.w	r3, r3, r1
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	f04f 0200 	mov.w	r2, #0
 8001f10:	f04f 0300 	mov.w	r3, #0
 8001f14:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001f18:	4659      	mov	r1, fp
 8001f1a:	018b      	lsls	r3, r1, #6
 8001f1c:	4651      	mov	r1, sl
 8001f1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f22:	4651      	mov	r1, sl
 8001f24:	018a      	lsls	r2, r1, #6
 8001f26:	4651      	mov	r1, sl
 8001f28:	1a54      	subs	r4, r2, r1
 8001f2a:	4659      	mov	r1, fp
 8001f2c:	eb63 0501 	sbc.w	r5, r3, r1
 8001f30:	f04f 0200 	mov.w	r2, #0
 8001f34:	f04f 0300 	mov.w	r3, #0
 8001f38:	00eb      	lsls	r3, r5, #3
 8001f3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f3e:	00e2      	lsls	r2, r4, #3
 8001f40:	4614      	mov	r4, r2
 8001f42:	461d      	mov	r5, r3
 8001f44:	4643      	mov	r3, r8
 8001f46:	18e3      	adds	r3, r4, r3
 8001f48:	603b      	str	r3, [r7, #0]
 8001f4a:	464b      	mov	r3, r9
 8001f4c:	eb45 0303 	adc.w	r3, r5, r3
 8001f50:	607b      	str	r3, [r7, #4]
 8001f52:	f04f 0200 	mov.w	r2, #0
 8001f56:	f04f 0300 	mov.w	r3, #0
 8001f5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f5e:	4629      	mov	r1, r5
 8001f60:	028b      	lsls	r3, r1, #10
 8001f62:	4621      	mov	r1, r4
 8001f64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f68:	4621      	mov	r1, r4
 8001f6a:	028a      	lsls	r2, r1, #10
 8001f6c:	4610      	mov	r0, r2
 8001f6e:	4619      	mov	r1, r3
 8001f70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f74:	2200      	movs	r2, #0
 8001f76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001f78:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001f7a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001f7e:	f7fe f941 	bl	8000204 <__aeabi_uldivmod>
 8001f82:	4602      	mov	r2, r0
 8001f84:	460b      	mov	r3, r1
 8001f86:	4613      	mov	r3, r2
 8001f88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001f8c:	4b0d      	ldr	r3, [pc, #52]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0x458>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	0f1b      	lsrs	r3, r3, #28
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001f9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001f9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001faa:	e003      	b.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fac:	4b06      	ldr	r3, [pc, #24]	@ (8001fc8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001fae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001fb2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fb4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	37b8      	adds	r7, #184	@ 0xb8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	00f42400 	.word	0x00f42400

08001fcc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e28d      	b.n	80024fa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f000 8083 	beq.w	80020f2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001fec:	4b94      	ldr	r3, [pc, #592]	@ (8002240 <HAL_RCC_OscConfig+0x274>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f003 030c 	and.w	r3, r3, #12
 8001ff4:	2b04      	cmp	r3, #4
 8001ff6:	d019      	beq.n	800202c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001ff8:	4b91      	ldr	r3, [pc, #580]	@ (8002240 <HAL_RCC_OscConfig+0x274>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f003 030c 	and.w	r3, r3, #12
        || \
 8002000:	2b08      	cmp	r3, #8
 8002002:	d106      	bne.n	8002012 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002004:	4b8e      	ldr	r3, [pc, #568]	@ (8002240 <HAL_RCC_OscConfig+0x274>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800200c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002010:	d00c      	beq.n	800202c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002012:	4b8b      	ldr	r3, [pc, #556]	@ (8002240 <HAL_RCC_OscConfig+0x274>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800201a:	2b0c      	cmp	r3, #12
 800201c:	d112      	bne.n	8002044 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800201e:	4b88      	ldr	r3, [pc, #544]	@ (8002240 <HAL_RCC_OscConfig+0x274>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002026:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800202a:	d10b      	bne.n	8002044 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800202c:	4b84      	ldr	r3, [pc, #528]	@ (8002240 <HAL_RCC_OscConfig+0x274>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d05b      	beq.n	80020f0 <HAL_RCC_OscConfig+0x124>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d157      	bne.n	80020f0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e25a      	b.n	80024fa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800204c:	d106      	bne.n	800205c <HAL_RCC_OscConfig+0x90>
 800204e:	4b7c      	ldr	r3, [pc, #496]	@ (8002240 <HAL_RCC_OscConfig+0x274>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a7b      	ldr	r2, [pc, #492]	@ (8002240 <HAL_RCC_OscConfig+0x274>)
 8002054:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002058:	6013      	str	r3, [r2, #0]
 800205a:	e01d      	b.n	8002098 <HAL_RCC_OscConfig+0xcc>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002064:	d10c      	bne.n	8002080 <HAL_RCC_OscConfig+0xb4>
 8002066:	4b76      	ldr	r3, [pc, #472]	@ (8002240 <HAL_RCC_OscConfig+0x274>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a75      	ldr	r2, [pc, #468]	@ (8002240 <HAL_RCC_OscConfig+0x274>)
 800206c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002070:	6013      	str	r3, [r2, #0]
 8002072:	4b73      	ldr	r3, [pc, #460]	@ (8002240 <HAL_RCC_OscConfig+0x274>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a72      	ldr	r2, [pc, #456]	@ (8002240 <HAL_RCC_OscConfig+0x274>)
 8002078:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800207c:	6013      	str	r3, [r2, #0]
 800207e:	e00b      	b.n	8002098 <HAL_RCC_OscConfig+0xcc>
 8002080:	4b6f      	ldr	r3, [pc, #444]	@ (8002240 <HAL_RCC_OscConfig+0x274>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a6e      	ldr	r2, [pc, #440]	@ (8002240 <HAL_RCC_OscConfig+0x274>)
 8002086:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800208a:	6013      	str	r3, [r2, #0]
 800208c:	4b6c      	ldr	r3, [pc, #432]	@ (8002240 <HAL_RCC_OscConfig+0x274>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a6b      	ldr	r2, [pc, #428]	@ (8002240 <HAL_RCC_OscConfig+0x274>)
 8002092:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002096:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d013      	beq.n	80020c8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a0:	f7fe fce8 	bl	8000a74 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020a8:	f7fe fce4 	bl	8000a74 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b64      	cmp	r3, #100	@ 0x64
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e21f      	b.n	80024fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ba:	4b61      	ldr	r3, [pc, #388]	@ (8002240 <HAL_RCC_OscConfig+0x274>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d0f0      	beq.n	80020a8 <HAL_RCC_OscConfig+0xdc>
 80020c6:	e014      	b.n	80020f2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c8:	f7fe fcd4 	bl	8000a74 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020d0:	f7fe fcd0 	bl	8000a74 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b64      	cmp	r3, #100	@ 0x64
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e20b      	b.n	80024fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020e2:	4b57      	ldr	r3, [pc, #348]	@ (8002240 <HAL_RCC_OscConfig+0x274>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1f0      	bne.n	80020d0 <HAL_RCC_OscConfig+0x104>
 80020ee:	e000      	b.n	80020f2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d06f      	beq.n	80021de <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80020fe:	4b50      	ldr	r3, [pc, #320]	@ (8002240 <HAL_RCC_OscConfig+0x274>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f003 030c 	and.w	r3, r3, #12
 8002106:	2b00      	cmp	r3, #0
 8002108:	d017      	beq.n	800213a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800210a:	4b4d      	ldr	r3, [pc, #308]	@ (8002240 <HAL_RCC_OscConfig+0x274>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f003 030c 	and.w	r3, r3, #12
        || \
 8002112:	2b08      	cmp	r3, #8
 8002114:	d105      	bne.n	8002122 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002116:	4b4a      	ldr	r3, [pc, #296]	@ (8002240 <HAL_RCC_OscConfig+0x274>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00b      	beq.n	800213a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002122:	4b47      	ldr	r3, [pc, #284]	@ (8002240 <HAL_RCC_OscConfig+0x274>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800212a:	2b0c      	cmp	r3, #12
 800212c:	d11c      	bne.n	8002168 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800212e:	4b44      	ldr	r3, [pc, #272]	@ (8002240 <HAL_RCC_OscConfig+0x274>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d116      	bne.n	8002168 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800213a:	4b41      	ldr	r3, [pc, #260]	@ (8002240 <HAL_RCC_OscConfig+0x274>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d005      	beq.n	8002152 <HAL_RCC_OscConfig+0x186>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d001      	beq.n	8002152 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e1d3      	b.n	80024fa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002152:	4b3b      	ldr	r3, [pc, #236]	@ (8002240 <HAL_RCC_OscConfig+0x274>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	4937      	ldr	r1, [pc, #220]	@ (8002240 <HAL_RCC_OscConfig+0x274>)
 8002162:	4313      	orrs	r3, r2
 8002164:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002166:	e03a      	b.n	80021de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d020      	beq.n	80021b2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002170:	4b34      	ldr	r3, [pc, #208]	@ (8002244 <HAL_RCC_OscConfig+0x278>)
 8002172:	2201      	movs	r2, #1
 8002174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002176:	f7fe fc7d 	bl	8000a74 <HAL_GetTick>
 800217a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800217c:	e008      	b.n	8002190 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800217e:	f7fe fc79 	bl	8000a74 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e1b4      	b.n	80024fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002190:	4b2b      	ldr	r3, [pc, #172]	@ (8002240 <HAL_RCC_OscConfig+0x274>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d0f0      	beq.n	800217e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800219c:	4b28      	ldr	r3, [pc, #160]	@ (8002240 <HAL_RCC_OscConfig+0x274>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	4925      	ldr	r1, [pc, #148]	@ (8002240 <HAL_RCC_OscConfig+0x274>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	600b      	str	r3, [r1, #0]
 80021b0:	e015      	b.n	80021de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021b2:	4b24      	ldr	r3, [pc, #144]	@ (8002244 <HAL_RCC_OscConfig+0x278>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b8:	f7fe fc5c 	bl	8000a74 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021c0:	f7fe fc58 	bl	8000a74 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e193      	b.n	80024fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002240 <HAL_RCC_OscConfig+0x274>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1f0      	bne.n	80021c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0308 	and.w	r3, r3, #8
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d036      	beq.n	8002258 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d016      	beq.n	8002220 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021f2:	4b15      	ldr	r3, [pc, #84]	@ (8002248 <HAL_RCC_OscConfig+0x27c>)
 80021f4:	2201      	movs	r2, #1
 80021f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f8:	f7fe fc3c 	bl	8000a74 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002200:	f7fe fc38 	bl	8000a74 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e173      	b.n	80024fa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002212:	4b0b      	ldr	r3, [pc, #44]	@ (8002240 <HAL_RCC_OscConfig+0x274>)
 8002214:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0f0      	beq.n	8002200 <HAL_RCC_OscConfig+0x234>
 800221e:	e01b      	b.n	8002258 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002220:	4b09      	ldr	r3, [pc, #36]	@ (8002248 <HAL_RCC_OscConfig+0x27c>)
 8002222:	2200      	movs	r2, #0
 8002224:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002226:	f7fe fc25 	bl	8000a74 <HAL_GetTick>
 800222a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800222c:	e00e      	b.n	800224c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800222e:	f7fe fc21 	bl	8000a74 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d907      	bls.n	800224c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e15c      	b.n	80024fa <HAL_RCC_OscConfig+0x52e>
 8002240:	40023800 	.word	0x40023800
 8002244:	42470000 	.word	0x42470000
 8002248:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800224c:	4b8a      	ldr	r3, [pc, #552]	@ (8002478 <HAL_RCC_OscConfig+0x4ac>)
 800224e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1ea      	bne.n	800222e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	f000 8097 	beq.w	8002394 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002266:	2300      	movs	r3, #0
 8002268:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800226a:	4b83      	ldr	r3, [pc, #524]	@ (8002478 <HAL_RCC_OscConfig+0x4ac>)
 800226c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10f      	bne.n	8002296 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	60bb      	str	r3, [r7, #8]
 800227a:	4b7f      	ldr	r3, [pc, #508]	@ (8002478 <HAL_RCC_OscConfig+0x4ac>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227e:	4a7e      	ldr	r2, [pc, #504]	@ (8002478 <HAL_RCC_OscConfig+0x4ac>)
 8002280:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002284:	6413      	str	r3, [r2, #64]	@ 0x40
 8002286:	4b7c      	ldr	r3, [pc, #496]	@ (8002478 <HAL_RCC_OscConfig+0x4ac>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800228e:	60bb      	str	r3, [r7, #8]
 8002290:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002292:	2301      	movs	r3, #1
 8002294:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002296:	4b79      	ldr	r3, [pc, #484]	@ (800247c <HAL_RCC_OscConfig+0x4b0>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d118      	bne.n	80022d4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022a2:	4b76      	ldr	r3, [pc, #472]	@ (800247c <HAL_RCC_OscConfig+0x4b0>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a75      	ldr	r2, [pc, #468]	@ (800247c <HAL_RCC_OscConfig+0x4b0>)
 80022a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ae:	f7fe fbe1 	bl	8000a74 <HAL_GetTick>
 80022b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b4:	e008      	b.n	80022c8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022b6:	f7fe fbdd 	bl	8000a74 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e118      	b.n	80024fa <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c8:	4b6c      	ldr	r3, [pc, #432]	@ (800247c <HAL_RCC_OscConfig+0x4b0>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0f0      	beq.n	80022b6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d106      	bne.n	80022ea <HAL_RCC_OscConfig+0x31e>
 80022dc:	4b66      	ldr	r3, [pc, #408]	@ (8002478 <HAL_RCC_OscConfig+0x4ac>)
 80022de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022e0:	4a65      	ldr	r2, [pc, #404]	@ (8002478 <HAL_RCC_OscConfig+0x4ac>)
 80022e2:	f043 0301 	orr.w	r3, r3, #1
 80022e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80022e8:	e01c      	b.n	8002324 <HAL_RCC_OscConfig+0x358>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	2b05      	cmp	r3, #5
 80022f0:	d10c      	bne.n	800230c <HAL_RCC_OscConfig+0x340>
 80022f2:	4b61      	ldr	r3, [pc, #388]	@ (8002478 <HAL_RCC_OscConfig+0x4ac>)
 80022f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022f6:	4a60      	ldr	r2, [pc, #384]	@ (8002478 <HAL_RCC_OscConfig+0x4ac>)
 80022f8:	f043 0304 	orr.w	r3, r3, #4
 80022fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80022fe:	4b5e      	ldr	r3, [pc, #376]	@ (8002478 <HAL_RCC_OscConfig+0x4ac>)
 8002300:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002302:	4a5d      	ldr	r2, [pc, #372]	@ (8002478 <HAL_RCC_OscConfig+0x4ac>)
 8002304:	f043 0301 	orr.w	r3, r3, #1
 8002308:	6713      	str	r3, [r2, #112]	@ 0x70
 800230a:	e00b      	b.n	8002324 <HAL_RCC_OscConfig+0x358>
 800230c:	4b5a      	ldr	r3, [pc, #360]	@ (8002478 <HAL_RCC_OscConfig+0x4ac>)
 800230e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002310:	4a59      	ldr	r2, [pc, #356]	@ (8002478 <HAL_RCC_OscConfig+0x4ac>)
 8002312:	f023 0301 	bic.w	r3, r3, #1
 8002316:	6713      	str	r3, [r2, #112]	@ 0x70
 8002318:	4b57      	ldr	r3, [pc, #348]	@ (8002478 <HAL_RCC_OscConfig+0x4ac>)
 800231a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800231c:	4a56      	ldr	r2, [pc, #344]	@ (8002478 <HAL_RCC_OscConfig+0x4ac>)
 800231e:	f023 0304 	bic.w	r3, r3, #4
 8002322:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d015      	beq.n	8002358 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800232c:	f7fe fba2 	bl	8000a74 <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002332:	e00a      	b.n	800234a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002334:	f7fe fb9e 	bl	8000a74 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002342:	4293      	cmp	r3, r2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e0d7      	b.n	80024fa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800234a:	4b4b      	ldr	r3, [pc, #300]	@ (8002478 <HAL_RCC_OscConfig+0x4ac>)
 800234c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d0ee      	beq.n	8002334 <HAL_RCC_OscConfig+0x368>
 8002356:	e014      	b.n	8002382 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002358:	f7fe fb8c 	bl	8000a74 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800235e:	e00a      	b.n	8002376 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002360:	f7fe fb88 	bl	8000a74 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800236e:	4293      	cmp	r3, r2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e0c1      	b.n	80024fa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002376:	4b40      	ldr	r3, [pc, #256]	@ (8002478 <HAL_RCC_OscConfig+0x4ac>)
 8002378:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1ee      	bne.n	8002360 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002382:	7dfb      	ldrb	r3, [r7, #23]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d105      	bne.n	8002394 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002388:	4b3b      	ldr	r3, [pc, #236]	@ (8002478 <HAL_RCC_OscConfig+0x4ac>)
 800238a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238c:	4a3a      	ldr	r2, [pc, #232]	@ (8002478 <HAL_RCC_OscConfig+0x4ac>)
 800238e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002392:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	2b00      	cmp	r3, #0
 800239a:	f000 80ad 	beq.w	80024f8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800239e:	4b36      	ldr	r3, [pc, #216]	@ (8002478 <HAL_RCC_OscConfig+0x4ac>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 030c 	and.w	r3, r3, #12
 80023a6:	2b08      	cmp	r3, #8
 80023a8:	d060      	beq.n	800246c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d145      	bne.n	800243e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023b2:	4b33      	ldr	r3, [pc, #204]	@ (8002480 <HAL_RCC_OscConfig+0x4b4>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b8:	f7fe fb5c 	bl	8000a74 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c0:	f7fe fb58 	bl	8000a74 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e093      	b.n	80024fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023d2:	4b29      	ldr	r3, [pc, #164]	@ (8002478 <HAL_RCC_OscConfig+0x4ac>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f0      	bne.n	80023c0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	69da      	ldr	r2, [r3, #28]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	431a      	orrs	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ec:	019b      	lsls	r3, r3, #6
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f4:	085b      	lsrs	r3, r3, #1
 80023f6:	3b01      	subs	r3, #1
 80023f8:	041b      	lsls	r3, r3, #16
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002400:	061b      	lsls	r3, r3, #24
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002408:	071b      	lsls	r3, r3, #28
 800240a:	491b      	ldr	r1, [pc, #108]	@ (8002478 <HAL_RCC_OscConfig+0x4ac>)
 800240c:	4313      	orrs	r3, r2
 800240e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002410:	4b1b      	ldr	r3, [pc, #108]	@ (8002480 <HAL_RCC_OscConfig+0x4b4>)
 8002412:	2201      	movs	r2, #1
 8002414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002416:	f7fe fb2d 	bl	8000a74 <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800241c:	e008      	b.n	8002430 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800241e:	f7fe fb29 	bl	8000a74 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e064      	b.n	80024fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002430:	4b11      	ldr	r3, [pc, #68]	@ (8002478 <HAL_RCC_OscConfig+0x4ac>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d0f0      	beq.n	800241e <HAL_RCC_OscConfig+0x452>
 800243c:	e05c      	b.n	80024f8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800243e:	4b10      	ldr	r3, [pc, #64]	@ (8002480 <HAL_RCC_OscConfig+0x4b4>)
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002444:	f7fe fb16 	bl	8000a74 <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800244c:	f7fe fb12 	bl	8000a74 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e04d      	b.n	80024fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800245e:	4b06      	ldr	r3, [pc, #24]	@ (8002478 <HAL_RCC_OscConfig+0x4ac>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1f0      	bne.n	800244c <HAL_RCC_OscConfig+0x480>
 800246a:	e045      	b.n	80024f8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d107      	bne.n	8002484 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e040      	b.n	80024fa <HAL_RCC_OscConfig+0x52e>
 8002478:	40023800 	.word	0x40023800
 800247c:	40007000 	.word	0x40007000
 8002480:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002484:	4b1f      	ldr	r3, [pc, #124]	@ (8002504 <HAL_RCC_OscConfig+0x538>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d030      	beq.n	80024f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800249c:	429a      	cmp	r2, r3
 800249e:	d129      	bne.n	80024f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d122      	bne.n	80024f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80024b4:	4013      	ands	r3, r2
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80024ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024bc:	4293      	cmp	r3, r2
 80024be:	d119      	bne.n	80024f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ca:	085b      	lsrs	r3, r3, #1
 80024cc:	3b01      	subs	r3, #1
 80024ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d10f      	bne.n	80024f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d107      	bne.n	80024f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d001      	beq.n	80024f8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e000      	b.n	80024fa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3718      	adds	r7, #24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	40023800 	.word	0x40023800

08002508 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e042      	b.n	80025a0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d106      	bne.n	8002534 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f7fe f986 	bl	8000840 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2224      	movs	r2, #36	@ 0x24
 8002538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68da      	ldr	r2, [r3, #12]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800254a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f000 f82b 	bl	80025a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	691a      	ldr	r2, [r3, #16]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002560:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	695a      	ldr	r2, [r3, #20]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002570:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68da      	ldr	r2, [r3, #12]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002580:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2220      	movs	r2, #32
 800258c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2220      	movs	r2, #32
 8002594:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3708      	adds	r7, #8
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025ac:	b0c0      	sub	sp, #256	@ 0x100
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80025c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025c4:	68d9      	ldr	r1, [r3, #12]
 80025c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	ea40 0301 	orr.w	r3, r0, r1
 80025d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	431a      	orrs	r2, r3
 80025e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	431a      	orrs	r2, r3
 80025e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80025f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002600:	f021 010c 	bic.w	r1, r1, #12
 8002604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800260e:	430b      	orrs	r3, r1
 8002610:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800261e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002622:	6999      	ldr	r1, [r3, #24]
 8002624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	ea40 0301 	orr.w	r3, r0, r1
 800262e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	4b8f      	ldr	r3, [pc, #572]	@ (8002874 <UART_SetConfig+0x2cc>)
 8002638:	429a      	cmp	r2, r3
 800263a:	d005      	beq.n	8002648 <UART_SetConfig+0xa0>
 800263c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	4b8d      	ldr	r3, [pc, #564]	@ (8002878 <UART_SetConfig+0x2d0>)
 8002644:	429a      	cmp	r2, r3
 8002646:	d104      	bne.n	8002652 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002648:	f7ff fa7c 	bl	8001b44 <HAL_RCC_GetPCLK2Freq>
 800264c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002650:	e003      	b.n	800265a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002652:	f7ff fa63 	bl	8001b1c <HAL_RCC_GetPCLK1Freq>
 8002656:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800265a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800265e:	69db      	ldr	r3, [r3, #28]
 8002660:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002664:	f040 810c 	bne.w	8002880 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002668:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800266c:	2200      	movs	r2, #0
 800266e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002672:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002676:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800267a:	4622      	mov	r2, r4
 800267c:	462b      	mov	r3, r5
 800267e:	1891      	adds	r1, r2, r2
 8002680:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002682:	415b      	adcs	r3, r3
 8002684:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002686:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800268a:	4621      	mov	r1, r4
 800268c:	eb12 0801 	adds.w	r8, r2, r1
 8002690:	4629      	mov	r1, r5
 8002692:	eb43 0901 	adc.w	r9, r3, r1
 8002696:	f04f 0200 	mov.w	r2, #0
 800269a:	f04f 0300 	mov.w	r3, #0
 800269e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026aa:	4690      	mov	r8, r2
 80026ac:	4699      	mov	r9, r3
 80026ae:	4623      	mov	r3, r4
 80026b0:	eb18 0303 	adds.w	r3, r8, r3
 80026b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80026b8:	462b      	mov	r3, r5
 80026ba:	eb49 0303 	adc.w	r3, r9, r3
 80026be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80026c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80026ce:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80026d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80026d6:	460b      	mov	r3, r1
 80026d8:	18db      	adds	r3, r3, r3
 80026da:	653b      	str	r3, [r7, #80]	@ 0x50
 80026dc:	4613      	mov	r3, r2
 80026de:	eb42 0303 	adc.w	r3, r2, r3
 80026e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80026e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80026e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80026ec:	f7fd fd8a 	bl	8000204 <__aeabi_uldivmod>
 80026f0:	4602      	mov	r2, r0
 80026f2:	460b      	mov	r3, r1
 80026f4:	4b61      	ldr	r3, [pc, #388]	@ (800287c <UART_SetConfig+0x2d4>)
 80026f6:	fba3 2302 	umull	r2, r3, r3, r2
 80026fa:	095b      	lsrs	r3, r3, #5
 80026fc:	011c      	lsls	r4, r3, #4
 80026fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002702:	2200      	movs	r2, #0
 8002704:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002708:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800270c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002710:	4642      	mov	r2, r8
 8002712:	464b      	mov	r3, r9
 8002714:	1891      	adds	r1, r2, r2
 8002716:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002718:	415b      	adcs	r3, r3
 800271a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800271c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002720:	4641      	mov	r1, r8
 8002722:	eb12 0a01 	adds.w	sl, r2, r1
 8002726:	4649      	mov	r1, r9
 8002728:	eb43 0b01 	adc.w	fp, r3, r1
 800272c:	f04f 0200 	mov.w	r2, #0
 8002730:	f04f 0300 	mov.w	r3, #0
 8002734:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002738:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800273c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002740:	4692      	mov	sl, r2
 8002742:	469b      	mov	fp, r3
 8002744:	4643      	mov	r3, r8
 8002746:	eb1a 0303 	adds.w	r3, sl, r3
 800274a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800274e:	464b      	mov	r3, r9
 8002750:	eb4b 0303 	adc.w	r3, fp, r3
 8002754:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002764:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002768:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800276c:	460b      	mov	r3, r1
 800276e:	18db      	adds	r3, r3, r3
 8002770:	643b      	str	r3, [r7, #64]	@ 0x40
 8002772:	4613      	mov	r3, r2
 8002774:	eb42 0303 	adc.w	r3, r2, r3
 8002778:	647b      	str	r3, [r7, #68]	@ 0x44
 800277a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800277e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002782:	f7fd fd3f 	bl	8000204 <__aeabi_uldivmod>
 8002786:	4602      	mov	r2, r0
 8002788:	460b      	mov	r3, r1
 800278a:	4611      	mov	r1, r2
 800278c:	4b3b      	ldr	r3, [pc, #236]	@ (800287c <UART_SetConfig+0x2d4>)
 800278e:	fba3 2301 	umull	r2, r3, r3, r1
 8002792:	095b      	lsrs	r3, r3, #5
 8002794:	2264      	movs	r2, #100	@ 0x64
 8002796:	fb02 f303 	mul.w	r3, r2, r3
 800279a:	1acb      	subs	r3, r1, r3
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80027a2:	4b36      	ldr	r3, [pc, #216]	@ (800287c <UART_SetConfig+0x2d4>)
 80027a4:	fba3 2302 	umull	r2, r3, r3, r2
 80027a8:	095b      	lsrs	r3, r3, #5
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80027b0:	441c      	add	r4, r3
 80027b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027b6:	2200      	movs	r2, #0
 80027b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80027bc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80027c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80027c4:	4642      	mov	r2, r8
 80027c6:	464b      	mov	r3, r9
 80027c8:	1891      	adds	r1, r2, r2
 80027ca:	63b9      	str	r1, [r7, #56]	@ 0x38
 80027cc:	415b      	adcs	r3, r3
 80027ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80027d4:	4641      	mov	r1, r8
 80027d6:	1851      	adds	r1, r2, r1
 80027d8:	6339      	str	r1, [r7, #48]	@ 0x30
 80027da:	4649      	mov	r1, r9
 80027dc:	414b      	adcs	r3, r1
 80027de:	637b      	str	r3, [r7, #52]	@ 0x34
 80027e0:	f04f 0200 	mov.w	r2, #0
 80027e4:	f04f 0300 	mov.w	r3, #0
 80027e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80027ec:	4659      	mov	r1, fp
 80027ee:	00cb      	lsls	r3, r1, #3
 80027f0:	4651      	mov	r1, sl
 80027f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027f6:	4651      	mov	r1, sl
 80027f8:	00ca      	lsls	r2, r1, #3
 80027fa:	4610      	mov	r0, r2
 80027fc:	4619      	mov	r1, r3
 80027fe:	4603      	mov	r3, r0
 8002800:	4642      	mov	r2, r8
 8002802:	189b      	adds	r3, r3, r2
 8002804:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002808:	464b      	mov	r3, r9
 800280a:	460a      	mov	r2, r1
 800280c:	eb42 0303 	adc.w	r3, r2, r3
 8002810:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002820:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002824:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002828:	460b      	mov	r3, r1
 800282a:	18db      	adds	r3, r3, r3
 800282c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800282e:	4613      	mov	r3, r2
 8002830:	eb42 0303 	adc.w	r3, r2, r3
 8002834:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002836:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800283a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800283e:	f7fd fce1 	bl	8000204 <__aeabi_uldivmod>
 8002842:	4602      	mov	r2, r0
 8002844:	460b      	mov	r3, r1
 8002846:	4b0d      	ldr	r3, [pc, #52]	@ (800287c <UART_SetConfig+0x2d4>)
 8002848:	fba3 1302 	umull	r1, r3, r3, r2
 800284c:	095b      	lsrs	r3, r3, #5
 800284e:	2164      	movs	r1, #100	@ 0x64
 8002850:	fb01 f303 	mul.w	r3, r1, r3
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	3332      	adds	r3, #50	@ 0x32
 800285a:	4a08      	ldr	r2, [pc, #32]	@ (800287c <UART_SetConfig+0x2d4>)
 800285c:	fba2 2303 	umull	r2, r3, r2, r3
 8002860:	095b      	lsrs	r3, r3, #5
 8002862:	f003 0207 	and.w	r2, r3, #7
 8002866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4422      	add	r2, r4
 800286e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002870:	e106      	b.n	8002a80 <UART_SetConfig+0x4d8>
 8002872:	bf00      	nop
 8002874:	40011000 	.word	0x40011000
 8002878:	40011400 	.word	0x40011400
 800287c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002880:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002884:	2200      	movs	r2, #0
 8002886:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800288a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800288e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002892:	4642      	mov	r2, r8
 8002894:	464b      	mov	r3, r9
 8002896:	1891      	adds	r1, r2, r2
 8002898:	6239      	str	r1, [r7, #32]
 800289a:	415b      	adcs	r3, r3
 800289c:	627b      	str	r3, [r7, #36]	@ 0x24
 800289e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80028a2:	4641      	mov	r1, r8
 80028a4:	1854      	adds	r4, r2, r1
 80028a6:	4649      	mov	r1, r9
 80028a8:	eb43 0501 	adc.w	r5, r3, r1
 80028ac:	f04f 0200 	mov.w	r2, #0
 80028b0:	f04f 0300 	mov.w	r3, #0
 80028b4:	00eb      	lsls	r3, r5, #3
 80028b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028ba:	00e2      	lsls	r2, r4, #3
 80028bc:	4614      	mov	r4, r2
 80028be:	461d      	mov	r5, r3
 80028c0:	4643      	mov	r3, r8
 80028c2:	18e3      	adds	r3, r4, r3
 80028c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80028c8:	464b      	mov	r3, r9
 80028ca:	eb45 0303 	adc.w	r3, r5, r3
 80028ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80028d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80028de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80028e2:	f04f 0200 	mov.w	r2, #0
 80028e6:	f04f 0300 	mov.w	r3, #0
 80028ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80028ee:	4629      	mov	r1, r5
 80028f0:	008b      	lsls	r3, r1, #2
 80028f2:	4621      	mov	r1, r4
 80028f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028f8:	4621      	mov	r1, r4
 80028fa:	008a      	lsls	r2, r1, #2
 80028fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002900:	f7fd fc80 	bl	8000204 <__aeabi_uldivmod>
 8002904:	4602      	mov	r2, r0
 8002906:	460b      	mov	r3, r1
 8002908:	4b60      	ldr	r3, [pc, #384]	@ (8002a8c <UART_SetConfig+0x4e4>)
 800290a:	fba3 2302 	umull	r2, r3, r3, r2
 800290e:	095b      	lsrs	r3, r3, #5
 8002910:	011c      	lsls	r4, r3, #4
 8002912:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002916:	2200      	movs	r2, #0
 8002918:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800291c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002920:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002924:	4642      	mov	r2, r8
 8002926:	464b      	mov	r3, r9
 8002928:	1891      	adds	r1, r2, r2
 800292a:	61b9      	str	r1, [r7, #24]
 800292c:	415b      	adcs	r3, r3
 800292e:	61fb      	str	r3, [r7, #28]
 8002930:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002934:	4641      	mov	r1, r8
 8002936:	1851      	adds	r1, r2, r1
 8002938:	6139      	str	r1, [r7, #16]
 800293a:	4649      	mov	r1, r9
 800293c:	414b      	adcs	r3, r1
 800293e:	617b      	str	r3, [r7, #20]
 8002940:	f04f 0200 	mov.w	r2, #0
 8002944:	f04f 0300 	mov.w	r3, #0
 8002948:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800294c:	4659      	mov	r1, fp
 800294e:	00cb      	lsls	r3, r1, #3
 8002950:	4651      	mov	r1, sl
 8002952:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002956:	4651      	mov	r1, sl
 8002958:	00ca      	lsls	r2, r1, #3
 800295a:	4610      	mov	r0, r2
 800295c:	4619      	mov	r1, r3
 800295e:	4603      	mov	r3, r0
 8002960:	4642      	mov	r2, r8
 8002962:	189b      	adds	r3, r3, r2
 8002964:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002968:	464b      	mov	r3, r9
 800296a:	460a      	mov	r2, r1
 800296c:	eb42 0303 	adc.w	r3, r2, r3
 8002970:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800297e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002980:	f04f 0200 	mov.w	r2, #0
 8002984:	f04f 0300 	mov.w	r3, #0
 8002988:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800298c:	4649      	mov	r1, r9
 800298e:	008b      	lsls	r3, r1, #2
 8002990:	4641      	mov	r1, r8
 8002992:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002996:	4641      	mov	r1, r8
 8002998:	008a      	lsls	r2, r1, #2
 800299a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800299e:	f7fd fc31 	bl	8000204 <__aeabi_uldivmod>
 80029a2:	4602      	mov	r2, r0
 80029a4:	460b      	mov	r3, r1
 80029a6:	4611      	mov	r1, r2
 80029a8:	4b38      	ldr	r3, [pc, #224]	@ (8002a8c <UART_SetConfig+0x4e4>)
 80029aa:	fba3 2301 	umull	r2, r3, r3, r1
 80029ae:	095b      	lsrs	r3, r3, #5
 80029b0:	2264      	movs	r2, #100	@ 0x64
 80029b2:	fb02 f303 	mul.w	r3, r2, r3
 80029b6:	1acb      	subs	r3, r1, r3
 80029b8:	011b      	lsls	r3, r3, #4
 80029ba:	3332      	adds	r3, #50	@ 0x32
 80029bc:	4a33      	ldr	r2, [pc, #204]	@ (8002a8c <UART_SetConfig+0x4e4>)
 80029be:	fba2 2303 	umull	r2, r3, r2, r3
 80029c2:	095b      	lsrs	r3, r3, #5
 80029c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029c8:	441c      	add	r4, r3
 80029ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029ce:	2200      	movs	r2, #0
 80029d0:	673b      	str	r3, [r7, #112]	@ 0x70
 80029d2:	677a      	str	r2, [r7, #116]	@ 0x74
 80029d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80029d8:	4642      	mov	r2, r8
 80029da:	464b      	mov	r3, r9
 80029dc:	1891      	adds	r1, r2, r2
 80029de:	60b9      	str	r1, [r7, #8]
 80029e0:	415b      	adcs	r3, r3
 80029e2:	60fb      	str	r3, [r7, #12]
 80029e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029e8:	4641      	mov	r1, r8
 80029ea:	1851      	adds	r1, r2, r1
 80029ec:	6039      	str	r1, [r7, #0]
 80029ee:	4649      	mov	r1, r9
 80029f0:	414b      	adcs	r3, r1
 80029f2:	607b      	str	r3, [r7, #4]
 80029f4:	f04f 0200 	mov.w	r2, #0
 80029f8:	f04f 0300 	mov.w	r3, #0
 80029fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002a00:	4659      	mov	r1, fp
 8002a02:	00cb      	lsls	r3, r1, #3
 8002a04:	4651      	mov	r1, sl
 8002a06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a0a:	4651      	mov	r1, sl
 8002a0c:	00ca      	lsls	r2, r1, #3
 8002a0e:	4610      	mov	r0, r2
 8002a10:	4619      	mov	r1, r3
 8002a12:	4603      	mov	r3, r0
 8002a14:	4642      	mov	r2, r8
 8002a16:	189b      	adds	r3, r3, r2
 8002a18:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a1a:	464b      	mov	r3, r9
 8002a1c:	460a      	mov	r2, r1
 8002a1e:	eb42 0303 	adc.w	r3, r2, r3
 8002a22:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a2e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002a30:	f04f 0200 	mov.w	r2, #0
 8002a34:	f04f 0300 	mov.w	r3, #0
 8002a38:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002a3c:	4649      	mov	r1, r9
 8002a3e:	008b      	lsls	r3, r1, #2
 8002a40:	4641      	mov	r1, r8
 8002a42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a46:	4641      	mov	r1, r8
 8002a48:	008a      	lsls	r2, r1, #2
 8002a4a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002a4e:	f7fd fbd9 	bl	8000204 <__aeabi_uldivmod>
 8002a52:	4602      	mov	r2, r0
 8002a54:	460b      	mov	r3, r1
 8002a56:	4b0d      	ldr	r3, [pc, #52]	@ (8002a8c <UART_SetConfig+0x4e4>)
 8002a58:	fba3 1302 	umull	r1, r3, r3, r2
 8002a5c:	095b      	lsrs	r3, r3, #5
 8002a5e:	2164      	movs	r1, #100	@ 0x64
 8002a60:	fb01 f303 	mul.w	r3, r1, r3
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	011b      	lsls	r3, r3, #4
 8002a68:	3332      	adds	r3, #50	@ 0x32
 8002a6a:	4a08      	ldr	r2, [pc, #32]	@ (8002a8c <UART_SetConfig+0x4e4>)
 8002a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a70:	095b      	lsrs	r3, r3, #5
 8002a72:	f003 020f 	and.w	r2, r3, #15
 8002a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4422      	add	r2, r4
 8002a7e:	609a      	str	r2, [r3, #8]
}
 8002a80:	bf00      	nop
 8002a82:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002a86:	46bd      	mov	sp, r7
 8002a88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a8c:	51eb851f 	.word	0x51eb851f

08002a90 <memset>:
 8002a90:	4402      	add	r2, r0
 8002a92:	4603      	mov	r3, r0
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d100      	bne.n	8002a9a <memset+0xa>
 8002a98:	4770      	bx	lr
 8002a9a:	f803 1b01 	strb.w	r1, [r3], #1
 8002a9e:	e7f9      	b.n	8002a94 <memset+0x4>

08002aa0 <__libc_init_array>:
 8002aa0:	b570      	push	{r4, r5, r6, lr}
 8002aa2:	4d0d      	ldr	r5, [pc, #52]	@ (8002ad8 <__libc_init_array+0x38>)
 8002aa4:	4c0d      	ldr	r4, [pc, #52]	@ (8002adc <__libc_init_array+0x3c>)
 8002aa6:	1b64      	subs	r4, r4, r5
 8002aa8:	10a4      	asrs	r4, r4, #2
 8002aaa:	2600      	movs	r6, #0
 8002aac:	42a6      	cmp	r6, r4
 8002aae:	d109      	bne.n	8002ac4 <__libc_init_array+0x24>
 8002ab0:	4d0b      	ldr	r5, [pc, #44]	@ (8002ae0 <__libc_init_array+0x40>)
 8002ab2:	4c0c      	ldr	r4, [pc, #48]	@ (8002ae4 <__libc_init_array+0x44>)
 8002ab4:	f000 f818 	bl	8002ae8 <_init>
 8002ab8:	1b64      	subs	r4, r4, r5
 8002aba:	10a4      	asrs	r4, r4, #2
 8002abc:	2600      	movs	r6, #0
 8002abe:	42a6      	cmp	r6, r4
 8002ac0:	d105      	bne.n	8002ace <__libc_init_array+0x2e>
 8002ac2:	bd70      	pop	{r4, r5, r6, pc}
 8002ac4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ac8:	4798      	blx	r3
 8002aca:	3601      	adds	r6, #1
 8002acc:	e7ee      	b.n	8002aac <__libc_init_array+0xc>
 8002ace:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ad2:	4798      	blx	r3
 8002ad4:	3601      	adds	r6, #1
 8002ad6:	e7f2      	b.n	8002abe <__libc_init_array+0x1e>
 8002ad8:	08002b20 	.word	0x08002b20
 8002adc:	08002b20 	.word	0x08002b20
 8002ae0:	08002b20 	.word	0x08002b20
 8002ae4:	08002b24 	.word	0x08002b24

08002ae8 <_init>:
 8002ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aea:	bf00      	nop
 8002aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aee:	bc08      	pop	{r3}
 8002af0:	469e      	mov	lr, r3
 8002af2:	4770      	bx	lr

08002af4 <_fini>:
 8002af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002af6:	bf00      	nop
 8002af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002afa:	bc08      	pop	{r3}
 8002afc:	469e      	mov	lr, r3
 8002afe:	4770      	bx	lr
