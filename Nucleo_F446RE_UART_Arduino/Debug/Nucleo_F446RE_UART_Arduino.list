
Nucleo_F446RE_UART_Arduino.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005810  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080059e0  080059e0  000069e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005aa0  08005aa0  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  08005aa0  08005aa0  00006aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005aa8  08005aa8  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005aa8  08005aa8  00006aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005aac  08005aac  00006aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005ab0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ca8  20000060  08005b10  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d08  08005b10  00007d08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001833e  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003325  00000000  00000000  0001f3ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001430  00000000  00000000  000226f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fba  00000000  00000000  00023b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003507  00000000  00000000  00024ae2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016e84  00000000  00000000  00027fe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dae59  00000000  00000000  0003ee6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00119cc6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005848  00000000  00000000  00119d0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  0011f554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080059c8 	.word	0x080059c8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	080059c8 	.word	0x080059c8

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f000 fb5a 	bl	8000bbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f828 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 f8e8 	bl	80006e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000510:	f000 f8bc 	bl	800068c <MX_USART2_UART_Init>
  MX_UART4_Init();
 8000514:	f000 f890 	bl	8000638 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000518:	f002 fbbe 	bl	8002c98 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ArduinoRx */
  ArduinoRxHandle = osThreadNew(Task_ArduinoRx, NULL, &ArduinoRx_attributes);
 800051c:	4a09      	ldr	r2, [pc, #36]	@ (8000544 <main+0x44>)
 800051e:	2100      	movs	r1, #0
 8000520:	4809      	ldr	r0, [pc, #36]	@ (8000548 <main+0x48>)
 8000522:	f002 fc03 	bl	8002d2c <osThreadNew>
 8000526:	4603      	mov	r3, r0
 8000528:	4a08      	ldr	r2, [pc, #32]	@ (800054c <main+0x4c>)
 800052a:	6013      	str	r3, [r2, #0]

  /* creation of PCRx */
  PCRxHandle = osThreadNew(Task_PCRx, NULL, &PCRx_attributes);
 800052c:	4a08      	ldr	r2, [pc, #32]	@ (8000550 <main+0x50>)
 800052e:	2100      	movs	r1, #0
 8000530:	4808      	ldr	r0, [pc, #32]	@ (8000554 <main+0x54>)
 8000532:	f002 fbfb 	bl	8002d2c <osThreadNew>
 8000536:	4603      	mov	r3, r0
 8000538:	4a07      	ldr	r2, [pc, #28]	@ (8000558 <main+0x58>)
 800053a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800053c:	f002 fbd0 	bl	8002ce0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000540:	bf00      	nop
 8000542:	e7fd      	b.n	8000540 <main+0x40>
 8000544:	08005a40 	.word	0x08005a40
 8000548:	08000745 	.word	0x08000745
 800054c:	2000010c 	.word	0x2000010c
 8000550:	08005a64 	.word	0x08005a64
 8000554:	080007dd 	.word	0x080007dd
 8000558:	20000110 	.word	0x20000110

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b094      	sub	sp, #80	@ 0x50
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 031c 	add.w	r3, r7, #28
 8000566:	2234      	movs	r2, #52	@ 0x34
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f005 f944 	bl	80057f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	f107 0308 	add.w	r3, r7, #8
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000580:	2300      	movs	r3, #0
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	4b2a      	ldr	r3, [pc, #168]	@ (8000630 <SystemClock_Config+0xd4>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000588:	4a29      	ldr	r2, [pc, #164]	@ (8000630 <SystemClock_Config+0xd4>)
 800058a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800058e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000590:	4b27      	ldr	r3, [pc, #156]	@ (8000630 <SystemClock_Config+0xd4>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000594:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800059c:	2300      	movs	r3, #0
 800059e:	603b      	str	r3, [r7, #0]
 80005a0:	4b24      	ldr	r3, [pc, #144]	@ (8000634 <SystemClock_Config+0xd8>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005a8:	4a22      	ldr	r2, [pc, #136]	@ (8000634 <SystemClock_Config+0xd8>)
 80005aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005ae:	6013      	str	r3, [r2, #0]
 80005b0:	4b20      	ldr	r3, [pc, #128]	@ (8000634 <SystemClock_Config+0xd8>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005b8:	603b      	str	r3, [r7, #0]
 80005ba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005bc:	2302      	movs	r3, #2
 80005be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c0:	2301      	movs	r3, #1
 80005c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c4:	2310      	movs	r3, #16
 80005c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c8:	2302      	movs	r3, #2
 80005ca:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005cc:	2300      	movs	r3, #0
 80005ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005d0:	2310      	movs	r3, #16
 80005d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005d4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005d8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005da:	2304      	movs	r3, #4
 80005dc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005de:	2302      	movs	r3, #2
 80005e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005e2:	2302      	movs	r3, #2
 80005e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e6:	f107 031c 	add.w	r3, r7, #28
 80005ea:	4618      	mov	r0, r3
 80005ec:	f001 f934 	bl	8001858 <HAL_RCC_OscConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005f6:	f000 f95f 	bl	80008b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fa:	230f      	movs	r3, #15
 80005fc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fe:	2302      	movs	r3, #2
 8000600:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000602:	2300      	movs	r3, #0
 8000604:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000606:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800060a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000610:	f107 0308 	add.w	r3, r7, #8
 8000614:	2102      	movs	r1, #2
 8000616:	4618      	mov	r0, r3
 8000618:	f000 fda2 	bl	8001160 <HAL_RCC_ClockConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000622:	f000 f949 	bl	80008b8 <Error_Handler>
  }
}
 8000626:	bf00      	nop
 8000628:	3750      	adds	r7, #80	@ 0x50
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40023800 	.word	0x40023800
 8000634:	40007000 	.word	0x40007000

08000638 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800063c:	4b11      	ldr	r3, [pc, #68]	@ (8000684 <MX_UART4_Init+0x4c>)
 800063e:	4a12      	ldr	r2, [pc, #72]	@ (8000688 <MX_UART4_Init+0x50>)
 8000640:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000642:	4b10      	ldr	r3, [pc, #64]	@ (8000684 <MX_UART4_Init+0x4c>)
 8000644:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000648:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800064a:	4b0e      	ldr	r3, [pc, #56]	@ (8000684 <MX_UART4_Init+0x4c>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <MX_UART4_Init+0x4c>)
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000656:	4b0b      	ldr	r3, [pc, #44]	@ (8000684 <MX_UART4_Init+0x4c>)
 8000658:	2200      	movs	r2, #0
 800065a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800065c:	4b09      	ldr	r3, [pc, #36]	@ (8000684 <MX_UART4_Init+0x4c>)
 800065e:	220c      	movs	r2, #12
 8000660:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000662:	4b08      	ldr	r3, [pc, #32]	@ (8000684 <MX_UART4_Init+0x4c>)
 8000664:	2200      	movs	r2, #0
 8000666:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <MX_UART4_Init+0x4c>)
 800066a:	2200      	movs	r2, #0
 800066c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800066e:	4805      	ldr	r0, [pc, #20]	@ (8000684 <MX_UART4_Init+0x4c>)
 8000670:	f001 fe2c 	bl	80022cc <HAL_UART_Init>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800067a:	f000 f91d 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	2000007c 	.word	0x2000007c
 8000688:	40004c00 	.word	0x40004c00

0800068c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000690:	4b11      	ldr	r3, [pc, #68]	@ (80006d8 <MX_USART2_UART_Init+0x4c>)
 8000692:	4a12      	ldr	r2, [pc, #72]	@ (80006dc <MX_USART2_UART_Init+0x50>)
 8000694:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000696:	4b10      	ldr	r3, [pc, #64]	@ (80006d8 <MX_USART2_UART_Init+0x4c>)
 8000698:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800069c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800069e:	4b0e      	ldr	r3, [pc, #56]	@ (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006a4:	4b0c      	ldr	r3, [pc, #48]	@ (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006aa:	4b0b      	ldr	r3, [pc, #44]	@ (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006b0:	4b09      	ldr	r3, [pc, #36]	@ (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006b2:	220c      	movs	r2, #12
 80006b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b6:	4b08      	ldr	r3, [pc, #32]	@ (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 80006bc:	4b06      	ldr	r3, [pc, #24]	@ (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006be:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80006c2:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006c4:	4804      	ldr	r0, [pc, #16]	@ (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006c6:	f001 fe01 	bl	80022cc <HAL_UART_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 80006d0:	f000 f8f2 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	200000c4 	.word	0x200000c4
 80006dc:	40004400 	.word	0x40004400

080006e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f4:	2300      	movs	r3, #0
 80006f6:	603b      	str	r3, [r7, #0]
 80006f8:	4b10      	ldr	r3, [pc, #64]	@ (800073c <MX_GPIO_Init+0x5c>)
 80006fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fc:	4a0f      	ldr	r2, [pc, #60]	@ (800073c <MX_GPIO_Init+0x5c>)
 80006fe:	f043 0301 	orr.w	r3, r3, #1
 8000702:	6313      	str	r3, [r2, #48]	@ 0x30
 8000704:	4b0d      	ldr	r3, [pc, #52]	@ (800073c <MX_GPIO_Init+0x5c>)
 8000706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000708:	f003 0301 	and.w	r3, r3, #1
 800070c:	603b      	str	r3, [r7, #0]
 800070e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 8000710:	2200      	movs	r2, #0
 8000712:	2120      	movs	r1, #32
 8000714:	480a      	ldr	r0, [pc, #40]	@ (8000740 <MX_GPIO_Init+0x60>)
 8000716:	f000 fd09 	bl	800112c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 800071a:	2320      	movs	r3, #32
 800071c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071e:	2301      	movs	r3, #1
 8000720:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000726:	2300      	movs	r3, #0
 8000728:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	4619      	mov	r1, r3
 800072e:	4804      	ldr	r0, [pc, #16]	@ (8000740 <MX_GPIO_Init+0x60>)
 8000730:	f000 fb68 	bl	8000e04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000734:	bf00      	nop
 8000736:	3718      	adds	r7, #24
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40023800 	.word	0x40023800
 8000740:	40020000 	.word	0x40020000

08000744 <Task_ArduinoRx>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task_ArduinoRx */
void Task_ArduinoRx(void *argument)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	  uint8_t i;

	  for(;;)
	  {

		  memset(buffer_arduino, 0, sizeof(buffer_arduino));
 800074c:	2240      	movs	r2, #64	@ 0x40
 800074e:	2100      	movs	r1, #0
 8000750:	481d      	ldr	r0, [pc, #116]	@ (80007c8 <Task_ArduinoRx+0x84>)
 8000752:	f005 f851 	bl	80057f8 <memset>
		     i = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	73fb      	strb	r3, [r7, #15]

		     // Lê bytes continuamente até encontrar '\r'
		     while (i < sizeof(buffer_arduino) - 1)
 800075a:	e014      	b.n	8000786 <Task_ArduinoRx+0x42>
		     {
		       if (HAL_UART_Receive(&huart4, &byte, 1, portMAX_DELAY) == HAL_OK)
 800075c:	f107 010e 	add.w	r1, r7, #14
 8000760:	f04f 33ff 	mov.w	r3, #4294967295
 8000764:	2201      	movs	r2, #1
 8000766:	4819      	ldr	r0, [pc, #100]	@ (80007cc <Task_ArduinoRx+0x88>)
 8000768:	f001 fe8b 	bl	8002482 <HAL_UART_Receive>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d109      	bne.n	8000786 <Task_ArduinoRx+0x42>
		       {
		         if (byte == '\r') break;     // fim da mensagem
 8000772:	7bbb      	ldrb	r3, [r7, #14]
 8000774:	2b0d      	cmp	r3, #13
 8000776:	d00a      	beq.n	800078e <Task_ArduinoRx+0x4a>
		         buffer_arduino[i++] = byte;       // salva byte no buffer
 8000778:	7bfb      	ldrb	r3, [r7, #15]
 800077a:	1c5a      	adds	r2, r3, #1
 800077c:	73fa      	strb	r2, [r7, #15]
 800077e:	461a      	mov	r2, r3
 8000780:	7bb9      	ldrb	r1, [r7, #14]
 8000782:	4b11      	ldr	r3, [pc, #68]	@ (80007c8 <Task_ArduinoRx+0x84>)
 8000784:	5499      	strb	r1, [r3, r2]
		     while (i < sizeof(buffer_arduino) - 1)
 8000786:	7bfb      	ldrb	r3, [r7, #15]
 8000788:	2b3e      	cmp	r3, #62	@ 0x3e
 800078a:	d9e7      	bls.n	800075c <Task_ArduinoRx+0x18>
 800078c:	e000      	b.n	8000790 <Task_ArduinoRx+0x4c>
		         if (byte == '\r') break;     // fim da mensagem
 800078e:	bf00      	nop
		       }
		     }

		  // Transmite a mensagem recebida para a UART2
		  HAL_UART_Transmit(&huart2, (uint8_t *)"Recebido do Arduino: ", 22, HAL_MAX_DELAY);
 8000790:	f04f 33ff 	mov.w	r3, #4294967295
 8000794:	2216      	movs	r2, #22
 8000796:	490e      	ldr	r1, [pc, #56]	@ (80007d0 <Task_ArduinoRx+0x8c>)
 8000798:	480e      	ldr	r0, [pc, #56]	@ (80007d4 <Task_ArduinoRx+0x90>)
 800079a:	f001 fde7 	bl	800236c <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, buffer_arduino,i,HAL_MAX_DELAY);
 800079e:	7bfb      	ldrb	r3, [r7, #15]
 80007a0:	b29a      	uxth	r2, r3
 80007a2:	f04f 33ff 	mov.w	r3, #4294967295
 80007a6:	4908      	ldr	r1, [pc, #32]	@ (80007c8 <Task_ArduinoRx+0x84>)
 80007a8:	480a      	ldr	r0, [pc, #40]	@ (80007d4 <Task_ArduinoRx+0x90>)
 80007aa:	f001 fddf 	bl	800236c <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n",2, portMAX_DELAY);
 80007ae:	f04f 33ff 	mov.w	r3, #4294967295
 80007b2:	2202      	movs	r2, #2
 80007b4:	4908      	ldr	r1, [pc, #32]	@ (80007d8 <Task_ArduinoRx+0x94>)
 80007b6:	4807      	ldr	r0, [pc, #28]	@ (80007d4 <Task_ArduinoRx+0x90>)
 80007b8:	f001 fdd8 	bl	800236c <HAL_UART_Transmit>
		  osDelay(1000);
 80007bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007c0:	f002 fb46 	bl	8002e50 <osDelay>
		  memset(buffer_arduino, 0, sizeof(buffer_arduino));
 80007c4:	e7c2      	b.n	800074c <Task_ArduinoRx+0x8>
 80007c6:	bf00      	nop
 80007c8:	20000154 	.word	0x20000154
 80007cc:	2000007c 	.word	0x2000007c
 80007d0:	080059f4 	.word	0x080059f4
 80007d4:	200000c4 	.word	0x200000c4
 80007d8:	08005a0c 	.word	0x08005a0c

080007dc <Task_PCRx>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_PCRx */
void Task_PCRx(void *argument)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_PCRx */
  /* Infinite loop */

	 // uint8_t buffer_pc[64];       // buffer para armazenar a mensagem recebida
	  uint8_t byte;                 // byte temporário para recepção
	  uint8_t i = 0;                // índice de posição no buffer
 80007e4:	2300      	movs	r3, #0
 80007e6:	73fb      	strb	r3, [r7, #15]

	  for(;;)
	  {
		  memset(buffer_pc, 0, sizeof(buffer_pc));
 80007e8:	2240      	movs	r2, #64	@ 0x40
 80007ea:	2100      	movs	r1, #0
 80007ec:	4824      	ldr	r0, [pc, #144]	@ (8000880 <Task_PCRx+0xa4>)
 80007ee:	f005 f803 	bl	80057f8 <memset>
		     i = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	73fb      	strb	r3, [r7, #15]

		     // Lê bytes continuamente até encontrar '\r'
		     while (i < sizeof(buffer_pc) - 1)
 80007f6:	e014      	b.n	8000822 <Task_PCRx+0x46>
		     {
		       if (HAL_UART_Receive(&huart2, &byte, 1, portMAX_DELAY) == HAL_OK)
 80007f8:	f107 010e 	add.w	r1, r7, #14
 80007fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000800:	2201      	movs	r2, #1
 8000802:	4820      	ldr	r0, [pc, #128]	@ (8000884 <Task_PCRx+0xa8>)
 8000804:	f001 fe3d 	bl	8002482 <HAL_UART_Receive>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d109      	bne.n	8000822 <Task_PCRx+0x46>
		       {
		         if (byte == '\r') break;     // fim da mensagem
 800080e:	7bbb      	ldrb	r3, [r7, #14]
 8000810:	2b0d      	cmp	r3, #13
 8000812:	d00a      	beq.n	800082a <Task_PCRx+0x4e>
		         buffer_pc[i++] = byte;       // salva byte no buffer
 8000814:	7bfb      	ldrb	r3, [r7, #15]
 8000816:	1c5a      	adds	r2, r3, #1
 8000818:	73fa      	strb	r2, [r7, #15]
 800081a:	461a      	mov	r2, r3
 800081c:	7bb9      	ldrb	r1, [r7, #14]
 800081e:	4b18      	ldr	r3, [pc, #96]	@ (8000880 <Task_PCRx+0xa4>)
 8000820:	5499      	strb	r1, [r3, r2]
		     while (i < sizeof(buffer_pc) - 1)
 8000822:	7bfb      	ldrb	r3, [r7, #15]
 8000824:	2b3e      	cmp	r3, #62	@ 0x3e
 8000826:	d9e7      	bls.n	80007f8 <Task_PCRx+0x1c>
 8000828:	e000      	b.n	800082c <Task_PCRx+0x50>
		         if (byte == '\r') break;     // fim da mensagem
 800082a:	bf00      	nop
		       }
		     }

			  HAL_UART_Transmit(&huart2, (uint8_t *)"Enviado para Arduino: ", 22, HAL_MAX_DELAY);
 800082c:	f04f 33ff 	mov.w	r3, #4294967295
 8000830:	2216      	movs	r2, #22
 8000832:	4915      	ldr	r1, [pc, #84]	@ (8000888 <Task_PCRx+0xac>)
 8000834:	4813      	ldr	r0, [pc, #76]	@ (8000884 <Task_PCRx+0xa8>)
 8000836:	f001 fd99 	bl	800236c <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, buffer_pc,i,HAL_MAX_DELAY);
 800083a:	7bfb      	ldrb	r3, [r7, #15]
 800083c:	b29a      	uxth	r2, r3
 800083e:	f04f 33ff 	mov.w	r3, #4294967295
 8000842:	490f      	ldr	r1, [pc, #60]	@ (8000880 <Task_PCRx+0xa4>)
 8000844:	480f      	ldr	r0, [pc, #60]	@ (8000884 <Task_PCRx+0xa8>)
 8000846:	f001 fd91 	bl	800236c <HAL_UART_Transmit>

		     // Envia mensagem de confirmação pela UART4
		     HAL_UART_Transmit(&huart4, buffer_pc, i, portMAX_DELAY);
 800084a:	7bfb      	ldrb	r3, [r7, #15]
 800084c:	b29a      	uxth	r2, r3
 800084e:	f04f 33ff 	mov.w	r3, #4294967295
 8000852:	490b      	ldr	r1, [pc, #44]	@ (8000880 <Task_PCRx+0xa4>)
 8000854:	480d      	ldr	r0, [pc, #52]	@ (800088c <Task_PCRx+0xb0>)
 8000856:	f001 fd89 	bl	800236c <HAL_UART_Transmit>
		     HAL_UART_Transmit(&huart4, (uint8_t *)"\r\n", 2, portMAX_DELAY);
 800085a:	f04f 33ff 	mov.w	r3, #4294967295
 800085e:	2202      	movs	r2, #2
 8000860:	490b      	ldr	r1, [pc, #44]	@ (8000890 <Task_PCRx+0xb4>)
 8000862:	480a      	ldr	r0, [pc, #40]	@ (800088c <Task_PCRx+0xb0>)
 8000864:	f001 fd82 	bl	800236c <HAL_UART_Transmit>

		     // Opcional: resposta pela própria UART2
			  // Transmite a mensagem recebida para a UART2

			  HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n",2, portMAX_DELAY);
 8000868:	f04f 33ff 	mov.w	r3, #4294967295
 800086c:	2202      	movs	r2, #2
 800086e:	4908      	ldr	r1, [pc, #32]	@ (8000890 <Task_PCRx+0xb4>)
 8000870:	4804      	ldr	r0, [pc, #16]	@ (8000884 <Task_PCRx+0xa8>)
 8000872:	f001 fd7b 	bl	800236c <HAL_UART_Transmit>

		     osDelay(1000);
 8000876:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800087a:	f002 fae9 	bl	8002e50 <osDelay>
		  memset(buffer_pc, 0, sizeof(buffer_pc));
 800087e:	e7b3      	b.n	80007e8 <Task_PCRx+0xc>
 8000880:	20000114 	.word	0x20000114
 8000884:	200000c4 	.word	0x200000c4
 8000888:	08005a10 	.word	0x08005a10
 800088c:	2000007c 	.word	0x2000007c
 8000890:	08005a0c 	.word	0x08005a0c

08000894 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a04      	ldr	r2, [pc, #16]	@ (80008b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d101      	bne.n	80008aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008a6:	f000 f9ab 	bl	8000c00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40010000 	.word	0x40010000

080008b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008bc:	b672      	cpsid	i
}
 80008be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <Error_Handler+0x8>

080008c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	4b12      	ldr	r3, [pc, #72]	@ (8000918 <HAL_MspInit+0x54>)
 80008d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008d2:	4a11      	ldr	r2, [pc, #68]	@ (8000918 <HAL_MspInit+0x54>)
 80008d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80008da:	4b0f      	ldr	r3, [pc, #60]	@ (8000918 <HAL_MspInit+0x54>)
 80008dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	603b      	str	r3, [r7, #0]
 80008ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000918 <HAL_MspInit+0x54>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000918 <HAL_MspInit+0x54>)
 80008f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80008f6:	4b08      	ldr	r3, [pc, #32]	@ (8000918 <HAL_MspInit+0x54>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008fe:	603b      	str	r3, [r7, #0]
 8000900:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000902:	2200      	movs	r2, #0
 8000904:	210f      	movs	r1, #15
 8000906:	f06f 0001 	mvn.w	r0, #1
 800090a:	f000 fa51 	bl	8000db0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40023800 	.word	0x40023800

0800091c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08c      	sub	sp, #48	@ 0x30
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a32      	ldr	r2, [pc, #200]	@ (8000a04 <HAL_UART_MspInit+0xe8>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d12c      	bne.n	8000998 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	61bb      	str	r3, [r7, #24]
 8000942:	4b31      	ldr	r3, [pc, #196]	@ (8000a08 <HAL_UART_MspInit+0xec>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000946:	4a30      	ldr	r2, [pc, #192]	@ (8000a08 <HAL_UART_MspInit+0xec>)
 8000948:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800094c:	6413      	str	r3, [r2, #64]	@ 0x40
 800094e:	4b2e      	ldr	r3, [pc, #184]	@ (8000a08 <HAL_UART_MspInit+0xec>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000952:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000956:	61bb      	str	r3, [r7, #24]
 8000958:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	617b      	str	r3, [r7, #20]
 800095e:	4b2a      	ldr	r3, [pc, #168]	@ (8000a08 <HAL_UART_MspInit+0xec>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	4a29      	ldr	r2, [pc, #164]	@ (8000a08 <HAL_UART_MspInit+0xec>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6313      	str	r3, [r2, #48]	@ 0x30
 800096a:	4b27      	ldr	r3, [pc, #156]	@ (8000a08 <HAL_UART_MspInit+0xec>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	617b      	str	r3, [r7, #20]
 8000974:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000976:	2303      	movs	r3, #3
 8000978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	2302      	movs	r3, #2
 800097c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000982:	2303      	movs	r3, #3
 8000984:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000986:	2308      	movs	r3, #8
 8000988:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	481e      	ldr	r0, [pc, #120]	@ (8000a0c <HAL_UART_MspInit+0xf0>)
 8000992:	f000 fa37 	bl	8000e04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000996:	e030      	b.n	80009fa <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART2)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a1c      	ldr	r2, [pc, #112]	@ (8000a10 <HAL_UART_MspInit+0xf4>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d12b      	bne.n	80009fa <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART2_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	613b      	str	r3, [r7, #16]
 80009a6:	4b18      	ldr	r3, [pc, #96]	@ (8000a08 <HAL_UART_MspInit+0xec>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009aa:	4a17      	ldr	r2, [pc, #92]	@ (8000a08 <HAL_UART_MspInit+0xec>)
 80009ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009b2:	4b15      	ldr	r3, [pc, #84]	@ (8000a08 <HAL_UART_MspInit+0xec>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	4b11      	ldr	r3, [pc, #68]	@ (8000a08 <HAL_UART_MspInit+0xec>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	4a10      	ldr	r2, [pc, #64]	@ (8000a08 <HAL_UART_MspInit+0xec>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000a08 <HAL_UART_MspInit+0xec>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009da:	230c      	movs	r3, #12
 80009dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e6:	2303      	movs	r3, #3
 80009e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009ea:	2307      	movs	r3, #7
 80009ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	4619      	mov	r1, r3
 80009f4:	4805      	ldr	r0, [pc, #20]	@ (8000a0c <HAL_UART_MspInit+0xf0>)
 80009f6:	f000 fa05 	bl	8000e04 <HAL_GPIO_Init>
}
 80009fa:	bf00      	nop
 80009fc:	3730      	adds	r7, #48	@ 0x30
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40004c00 	.word	0x40004c00
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40020000 	.word	0x40020000
 8000a10:	40004400 	.word	0x40004400

08000a14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08c      	sub	sp, #48	@ 0x30
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a20:	2300      	movs	r3, #0
 8000a22:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a24:	2300      	movs	r3, #0
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	4b2e      	ldr	r3, [pc, #184]	@ (8000ae4 <HAL_InitTick+0xd0>)
 8000a2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a2c:	4a2d      	ldr	r2, [pc, #180]	@ (8000ae4 <HAL_InitTick+0xd0>)
 8000a2e:	f043 0301 	orr.w	r3, r3, #1
 8000a32:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a34:	4b2b      	ldr	r3, [pc, #172]	@ (8000ae4 <HAL_InitTick+0xd0>)
 8000a36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a38:	f003 0301 	and.w	r3, r3, #1
 8000a3c:	60bb      	str	r3, [r7, #8]
 8000a3e:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a40:	f107 020c 	add.w	r2, r7, #12
 8000a44:	f107 0310 	add.w	r3, r7, #16
 8000a48:	4611      	mov	r1, r2
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f000 fca2 	bl	8001394 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a50:	f000 fc8c 	bl	800136c <HAL_RCC_GetPCLK2Freq>
 8000a54:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a58:	4a23      	ldr	r2, [pc, #140]	@ (8000ae8 <HAL_InitTick+0xd4>)
 8000a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a5e:	0c9b      	lsrs	r3, r3, #18
 8000a60:	3b01      	subs	r3, #1
 8000a62:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a64:	4b21      	ldr	r3, [pc, #132]	@ (8000aec <HAL_InitTick+0xd8>)
 8000a66:	4a22      	ldr	r2, [pc, #136]	@ (8000af0 <HAL_InitTick+0xdc>)
 8000a68:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a6a:	4b20      	ldr	r3, [pc, #128]	@ (8000aec <HAL_InitTick+0xd8>)
 8000a6c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a70:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a72:	4a1e      	ldr	r2, [pc, #120]	@ (8000aec <HAL_InitTick+0xd8>)
 8000a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a76:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a78:	4b1c      	ldr	r3, [pc, #112]	@ (8000aec <HAL_InitTick+0xd8>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a7e:	4b1b      	ldr	r3, [pc, #108]	@ (8000aec <HAL_InitTick+0xd8>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a84:	4b19      	ldr	r3, [pc, #100]	@ (8000aec <HAL_InitTick+0xd8>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a8a:	4818      	ldr	r0, [pc, #96]	@ (8000aec <HAL_InitTick+0xd8>)
 8000a8c:	f001 f982 	bl	8001d94 <HAL_TIM_Base_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000a96:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d11b      	bne.n	8000ad6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a9e:	4813      	ldr	r0, [pc, #76]	@ (8000aec <HAL_InitTick+0xd8>)
 8000aa0:	f001 f9d2 	bl	8001e48 <HAL_TIM_Base_Start_IT>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000aaa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d111      	bne.n	8000ad6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000ab2:	2019      	movs	r0, #25
 8000ab4:	f000 f998 	bl	8000de8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2b0f      	cmp	r3, #15
 8000abc:	d808      	bhi.n	8000ad0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	6879      	ldr	r1, [r7, #4]
 8000ac2:	2019      	movs	r0, #25
 8000ac4:	f000 f974 	bl	8000db0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ac8:	4a0a      	ldr	r2, [pc, #40]	@ (8000af4 <HAL_InitTick+0xe0>)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6013      	str	r3, [r2, #0]
 8000ace:	e002      	b.n	8000ad6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ad6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3730      	adds	r7, #48	@ 0x30
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	431bde83 	.word	0x431bde83
 8000aec:	20000194 	.word	0x20000194
 8000af0:	40010000 	.word	0x40010000
 8000af4:	20000004 	.word	0x20000004

08000af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <NMI_Handler+0x4>

08000b00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <HardFault_Handler+0x4>

08000b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <MemManage_Handler+0x4>

08000b10 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <BusFault_Handler+0x4>

08000b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b1c:	bf00      	nop
 8000b1e:	e7fd      	b.n	8000b1c <UsageFault_Handler+0x4>

08000b20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
	...

08000b30 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b34:	4802      	ldr	r0, [pc, #8]	@ (8000b40 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b36:	f001 f9f7 	bl	8001f28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000194 	.word	0x20000194

08000b44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b48:	4b06      	ldr	r3, [pc, #24]	@ (8000b64 <SystemInit+0x20>)
 8000b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b4e:	4a05      	ldr	r2, [pc, #20]	@ (8000b64 <SystemInit+0x20>)
 8000b50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8000b68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ba0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b6c:	f7ff ffea 	bl	8000b44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b70:	480c      	ldr	r0, [pc, #48]	@ (8000ba4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b72:	490d      	ldr	r1, [pc, #52]	@ (8000ba8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b74:	4a0d      	ldr	r2, [pc, #52]	@ (8000bac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b78:	e002      	b.n	8000b80 <LoopCopyDataInit>

08000b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b7e:	3304      	adds	r3, #4

08000b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b84:	d3f9      	bcc.n	8000b7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b86:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b88:	4c0a      	ldr	r4, [pc, #40]	@ (8000bb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b8c:	e001      	b.n	8000b92 <LoopFillZerobss>

08000b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b90:	3204      	adds	r2, #4

08000b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b94:	d3fb      	bcc.n	8000b8e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b96:	f004 fe8d 	bl	80058b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b9a:	f7ff fcb1 	bl	8000500 <main>
  bx  lr    
 8000b9e:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8000ba0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ba4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000bac:	08005ab0 	.word	0x08005ab0
  ldr r2, =_sbss
 8000bb0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000bb4:	20004d08 	.word	0x20004d08

08000bb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bb8:	e7fe      	b.n	8000bb8 <ADC_IRQHandler>
	...

08000bbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000bfc <HAL_Init+0x40>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a0d      	ldr	r2, [pc, #52]	@ (8000bfc <HAL_Init+0x40>)
 8000bc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8000bfc <HAL_Init+0x40>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a0a      	ldr	r2, [pc, #40]	@ (8000bfc <HAL_Init+0x40>)
 8000bd2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd8:	4b08      	ldr	r3, [pc, #32]	@ (8000bfc <HAL_Init+0x40>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a07      	ldr	r2, [pc, #28]	@ (8000bfc <HAL_Init+0x40>)
 8000bde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000be2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be4:	2003      	movs	r0, #3
 8000be6:	f000 f8d8 	bl	8000d9a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bea:	200f      	movs	r0, #15
 8000bec:	f7ff ff12 	bl	8000a14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf0:	f7ff fe68 	bl	80008c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40023c00 	.word	0x40023c00

08000c00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c04:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <HAL_IncTick+0x20>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	461a      	mov	r2, r3
 8000c0a:	4b06      	ldr	r3, [pc, #24]	@ (8000c24 <HAL_IncTick+0x24>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4413      	add	r3, r2
 8000c10:	4a04      	ldr	r2, [pc, #16]	@ (8000c24 <HAL_IncTick+0x24>)
 8000c12:	6013      	str	r3, [r2, #0]
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	20000008 	.word	0x20000008
 8000c24:	200001dc 	.word	0x200001dc

08000c28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c2c:	4b03      	ldr	r3, [pc, #12]	@ (8000c3c <HAL_GetTick+0x14>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	200001dc 	.word	0x200001dc

08000c40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f003 0307 	and.w	r3, r3, #7
 8000c4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c50:	4b0c      	ldr	r3, [pc, #48]	@ (8000c84 <__NVIC_SetPriorityGrouping+0x44>)
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c56:	68ba      	ldr	r2, [r7, #8]
 8000c58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c72:	4a04      	ldr	r2, [pc, #16]	@ (8000c84 <__NVIC_SetPriorityGrouping+0x44>)
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	60d3      	str	r3, [r2, #12]
}
 8000c78:	bf00      	nop
 8000c7a:	3714      	adds	r7, #20
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c8c:	4b04      	ldr	r3, [pc, #16]	@ (8000ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	0a1b      	lsrs	r3, r3, #8
 8000c92:	f003 0307 	and.w	r3, r3, #7
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	db0b      	blt.n	8000cce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	f003 021f 	and.w	r2, r3, #31
 8000cbc:	4907      	ldr	r1, [pc, #28]	@ (8000cdc <__NVIC_EnableIRQ+0x38>)
 8000cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc2:	095b      	lsrs	r3, r3, #5
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	e000e100 	.word	0xe000e100

08000ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	6039      	str	r1, [r7, #0]
 8000cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db0a      	blt.n	8000d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	490c      	ldr	r1, [pc, #48]	@ (8000d2c <__NVIC_SetPriority+0x4c>)
 8000cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfe:	0112      	lsls	r2, r2, #4
 8000d00:	b2d2      	uxtb	r2, r2
 8000d02:	440b      	add	r3, r1
 8000d04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d08:	e00a      	b.n	8000d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	4908      	ldr	r1, [pc, #32]	@ (8000d30 <__NVIC_SetPriority+0x50>)
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	f003 030f 	and.w	r3, r3, #15
 8000d16:	3b04      	subs	r3, #4
 8000d18:	0112      	lsls	r2, r2, #4
 8000d1a:	b2d2      	uxtb	r2, r2
 8000d1c:	440b      	add	r3, r1
 8000d1e:	761a      	strb	r2, [r3, #24]
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000e100 	.word	0xe000e100
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b089      	sub	sp, #36	@ 0x24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	f1c3 0307 	rsb	r3, r3, #7
 8000d4e:	2b04      	cmp	r3, #4
 8000d50:	bf28      	it	cs
 8000d52:	2304      	movcs	r3, #4
 8000d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	3304      	adds	r3, #4
 8000d5a:	2b06      	cmp	r3, #6
 8000d5c:	d902      	bls.n	8000d64 <NVIC_EncodePriority+0x30>
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	3b03      	subs	r3, #3
 8000d62:	e000      	b.n	8000d66 <NVIC_EncodePriority+0x32>
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d68:	f04f 32ff 	mov.w	r2, #4294967295
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	43da      	mvns	r2, r3
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	401a      	ands	r2, r3
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	fa01 f303 	lsl.w	r3, r1, r3
 8000d86:	43d9      	mvns	r1, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d8c:	4313      	orrs	r3, r2
         );
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3724      	adds	r7, #36	@ 0x24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b082      	sub	sp, #8
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f7ff ff4c 	bl	8000c40 <__NVIC_SetPriorityGrouping>
}
 8000da8:	bf00      	nop
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
 8000dbc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dc2:	f7ff ff61 	bl	8000c88 <__NVIC_GetPriorityGrouping>
 8000dc6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dc8:	687a      	ldr	r2, [r7, #4]
 8000dca:	68b9      	ldr	r1, [r7, #8]
 8000dcc:	6978      	ldr	r0, [r7, #20]
 8000dce:	f7ff ffb1 	bl	8000d34 <NVIC_EncodePriority>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dd8:	4611      	mov	r1, r2
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff ff80 	bl	8000ce0 <__NVIC_SetPriority>
}
 8000de0:	bf00      	nop
 8000de2:	3718      	adds	r7, #24
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ff54 	bl	8000ca4 <__NVIC_EnableIRQ>
}
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b089      	sub	sp, #36	@ 0x24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e12:	2300      	movs	r3, #0
 8000e14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61fb      	str	r3, [r7, #28]
 8000e1e:	e165      	b.n	80010ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e20:	2201      	movs	r2, #1
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	697a      	ldr	r2, [r7, #20]
 8000e30:	4013      	ands	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	f040 8154 	bne.w	80010e6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f003 0303 	and.w	r3, r3, #3
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d005      	beq.n	8000e56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d130      	bne.n	8000eb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	2203      	movs	r2, #3
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43db      	mvns	r3, r3
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	68da      	ldr	r2, [r3, #12]
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	43db      	mvns	r3, r3
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	091b      	lsrs	r3, r3, #4
 8000ea2:	f003 0201 	and.w	r2, r3, #1
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f003 0303 	and.w	r3, r3, #3
 8000ec0:	2b03      	cmp	r3, #3
 8000ec2:	d017      	beq.n	8000ef4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	2203      	movs	r2, #3
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	689a      	ldr	r2, [r3, #8]
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f003 0303 	and.w	r3, r3, #3
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d123      	bne.n	8000f48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	08da      	lsrs	r2, r3, #3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	3208      	adds	r2, #8
 8000f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	f003 0307 	and.w	r3, r3, #7
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	220f      	movs	r2, #15
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	4013      	ands	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	691a      	ldr	r2, [r3, #16]
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	08da      	lsrs	r2, r3, #3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	3208      	adds	r2, #8
 8000f42:	69b9      	ldr	r1, [r7, #24]
 8000f44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	2203      	movs	r2, #3
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f003 0203 	and.w	r2, r3, #3
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	f000 80ae 	beq.w	80010e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	4b5d      	ldr	r3, [pc, #372]	@ (8001104 <HAL_GPIO_Init+0x300>)
 8000f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f92:	4a5c      	ldr	r2, [pc, #368]	@ (8001104 <HAL_GPIO_Init+0x300>)
 8000f94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f98:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f9a:	4b5a      	ldr	r3, [pc, #360]	@ (8001104 <HAL_GPIO_Init+0x300>)
 8000f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fa6:	4a58      	ldr	r2, [pc, #352]	@ (8001108 <HAL_GPIO_Init+0x304>)
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	089b      	lsrs	r3, r3, #2
 8000fac:	3302      	adds	r3, #2
 8000fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	f003 0303 	and.w	r3, r3, #3
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	220f      	movs	r2, #15
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a4f      	ldr	r2, [pc, #316]	@ (800110c <HAL_GPIO_Init+0x308>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d025      	beq.n	800101e <HAL_GPIO_Init+0x21a>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a4e      	ldr	r2, [pc, #312]	@ (8001110 <HAL_GPIO_Init+0x30c>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d01f      	beq.n	800101a <HAL_GPIO_Init+0x216>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a4d      	ldr	r2, [pc, #308]	@ (8001114 <HAL_GPIO_Init+0x310>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d019      	beq.n	8001016 <HAL_GPIO_Init+0x212>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a4c      	ldr	r2, [pc, #304]	@ (8001118 <HAL_GPIO_Init+0x314>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d013      	beq.n	8001012 <HAL_GPIO_Init+0x20e>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a4b      	ldr	r2, [pc, #300]	@ (800111c <HAL_GPIO_Init+0x318>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d00d      	beq.n	800100e <HAL_GPIO_Init+0x20a>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a4a      	ldr	r2, [pc, #296]	@ (8001120 <HAL_GPIO_Init+0x31c>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d007      	beq.n	800100a <HAL_GPIO_Init+0x206>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a49      	ldr	r2, [pc, #292]	@ (8001124 <HAL_GPIO_Init+0x320>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d101      	bne.n	8001006 <HAL_GPIO_Init+0x202>
 8001002:	2306      	movs	r3, #6
 8001004:	e00c      	b.n	8001020 <HAL_GPIO_Init+0x21c>
 8001006:	2307      	movs	r3, #7
 8001008:	e00a      	b.n	8001020 <HAL_GPIO_Init+0x21c>
 800100a:	2305      	movs	r3, #5
 800100c:	e008      	b.n	8001020 <HAL_GPIO_Init+0x21c>
 800100e:	2304      	movs	r3, #4
 8001010:	e006      	b.n	8001020 <HAL_GPIO_Init+0x21c>
 8001012:	2303      	movs	r3, #3
 8001014:	e004      	b.n	8001020 <HAL_GPIO_Init+0x21c>
 8001016:	2302      	movs	r3, #2
 8001018:	e002      	b.n	8001020 <HAL_GPIO_Init+0x21c>
 800101a:	2301      	movs	r3, #1
 800101c:	e000      	b.n	8001020 <HAL_GPIO_Init+0x21c>
 800101e:	2300      	movs	r3, #0
 8001020:	69fa      	ldr	r2, [r7, #28]
 8001022:	f002 0203 	and.w	r2, r2, #3
 8001026:	0092      	lsls	r2, r2, #2
 8001028:	4093      	lsls	r3, r2
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4313      	orrs	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001030:	4935      	ldr	r1, [pc, #212]	@ (8001108 <HAL_GPIO_Init+0x304>)
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	089b      	lsrs	r3, r3, #2
 8001036:	3302      	adds	r3, #2
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800103e:	4b3a      	ldr	r3, [pc, #232]	@ (8001128 <HAL_GPIO_Init+0x324>)
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	43db      	mvns	r3, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4013      	ands	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d003      	beq.n	8001062 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	4313      	orrs	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001062:	4a31      	ldr	r2, [pc, #196]	@ (8001128 <HAL_GPIO_Init+0x324>)
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001068:	4b2f      	ldr	r3, [pc, #188]	@ (8001128 <HAL_GPIO_Init+0x324>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	43db      	mvns	r3, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4013      	ands	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d003      	beq.n	800108c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	4313      	orrs	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800108c:	4a26      	ldr	r2, [pc, #152]	@ (8001128 <HAL_GPIO_Init+0x324>)
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001092:	4b25      	ldr	r3, [pc, #148]	@ (8001128 <HAL_GPIO_Init+0x324>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	43db      	mvns	r3, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4013      	ands	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001128 <HAL_GPIO_Init+0x324>)
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001128 <HAL_GPIO_Init+0x324>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	43db      	mvns	r3, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4013      	ands	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d003      	beq.n	80010e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	4313      	orrs	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010e0:	4a11      	ldr	r2, [pc, #68]	@ (8001128 <HAL_GPIO_Init+0x324>)
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	3301      	adds	r3, #1
 80010ea:	61fb      	str	r3, [r7, #28]
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	2b0f      	cmp	r3, #15
 80010f0:	f67f ae96 	bls.w	8000e20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010f4:	bf00      	nop
 80010f6:	bf00      	nop
 80010f8:	3724      	adds	r7, #36	@ 0x24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	40023800 	.word	0x40023800
 8001108:	40013800 	.word	0x40013800
 800110c:	40020000 	.word	0x40020000
 8001110:	40020400 	.word	0x40020400
 8001114:	40020800 	.word	0x40020800
 8001118:	40020c00 	.word	0x40020c00
 800111c:	40021000 	.word	0x40021000
 8001120:	40021400 	.word	0x40021400
 8001124:	40021800 	.word	0x40021800
 8001128:	40013c00 	.word	0x40013c00

0800112c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	460b      	mov	r3, r1
 8001136:	807b      	strh	r3, [r7, #2]
 8001138:	4613      	mov	r3, r2
 800113a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800113c:	787b      	ldrb	r3, [r7, #1]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001142:	887a      	ldrh	r2, [r7, #2]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001148:	e003      	b.n	8001152 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800114a:	887b      	ldrh	r3, [r7, #2]
 800114c:	041a      	lsls	r2, r3, #16
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	619a      	str	r2, [r3, #24]
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
	...

08001160 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d101      	bne.n	8001174 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e0cc      	b.n	800130e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001174:	4b68      	ldr	r3, [pc, #416]	@ (8001318 <HAL_RCC_ClockConfig+0x1b8>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 030f 	and.w	r3, r3, #15
 800117c:	683a      	ldr	r2, [r7, #0]
 800117e:	429a      	cmp	r2, r3
 8001180:	d90c      	bls.n	800119c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001182:	4b65      	ldr	r3, [pc, #404]	@ (8001318 <HAL_RCC_ClockConfig+0x1b8>)
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	b2d2      	uxtb	r2, r2
 8001188:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800118a:	4b63      	ldr	r3, [pc, #396]	@ (8001318 <HAL_RCC_ClockConfig+0x1b8>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 030f 	and.w	r3, r3, #15
 8001192:	683a      	ldr	r2, [r7, #0]
 8001194:	429a      	cmp	r2, r3
 8001196:	d001      	beq.n	800119c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e0b8      	b.n	800130e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 0302 	and.w	r3, r3, #2
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d020      	beq.n	80011ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0304 	and.w	r3, r3, #4
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d005      	beq.n	80011c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011b4:	4b59      	ldr	r3, [pc, #356]	@ (800131c <HAL_RCC_ClockConfig+0x1bc>)
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	4a58      	ldr	r2, [pc, #352]	@ (800131c <HAL_RCC_ClockConfig+0x1bc>)
 80011ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80011be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0308 	and.w	r3, r3, #8
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d005      	beq.n	80011d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011cc:	4b53      	ldr	r3, [pc, #332]	@ (800131c <HAL_RCC_ClockConfig+0x1bc>)
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	4a52      	ldr	r2, [pc, #328]	@ (800131c <HAL_RCC_ClockConfig+0x1bc>)
 80011d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80011d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011d8:	4b50      	ldr	r3, [pc, #320]	@ (800131c <HAL_RCC_ClockConfig+0x1bc>)
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	494d      	ldr	r1, [pc, #308]	@ (800131c <HAL_RCC_ClockConfig+0x1bc>)
 80011e6:	4313      	orrs	r3, r2
 80011e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d044      	beq.n	8001280 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d107      	bne.n	800120e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011fe:	4b47      	ldr	r3, [pc, #284]	@ (800131c <HAL_RCC_ClockConfig+0x1bc>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d119      	bne.n	800123e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e07f      	b.n	800130e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	2b02      	cmp	r3, #2
 8001214:	d003      	beq.n	800121e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800121a:	2b03      	cmp	r3, #3
 800121c:	d107      	bne.n	800122e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800121e:	4b3f      	ldr	r3, [pc, #252]	@ (800131c <HAL_RCC_ClockConfig+0x1bc>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d109      	bne.n	800123e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e06f      	b.n	800130e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800122e:	4b3b      	ldr	r3, [pc, #236]	@ (800131c <HAL_RCC_ClockConfig+0x1bc>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d101      	bne.n	800123e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e067      	b.n	800130e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800123e:	4b37      	ldr	r3, [pc, #220]	@ (800131c <HAL_RCC_ClockConfig+0x1bc>)
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	f023 0203 	bic.w	r2, r3, #3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	4934      	ldr	r1, [pc, #208]	@ (800131c <HAL_RCC_ClockConfig+0x1bc>)
 800124c:	4313      	orrs	r3, r2
 800124e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001250:	f7ff fcea 	bl	8000c28 <HAL_GetTick>
 8001254:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001256:	e00a      	b.n	800126e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001258:	f7ff fce6 	bl	8000c28 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001266:	4293      	cmp	r3, r2
 8001268:	d901      	bls.n	800126e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e04f      	b.n	800130e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800126e:	4b2b      	ldr	r3, [pc, #172]	@ (800131c <HAL_RCC_ClockConfig+0x1bc>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f003 020c 	and.w	r2, r3, #12
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	429a      	cmp	r2, r3
 800127e:	d1eb      	bne.n	8001258 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001280:	4b25      	ldr	r3, [pc, #148]	@ (8001318 <HAL_RCC_ClockConfig+0x1b8>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 030f 	and.w	r3, r3, #15
 8001288:	683a      	ldr	r2, [r7, #0]
 800128a:	429a      	cmp	r2, r3
 800128c:	d20c      	bcs.n	80012a8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800128e:	4b22      	ldr	r3, [pc, #136]	@ (8001318 <HAL_RCC_ClockConfig+0x1b8>)
 8001290:	683a      	ldr	r2, [r7, #0]
 8001292:	b2d2      	uxtb	r2, r2
 8001294:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001296:	4b20      	ldr	r3, [pc, #128]	@ (8001318 <HAL_RCC_ClockConfig+0x1b8>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 030f 	and.w	r3, r3, #15
 800129e:	683a      	ldr	r2, [r7, #0]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d001      	beq.n	80012a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e032      	b.n	800130e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0304 	and.w	r3, r3, #4
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d008      	beq.n	80012c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012b4:	4b19      	ldr	r3, [pc, #100]	@ (800131c <HAL_RCC_ClockConfig+0x1bc>)
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	4916      	ldr	r1, [pc, #88]	@ (800131c <HAL_RCC_ClockConfig+0x1bc>)
 80012c2:	4313      	orrs	r3, r2
 80012c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0308 	and.w	r3, r3, #8
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d009      	beq.n	80012e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012d2:	4b12      	ldr	r3, [pc, #72]	@ (800131c <HAL_RCC_ClockConfig+0x1bc>)
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	691b      	ldr	r3, [r3, #16]
 80012de:	00db      	lsls	r3, r3, #3
 80012e0:	490e      	ldr	r1, [pc, #56]	@ (800131c <HAL_RCC_ClockConfig+0x1bc>)
 80012e2:	4313      	orrs	r3, r2
 80012e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012e6:	f000 f887 	bl	80013f8 <HAL_RCC_GetSysClockFreq>
 80012ea:	4602      	mov	r2, r0
 80012ec:	4b0b      	ldr	r3, [pc, #44]	@ (800131c <HAL_RCC_ClockConfig+0x1bc>)
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	091b      	lsrs	r3, r3, #4
 80012f2:	f003 030f 	and.w	r3, r3, #15
 80012f6:	490a      	ldr	r1, [pc, #40]	@ (8001320 <HAL_RCC_ClockConfig+0x1c0>)
 80012f8:	5ccb      	ldrb	r3, [r1, r3]
 80012fa:	fa22 f303 	lsr.w	r3, r2, r3
 80012fe:	4a09      	ldr	r2, [pc, #36]	@ (8001324 <HAL_RCC_ClockConfig+0x1c4>)
 8001300:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001302:	4b09      	ldr	r3, [pc, #36]	@ (8001328 <HAL_RCC_ClockConfig+0x1c8>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff fb84 	bl	8000a14 <HAL_InitTick>

  return HAL_OK;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40023c00 	.word	0x40023c00
 800131c:	40023800 	.word	0x40023800
 8001320:	08005a88 	.word	0x08005a88
 8001324:	20000000 	.word	0x20000000
 8001328:	20000004 	.word	0x20000004

0800132c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001330:	4b03      	ldr	r3, [pc, #12]	@ (8001340 <HAL_RCC_GetHCLKFreq+0x14>)
 8001332:	681b      	ldr	r3, [r3, #0]
}
 8001334:	4618      	mov	r0, r3
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	20000000 	.word	0x20000000

08001344 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001348:	f7ff fff0 	bl	800132c <HAL_RCC_GetHCLKFreq>
 800134c:	4602      	mov	r2, r0
 800134e:	4b05      	ldr	r3, [pc, #20]	@ (8001364 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	0a9b      	lsrs	r3, r3, #10
 8001354:	f003 0307 	and.w	r3, r3, #7
 8001358:	4903      	ldr	r1, [pc, #12]	@ (8001368 <HAL_RCC_GetPCLK1Freq+0x24>)
 800135a:	5ccb      	ldrb	r3, [r1, r3]
 800135c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001360:	4618      	mov	r0, r3
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40023800 	.word	0x40023800
 8001368:	08005a98 	.word	0x08005a98

0800136c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001370:	f7ff ffdc 	bl	800132c <HAL_RCC_GetHCLKFreq>
 8001374:	4602      	mov	r2, r0
 8001376:	4b05      	ldr	r3, [pc, #20]	@ (800138c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	0b5b      	lsrs	r3, r3, #13
 800137c:	f003 0307 	and.w	r3, r3, #7
 8001380:	4903      	ldr	r1, [pc, #12]	@ (8001390 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001382:	5ccb      	ldrb	r3, [r1, r3]
 8001384:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001388:	4618      	mov	r0, r3
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40023800 	.word	0x40023800
 8001390:	08005a98 	.word	0x08005a98

08001394 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	220f      	movs	r2, #15
 80013a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80013a4:	4b12      	ldr	r3, [pc, #72]	@ (80013f0 <HAL_RCC_GetClockConfig+0x5c>)
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f003 0203 	and.w	r2, r3, #3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80013b0:	4b0f      	ldr	r3, [pc, #60]	@ (80013f0 <HAL_RCC_GetClockConfig+0x5c>)
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80013bc:	4b0c      	ldr	r3, [pc, #48]	@ (80013f0 <HAL_RCC_GetClockConfig+0x5c>)
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80013c8:	4b09      	ldr	r3, [pc, #36]	@ (80013f0 <HAL_RCC_GetClockConfig+0x5c>)
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	08db      	lsrs	r3, r3, #3
 80013ce:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80013d6:	4b07      	ldr	r3, [pc, #28]	@ (80013f4 <HAL_RCC_GetClockConfig+0x60>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 020f 	and.w	r2, r3, #15
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	601a      	str	r2, [r3, #0]
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	40023800 	.word	0x40023800
 80013f4:	40023c00 	.word	0x40023c00

080013f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013fc:	b0ae      	sub	sp, #184	@ 0xb8
 80013fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001400:	2300      	movs	r3, #0
 8001402:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001406:	2300      	movs	r3, #0
 8001408:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800140c:	2300      	movs	r3, #0
 800140e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001412:	2300      	movs	r3, #0
 8001414:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001418:	2300      	movs	r3, #0
 800141a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800141e:	4bcb      	ldr	r3, [pc, #812]	@ (800174c <HAL_RCC_GetSysClockFreq+0x354>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f003 030c 	and.w	r3, r3, #12
 8001426:	2b0c      	cmp	r3, #12
 8001428:	f200 8206 	bhi.w	8001838 <HAL_RCC_GetSysClockFreq+0x440>
 800142c:	a201      	add	r2, pc, #4	@ (adr r2, 8001434 <HAL_RCC_GetSysClockFreq+0x3c>)
 800142e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001432:	bf00      	nop
 8001434:	08001469 	.word	0x08001469
 8001438:	08001839 	.word	0x08001839
 800143c:	08001839 	.word	0x08001839
 8001440:	08001839 	.word	0x08001839
 8001444:	08001471 	.word	0x08001471
 8001448:	08001839 	.word	0x08001839
 800144c:	08001839 	.word	0x08001839
 8001450:	08001839 	.word	0x08001839
 8001454:	08001479 	.word	0x08001479
 8001458:	08001839 	.word	0x08001839
 800145c:	08001839 	.word	0x08001839
 8001460:	08001839 	.word	0x08001839
 8001464:	08001669 	.word	0x08001669
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001468:	4bb9      	ldr	r3, [pc, #740]	@ (8001750 <HAL_RCC_GetSysClockFreq+0x358>)
 800146a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800146e:	e1e7      	b.n	8001840 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001470:	4bb8      	ldr	r3, [pc, #736]	@ (8001754 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001472:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001476:	e1e3      	b.n	8001840 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001478:	4bb4      	ldr	r3, [pc, #720]	@ (800174c <HAL_RCC_GetSysClockFreq+0x354>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001480:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001484:	4bb1      	ldr	r3, [pc, #708]	@ (800174c <HAL_RCC_GetSysClockFreq+0x354>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d071      	beq.n	8001574 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001490:	4bae      	ldr	r3, [pc, #696]	@ (800174c <HAL_RCC_GetSysClockFreq+0x354>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	099b      	lsrs	r3, r3, #6
 8001496:	2200      	movs	r2, #0
 8001498:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800149c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80014a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80014a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80014ac:	2300      	movs	r3, #0
 80014ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80014b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80014b6:	4622      	mov	r2, r4
 80014b8:	462b      	mov	r3, r5
 80014ba:	f04f 0000 	mov.w	r0, #0
 80014be:	f04f 0100 	mov.w	r1, #0
 80014c2:	0159      	lsls	r1, r3, #5
 80014c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014c8:	0150      	lsls	r0, r2, #5
 80014ca:	4602      	mov	r2, r0
 80014cc:	460b      	mov	r3, r1
 80014ce:	4621      	mov	r1, r4
 80014d0:	1a51      	subs	r1, r2, r1
 80014d2:	6439      	str	r1, [r7, #64]	@ 0x40
 80014d4:	4629      	mov	r1, r5
 80014d6:	eb63 0301 	sbc.w	r3, r3, r1
 80014da:	647b      	str	r3, [r7, #68]	@ 0x44
 80014dc:	f04f 0200 	mov.w	r2, #0
 80014e0:	f04f 0300 	mov.w	r3, #0
 80014e4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80014e8:	4649      	mov	r1, r9
 80014ea:	018b      	lsls	r3, r1, #6
 80014ec:	4641      	mov	r1, r8
 80014ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80014f2:	4641      	mov	r1, r8
 80014f4:	018a      	lsls	r2, r1, #6
 80014f6:	4641      	mov	r1, r8
 80014f8:	1a51      	subs	r1, r2, r1
 80014fa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80014fc:	4649      	mov	r1, r9
 80014fe:	eb63 0301 	sbc.w	r3, r3, r1
 8001502:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001504:	f04f 0200 	mov.w	r2, #0
 8001508:	f04f 0300 	mov.w	r3, #0
 800150c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001510:	4649      	mov	r1, r9
 8001512:	00cb      	lsls	r3, r1, #3
 8001514:	4641      	mov	r1, r8
 8001516:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800151a:	4641      	mov	r1, r8
 800151c:	00ca      	lsls	r2, r1, #3
 800151e:	4610      	mov	r0, r2
 8001520:	4619      	mov	r1, r3
 8001522:	4603      	mov	r3, r0
 8001524:	4622      	mov	r2, r4
 8001526:	189b      	adds	r3, r3, r2
 8001528:	633b      	str	r3, [r7, #48]	@ 0x30
 800152a:	462b      	mov	r3, r5
 800152c:	460a      	mov	r2, r1
 800152e:	eb42 0303 	adc.w	r3, r2, r3
 8001532:	637b      	str	r3, [r7, #52]	@ 0x34
 8001534:	f04f 0200 	mov.w	r2, #0
 8001538:	f04f 0300 	mov.w	r3, #0
 800153c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001540:	4629      	mov	r1, r5
 8001542:	024b      	lsls	r3, r1, #9
 8001544:	4621      	mov	r1, r4
 8001546:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800154a:	4621      	mov	r1, r4
 800154c:	024a      	lsls	r2, r1, #9
 800154e:	4610      	mov	r0, r2
 8001550:	4619      	mov	r1, r3
 8001552:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001556:	2200      	movs	r2, #0
 8001558:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800155c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001560:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001564:	f7fe fe54 	bl	8000210 <__aeabi_uldivmod>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	4613      	mov	r3, r2
 800156e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001572:	e067      	b.n	8001644 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001574:	4b75      	ldr	r3, [pc, #468]	@ (800174c <HAL_RCC_GetSysClockFreq+0x354>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	099b      	lsrs	r3, r3, #6
 800157a:	2200      	movs	r2, #0
 800157c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001580:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001584:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001588:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800158c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800158e:	2300      	movs	r3, #0
 8001590:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001592:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001596:	4622      	mov	r2, r4
 8001598:	462b      	mov	r3, r5
 800159a:	f04f 0000 	mov.w	r0, #0
 800159e:	f04f 0100 	mov.w	r1, #0
 80015a2:	0159      	lsls	r1, r3, #5
 80015a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015a8:	0150      	lsls	r0, r2, #5
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	4621      	mov	r1, r4
 80015b0:	1a51      	subs	r1, r2, r1
 80015b2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80015b4:	4629      	mov	r1, r5
 80015b6:	eb63 0301 	sbc.w	r3, r3, r1
 80015ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015bc:	f04f 0200 	mov.w	r2, #0
 80015c0:	f04f 0300 	mov.w	r3, #0
 80015c4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80015c8:	4649      	mov	r1, r9
 80015ca:	018b      	lsls	r3, r1, #6
 80015cc:	4641      	mov	r1, r8
 80015ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015d2:	4641      	mov	r1, r8
 80015d4:	018a      	lsls	r2, r1, #6
 80015d6:	4641      	mov	r1, r8
 80015d8:	ebb2 0a01 	subs.w	sl, r2, r1
 80015dc:	4649      	mov	r1, r9
 80015de:	eb63 0b01 	sbc.w	fp, r3, r1
 80015e2:	f04f 0200 	mov.w	r2, #0
 80015e6:	f04f 0300 	mov.w	r3, #0
 80015ea:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80015ee:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80015f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80015f6:	4692      	mov	sl, r2
 80015f8:	469b      	mov	fp, r3
 80015fa:	4623      	mov	r3, r4
 80015fc:	eb1a 0303 	adds.w	r3, sl, r3
 8001600:	623b      	str	r3, [r7, #32]
 8001602:	462b      	mov	r3, r5
 8001604:	eb4b 0303 	adc.w	r3, fp, r3
 8001608:	627b      	str	r3, [r7, #36]	@ 0x24
 800160a:	f04f 0200 	mov.w	r2, #0
 800160e:	f04f 0300 	mov.w	r3, #0
 8001612:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001616:	4629      	mov	r1, r5
 8001618:	028b      	lsls	r3, r1, #10
 800161a:	4621      	mov	r1, r4
 800161c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001620:	4621      	mov	r1, r4
 8001622:	028a      	lsls	r2, r1, #10
 8001624:	4610      	mov	r0, r2
 8001626:	4619      	mov	r1, r3
 8001628:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800162c:	2200      	movs	r2, #0
 800162e:	673b      	str	r3, [r7, #112]	@ 0x70
 8001630:	677a      	str	r2, [r7, #116]	@ 0x74
 8001632:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001636:	f7fe fdeb 	bl	8000210 <__aeabi_uldivmod>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4613      	mov	r3, r2
 8001640:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001644:	4b41      	ldr	r3, [pc, #260]	@ (800174c <HAL_RCC_GetSysClockFreq+0x354>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	0c1b      	lsrs	r3, r3, #16
 800164a:	f003 0303 	and.w	r3, r3, #3
 800164e:	3301      	adds	r3, #1
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001656:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800165a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800165e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001662:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001666:	e0eb      	b.n	8001840 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001668:	4b38      	ldr	r3, [pc, #224]	@ (800174c <HAL_RCC_GetSysClockFreq+0x354>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001670:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001674:	4b35      	ldr	r3, [pc, #212]	@ (800174c <HAL_RCC_GetSysClockFreq+0x354>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d06b      	beq.n	8001758 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001680:	4b32      	ldr	r3, [pc, #200]	@ (800174c <HAL_RCC_GetSysClockFreq+0x354>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	099b      	lsrs	r3, r3, #6
 8001686:	2200      	movs	r2, #0
 8001688:	66bb      	str	r3, [r7, #104]	@ 0x68
 800168a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800168c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800168e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001692:	663b      	str	r3, [r7, #96]	@ 0x60
 8001694:	2300      	movs	r3, #0
 8001696:	667b      	str	r3, [r7, #100]	@ 0x64
 8001698:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800169c:	4622      	mov	r2, r4
 800169e:	462b      	mov	r3, r5
 80016a0:	f04f 0000 	mov.w	r0, #0
 80016a4:	f04f 0100 	mov.w	r1, #0
 80016a8:	0159      	lsls	r1, r3, #5
 80016aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016ae:	0150      	lsls	r0, r2, #5
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	4621      	mov	r1, r4
 80016b6:	1a51      	subs	r1, r2, r1
 80016b8:	61b9      	str	r1, [r7, #24]
 80016ba:	4629      	mov	r1, r5
 80016bc:	eb63 0301 	sbc.w	r3, r3, r1
 80016c0:	61fb      	str	r3, [r7, #28]
 80016c2:	f04f 0200 	mov.w	r2, #0
 80016c6:	f04f 0300 	mov.w	r3, #0
 80016ca:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80016ce:	4659      	mov	r1, fp
 80016d0:	018b      	lsls	r3, r1, #6
 80016d2:	4651      	mov	r1, sl
 80016d4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016d8:	4651      	mov	r1, sl
 80016da:	018a      	lsls	r2, r1, #6
 80016dc:	4651      	mov	r1, sl
 80016de:	ebb2 0801 	subs.w	r8, r2, r1
 80016e2:	4659      	mov	r1, fp
 80016e4:	eb63 0901 	sbc.w	r9, r3, r1
 80016e8:	f04f 0200 	mov.w	r2, #0
 80016ec:	f04f 0300 	mov.w	r3, #0
 80016f0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016f4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016f8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016fc:	4690      	mov	r8, r2
 80016fe:	4699      	mov	r9, r3
 8001700:	4623      	mov	r3, r4
 8001702:	eb18 0303 	adds.w	r3, r8, r3
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	462b      	mov	r3, r5
 800170a:	eb49 0303 	adc.w	r3, r9, r3
 800170e:	617b      	str	r3, [r7, #20]
 8001710:	f04f 0200 	mov.w	r2, #0
 8001714:	f04f 0300 	mov.w	r3, #0
 8001718:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800171c:	4629      	mov	r1, r5
 800171e:	024b      	lsls	r3, r1, #9
 8001720:	4621      	mov	r1, r4
 8001722:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001726:	4621      	mov	r1, r4
 8001728:	024a      	lsls	r2, r1, #9
 800172a:	4610      	mov	r0, r2
 800172c:	4619      	mov	r1, r3
 800172e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001732:	2200      	movs	r2, #0
 8001734:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001736:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001738:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800173c:	f7fe fd68 	bl	8000210 <__aeabi_uldivmod>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	4613      	mov	r3, r2
 8001746:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800174a:	e065      	b.n	8001818 <HAL_RCC_GetSysClockFreq+0x420>
 800174c:	40023800 	.word	0x40023800
 8001750:	00f42400 	.word	0x00f42400
 8001754:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001758:	4b3d      	ldr	r3, [pc, #244]	@ (8001850 <HAL_RCC_GetSysClockFreq+0x458>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	099b      	lsrs	r3, r3, #6
 800175e:	2200      	movs	r2, #0
 8001760:	4618      	mov	r0, r3
 8001762:	4611      	mov	r1, r2
 8001764:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001768:	653b      	str	r3, [r7, #80]	@ 0x50
 800176a:	2300      	movs	r3, #0
 800176c:	657b      	str	r3, [r7, #84]	@ 0x54
 800176e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001772:	4642      	mov	r2, r8
 8001774:	464b      	mov	r3, r9
 8001776:	f04f 0000 	mov.w	r0, #0
 800177a:	f04f 0100 	mov.w	r1, #0
 800177e:	0159      	lsls	r1, r3, #5
 8001780:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001784:	0150      	lsls	r0, r2, #5
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	4641      	mov	r1, r8
 800178c:	1a51      	subs	r1, r2, r1
 800178e:	60b9      	str	r1, [r7, #8]
 8001790:	4649      	mov	r1, r9
 8001792:	eb63 0301 	sbc.w	r3, r3, r1
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	f04f 0200 	mov.w	r2, #0
 800179c:	f04f 0300 	mov.w	r3, #0
 80017a0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80017a4:	4659      	mov	r1, fp
 80017a6:	018b      	lsls	r3, r1, #6
 80017a8:	4651      	mov	r1, sl
 80017aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017ae:	4651      	mov	r1, sl
 80017b0:	018a      	lsls	r2, r1, #6
 80017b2:	4651      	mov	r1, sl
 80017b4:	1a54      	subs	r4, r2, r1
 80017b6:	4659      	mov	r1, fp
 80017b8:	eb63 0501 	sbc.w	r5, r3, r1
 80017bc:	f04f 0200 	mov.w	r2, #0
 80017c0:	f04f 0300 	mov.w	r3, #0
 80017c4:	00eb      	lsls	r3, r5, #3
 80017c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017ca:	00e2      	lsls	r2, r4, #3
 80017cc:	4614      	mov	r4, r2
 80017ce:	461d      	mov	r5, r3
 80017d0:	4643      	mov	r3, r8
 80017d2:	18e3      	adds	r3, r4, r3
 80017d4:	603b      	str	r3, [r7, #0]
 80017d6:	464b      	mov	r3, r9
 80017d8:	eb45 0303 	adc.w	r3, r5, r3
 80017dc:	607b      	str	r3, [r7, #4]
 80017de:	f04f 0200 	mov.w	r2, #0
 80017e2:	f04f 0300 	mov.w	r3, #0
 80017e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017ea:	4629      	mov	r1, r5
 80017ec:	028b      	lsls	r3, r1, #10
 80017ee:	4621      	mov	r1, r4
 80017f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017f4:	4621      	mov	r1, r4
 80017f6:	028a      	lsls	r2, r1, #10
 80017f8:	4610      	mov	r0, r2
 80017fa:	4619      	mov	r1, r3
 80017fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001800:	2200      	movs	r2, #0
 8001802:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001804:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001806:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800180a:	f7fe fd01 	bl	8000210 <__aeabi_uldivmod>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	4613      	mov	r3, r2
 8001814:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001818:	4b0d      	ldr	r3, [pc, #52]	@ (8001850 <HAL_RCC_GetSysClockFreq+0x458>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	0f1b      	lsrs	r3, r3, #28
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001826:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800182a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800182e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001832:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001836:	e003      	b.n	8001840 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001838:	4b06      	ldr	r3, [pc, #24]	@ (8001854 <HAL_RCC_GetSysClockFreq+0x45c>)
 800183a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800183e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001840:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001844:	4618      	mov	r0, r3
 8001846:	37b8      	adds	r7, #184	@ 0xb8
 8001848:	46bd      	mov	sp, r7
 800184a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800184e:	bf00      	nop
 8001850:	40023800 	.word	0x40023800
 8001854:	00f42400 	.word	0x00f42400

08001858 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e28d      	b.n	8001d86 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	2b00      	cmp	r3, #0
 8001874:	f000 8083 	beq.w	800197e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001878:	4b94      	ldr	r3, [pc, #592]	@ (8001acc <HAL_RCC_OscConfig+0x274>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f003 030c 	and.w	r3, r3, #12
 8001880:	2b04      	cmp	r3, #4
 8001882:	d019      	beq.n	80018b8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001884:	4b91      	ldr	r3, [pc, #580]	@ (8001acc <HAL_RCC_OscConfig+0x274>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f003 030c 	and.w	r3, r3, #12
        || \
 800188c:	2b08      	cmp	r3, #8
 800188e:	d106      	bne.n	800189e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001890:	4b8e      	ldr	r3, [pc, #568]	@ (8001acc <HAL_RCC_OscConfig+0x274>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001898:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800189c:	d00c      	beq.n	80018b8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800189e:	4b8b      	ldr	r3, [pc, #556]	@ (8001acc <HAL_RCC_OscConfig+0x274>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80018a6:	2b0c      	cmp	r3, #12
 80018a8:	d112      	bne.n	80018d0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018aa:	4b88      	ldr	r3, [pc, #544]	@ (8001acc <HAL_RCC_OscConfig+0x274>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80018b6:	d10b      	bne.n	80018d0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b8:	4b84      	ldr	r3, [pc, #528]	@ (8001acc <HAL_RCC_OscConfig+0x274>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d05b      	beq.n	800197c <HAL_RCC_OscConfig+0x124>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d157      	bne.n	800197c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e25a      	b.n	8001d86 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018d8:	d106      	bne.n	80018e8 <HAL_RCC_OscConfig+0x90>
 80018da:	4b7c      	ldr	r3, [pc, #496]	@ (8001acc <HAL_RCC_OscConfig+0x274>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a7b      	ldr	r2, [pc, #492]	@ (8001acc <HAL_RCC_OscConfig+0x274>)
 80018e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018e4:	6013      	str	r3, [r2, #0]
 80018e6:	e01d      	b.n	8001924 <HAL_RCC_OscConfig+0xcc>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018f0:	d10c      	bne.n	800190c <HAL_RCC_OscConfig+0xb4>
 80018f2:	4b76      	ldr	r3, [pc, #472]	@ (8001acc <HAL_RCC_OscConfig+0x274>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a75      	ldr	r2, [pc, #468]	@ (8001acc <HAL_RCC_OscConfig+0x274>)
 80018f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018fc:	6013      	str	r3, [r2, #0]
 80018fe:	4b73      	ldr	r3, [pc, #460]	@ (8001acc <HAL_RCC_OscConfig+0x274>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a72      	ldr	r2, [pc, #456]	@ (8001acc <HAL_RCC_OscConfig+0x274>)
 8001904:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001908:	6013      	str	r3, [r2, #0]
 800190a:	e00b      	b.n	8001924 <HAL_RCC_OscConfig+0xcc>
 800190c:	4b6f      	ldr	r3, [pc, #444]	@ (8001acc <HAL_RCC_OscConfig+0x274>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a6e      	ldr	r2, [pc, #440]	@ (8001acc <HAL_RCC_OscConfig+0x274>)
 8001912:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001916:	6013      	str	r3, [r2, #0]
 8001918:	4b6c      	ldr	r3, [pc, #432]	@ (8001acc <HAL_RCC_OscConfig+0x274>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a6b      	ldr	r2, [pc, #428]	@ (8001acc <HAL_RCC_OscConfig+0x274>)
 800191e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001922:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d013      	beq.n	8001954 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800192c:	f7ff f97c 	bl	8000c28 <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001934:	f7ff f978 	bl	8000c28 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b64      	cmp	r3, #100	@ 0x64
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e21f      	b.n	8001d86 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001946:	4b61      	ldr	r3, [pc, #388]	@ (8001acc <HAL_RCC_OscConfig+0x274>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d0f0      	beq.n	8001934 <HAL_RCC_OscConfig+0xdc>
 8001952:	e014      	b.n	800197e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001954:	f7ff f968 	bl	8000c28 <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800195c:	f7ff f964 	bl	8000c28 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b64      	cmp	r3, #100	@ 0x64
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e20b      	b.n	8001d86 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800196e:	4b57      	ldr	r3, [pc, #348]	@ (8001acc <HAL_RCC_OscConfig+0x274>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1f0      	bne.n	800195c <HAL_RCC_OscConfig+0x104>
 800197a:	e000      	b.n	800197e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800197c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d06f      	beq.n	8001a6a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800198a:	4b50      	ldr	r3, [pc, #320]	@ (8001acc <HAL_RCC_OscConfig+0x274>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 030c 	and.w	r3, r3, #12
 8001992:	2b00      	cmp	r3, #0
 8001994:	d017      	beq.n	80019c6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001996:	4b4d      	ldr	r3, [pc, #308]	@ (8001acc <HAL_RCC_OscConfig+0x274>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f003 030c 	and.w	r3, r3, #12
        || \
 800199e:	2b08      	cmp	r3, #8
 80019a0:	d105      	bne.n	80019ae <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80019a2:	4b4a      	ldr	r3, [pc, #296]	@ (8001acc <HAL_RCC_OscConfig+0x274>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d00b      	beq.n	80019c6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019ae:	4b47      	ldr	r3, [pc, #284]	@ (8001acc <HAL_RCC_OscConfig+0x274>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80019b6:	2b0c      	cmp	r3, #12
 80019b8:	d11c      	bne.n	80019f4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019ba:	4b44      	ldr	r3, [pc, #272]	@ (8001acc <HAL_RCC_OscConfig+0x274>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d116      	bne.n	80019f4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019c6:	4b41      	ldr	r3, [pc, #260]	@ (8001acc <HAL_RCC_OscConfig+0x274>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d005      	beq.n	80019de <HAL_RCC_OscConfig+0x186>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d001      	beq.n	80019de <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e1d3      	b.n	8001d86 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019de:	4b3b      	ldr	r3, [pc, #236]	@ (8001acc <HAL_RCC_OscConfig+0x274>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	691b      	ldr	r3, [r3, #16]
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	4937      	ldr	r1, [pc, #220]	@ (8001acc <HAL_RCC_OscConfig+0x274>)
 80019ee:	4313      	orrs	r3, r2
 80019f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019f2:	e03a      	b.n	8001a6a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d020      	beq.n	8001a3e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019fc:	4b34      	ldr	r3, [pc, #208]	@ (8001ad0 <HAL_RCC_OscConfig+0x278>)
 80019fe:	2201      	movs	r2, #1
 8001a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a02:	f7ff f911 	bl	8000c28 <HAL_GetTick>
 8001a06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a08:	e008      	b.n	8001a1c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a0a:	f7ff f90d 	bl	8000c28 <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e1b4      	b.n	8001d86 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a1c:	4b2b      	ldr	r3, [pc, #172]	@ (8001acc <HAL_RCC_OscConfig+0x274>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d0f0      	beq.n	8001a0a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a28:	4b28      	ldr	r3, [pc, #160]	@ (8001acc <HAL_RCC_OscConfig+0x274>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	4925      	ldr	r1, [pc, #148]	@ (8001acc <HAL_RCC_OscConfig+0x274>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	600b      	str	r3, [r1, #0]
 8001a3c:	e015      	b.n	8001a6a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a3e:	4b24      	ldr	r3, [pc, #144]	@ (8001ad0 <HAL_RCC_OscConfig+0x278>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a44:	f7ff f8f0 	bl	8000c28 <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a4c:	f7ff f8ec 	bl	8000c28 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e193      	b.n	8001d86 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a5e:	4b1b      	ldr	r3, [pc, #108]	@ (8001acc <HAL_RCC_OscConfig+0x274>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1f0      	bne.n	8001a4c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0308 	and.w	r3, r3, #8
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d036      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d016      	beq.n	8001aac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a7e:	4b15      	ldr	r3, [pc, #84]	@ (8001ad4 <HAL_RCC_OscConfig+0x27c>)
 8001a80:	2201      	movs	r2, #1
 8001a82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a84:	f7ff f8d0 	bl	8000c28 <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a8c:	f7ff f8cc 	bl	8000c28 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e173      	b.n	8001d86 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001acc <HAL_RCC_OscConfig+0x274>)
 8001aa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d0f0      	beq.n	8001a8c <HAL_RCC_OscConfig+0x234>
 8001aaa:	e01b      	b.n	8001ae4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aac:	4b09      	ldr	r3, [pc, #36]	@ (8001ad4 <HAL_RCC_OscConfig+0x27c>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab2:	f7ff f8b9 	bl	8000c28 <HAL_GetTick>
 8001ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ab8:	e00e      	b.n	8001ad8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aba:	f7ff f8b5 	bl	8000c28 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d907      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e15c      	b.n	8001d86 <HAL_RCC_OscConfig+0x52e>
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	42470000 	.word	0x42470000
 8001ad4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad8:	4b8a      	ldr	r3, [pc, #552]	@ (8001d04 <HAL_RCC_OscConfig+0x4ac>)
 8001ada:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d1ea      	bne.n	8001aba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0304 	and.w	r3, r3, #4
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f000 8097 	beq.w	8001c20 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001af2:	2300      	movs	r3, #0
 8001af4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001af6:	4b83      	ldr	r3, [pc, #524]	@ (8001d04 <HAL_RCC_OscConfig+0x4ac>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d10f      	bne.n	8001b22 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	60bb      	str	r3, [r7, #8]
 8001b06:	4b7f      	ldr	r3, [pc, #508]	@ (8001d04 <HAL_RCC_OscConfig+0x4ac>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0a:	4a7e      	ldr	r2, [pc, #504]	@ (8001d04 <HAL_RCC_OscConfig+0x4ac>)
 8001b0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b10:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b12:	4b7c      	ldr	r3, [pc, #496]	@ (8001d04 <HAL_RCC_OscConfig+0x4ac>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b1a:	60bb      	str	r3, [r7, #8]
 8001b1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b22:	4b79      	ldr	r3, [pc, #484]	@ (8001d08 <HAL_RCC_OscConfig+0x4b0>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d118      	bne.n	8001b60 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b2e:	4b76      	ldr	r3, [pc, #472]	@ (8001d08 <HAL_RCC_OscConfig+0x4b0>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a75      	ldr	r2, [pc, #468]	@ (8001d08 <HAL_RCC_OscConfig+0x4b0>)
 8001b34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b3a:	f7ff f875 	bl	8000c28 <HAL_GetTick>
 8001b3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b40:	e008      	b.n	8001b54 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b42:	f7ff f871 	bl	8000c28 <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e118      	b.n	8001d86 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b54:	4b6c      	ldr	r3, [pc, #432]	@ (8001d08 <HAL_RCC_OscConfig+0x4b0>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d0f0      	beq.n	8001b42 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d106      	bne.n	8001b76 <HAL_RCC_OscConfig+0x31e>
 8001b68:	4b66      	ldr	r3, [pc, #408]	@ (8001d04 <HAL_RCC_OscConfig+0x4ac>)
 8001b6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b6c:	4a65      	ldr	r2, [pc, #404]	@ (8001d04 <HAL_RCC_OscConfig+0x4ac>)
 8001b6e:	f043 0301 	orr.w	r3, r3, #1
 8001b72:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b74:	e01c      	b.n	8001bb0 <HAL_RCC_OscConfig+0x358>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	2b05      	cmp	r3, #5
 8001b7c:	d10c      	bne.n	8001b98 <HAL_RCC_OscConfig+0x340>
 8001b7e:	4b61      	ldr	r3, [pc, #388]	@ (8001d04 <HAL_RCC_OscConfig+0x4ac>)
 8001b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b82:	4a60      	ldr	r2, [pc, #384]	@ (8001d04 <HAL_RCC_OscConfig+0x4ac>)
 8001b84:	f043 0304 	orr.w	r3, r3, #4
 8001b88:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b8a:	4b5e      	ldr	r3, [pc, #376]	@ (8001d04 <HAL_RCC_OscConfig+0x4ac>)
 8001b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b8e:	4a5d      	ldr	r2, [pc, #372]	@ (8001d04 <HAL_RCC_OscConfig+0x4ac>)
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b96:	e00b      	b.n	8001bb0 <HAL_RCC_OscConfig+0x358>
 8001b98:	4b5a      	ldr	r3, [pc, #360]	@ (8001d04 <HAL_RCC_OscConfig+0x4ac>)
 8001b9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b9c:	4a59      	ldr	r2, [pc, #356]	@ (8001d04 <HAL_RCC_OscConfig+0x4ac>)
 8001b9e:	f023 0301 	bic.w	r3, r3, #1
 8001ba2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ba4:	4b57      	ldr	r3, [pc, #348]	@ (8001d04 <HAL_RCC_OscConfig+0x4ac>)
 8001ba6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ba8:	4a56      	ldr	r2, [pc, #344]	@ (8001d04 <HAL_RCC_OscConfig+0x4ac>)
 8001baa:	f023 0304 	bic.w	r3, r3, #4
 8001bae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d015      	beq.n	8001be4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb8:	f7ff f836 	bl	8000c28 <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bbe:	e00a      	b.n	8001bd6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bc0:	f7ff f832 	bl	8000c28 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e0d7      	b.n	8001d86 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd6:	4b4b      	ldr	r3, [pc, #300]	@ (8001d04 <HAL_RCC_OscConfig+0x4ac>)
 8001bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d0ee      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x368>
 8001be2:	e014      	b.n	8001c0e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be4:	f7ff f820 	bl	8000c28 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bea:	e00a      	b.n	8001c02 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bec:	f7ff f81c 	bl	8000c28 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e0c1      	b.n	8001d86 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c02:	4b40      	ldr	r3, [pc, #256]	@ (8001d04 <HAL_RCC_OscConfig+0x4ac>)
 8001c04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1ee      	bne.n	8001bec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c0e:	7dfb      	ldrb	r3, [r7, #23]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d105      	bne.n	8001c20 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c14:	4b3b      	ldr	r3, [pc, #236]	@ (8001d04 <HAL_RCC_OscConfig+0x4ac>)
 8001c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c18:	4a3a      	ldr	r2, [pc, #232]	@ (8001d04 <HAL_RCC_OscConfig+0x4ac>)
 8001c1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c1e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f000 80ad 	beq.w	8001d84 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c2a:	4b36      	ldr	r3, [pc, #216]	@ (8001d04 <HAL_RCC_OscConfig+0x4ac>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f003 030c 	and.w	r3, r3, #12
 8001c32:	2b08      	cmp	r3, #8
 8001c34:	d060      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d145      	bne.n	8001cca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c3e:	4b33      	ldr	r3, [pc, #204]	@ (8001d0c <HAL_RCC_OscConfig+0x4b4>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c44:	f7fe fff0 	bl	8000c28 <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c4c:	f7fe ffec 	bl	8000c28 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e093      	b.n	8001d86 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c5e:	4b29      	ldr	r3, [pc, #164]	@ (8001d04 <HAL_RCC_OscConfig+0x4ac>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1f0      	bne.n	8001c4c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	69da      	ldr	r2, [r3, #28]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a1b      	ldr	r3, [r3, #32]
 8001c72:	431a      	orrs	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c78:	019b      	lsls	r3, r3, #6
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c80:	085b      	lsrs	r3, r3, #1
 8001c82:	3b01      	subs	r3, #1
 8001c84:	041b      	lsls	r3, r3, #16
 8001c86:	431a      	orrs	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c8c:	061b      	lsls	r3, r3, #24
 8001c8e:	431a      	orrs	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c94:	071b      	lsls	r3, r3, #28
 8001c96:	491b      	ldr	r1, [pc, #108]	@ (8001d04 <HAL_RCC_OscConfig+0x4ac>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c9c:	4b1b      	ldr	r3, [pc, #108]	@ (8001d0c <HAL_RCC_OscConfig+0x4b4>)
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca2:	f7fe ffc1 	bl	8000c28 <HAL_GetTick>
 8001ca6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ca8:	e008      	b.n	8001cbc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001caa:	f7fe ffbd 	bl	8000c28 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e064      	b.n	8001d86 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cbc:	4b11      	ldr	r3, [pc, #68]	@ (8001d04 <HAL_RCC_OscConfig+0x4ac>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d0f0      	beq.n	8001caa <HAL_RCC_OscConfig+0x452>
 8001cc8:	e05c      	b.n	8001d84 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cca:	4b10      	ldr	r3, [pc, #64]	@ (8001d0c <HAL_RCC_OscConfig+0x4b4>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd0:	f7fe ffaa 	bl	8000c28 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd8:	f7fe ffa6 	bl	8000c28 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e04d      	b.n	8001d86 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cea:	4b06      	ldr	r3, [pc, #24]	@ (8001d04 <HAL_RCC_OscConfig+0x4ac>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1f0      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x480>
 8001cf6:	e045      	b.n	8001d84 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d107      	bne.n	8001d10 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e040      	b.n	8001d86 <HAL_RCC_OscConfig+0x52e>
 8001d04:	40023800 	.word	0x40023800
 8001d08:	40007000 	.word	0x40007000
 8001d0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d10:	4b1f      	ldr	r3, [pc, #124]	@ (8001d90 <HAL_RCC_OscConfig+0x538>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d030      	beq.n	8001d80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d129      	bne.n	8001d80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d122      	bne.n	8001d80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001d40:	4013      	ands	r3, r2
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d119      	bne.n	8001d80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d56:	085b      	lsrs	r3, r3, #1
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d10f      	bne.n	8001d80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d107      	bne.n	8001d80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d001      	beq.n	8001d84 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e000      	b.n	8001d86 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3718      	adds	r7, #24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40023800 	.word	0x40023800

08001d94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e041      	b.n	8001e2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d106      	bne.n	8001dc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f839 	bl	8001e32 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3304      	adds	r3, #4
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4610      	mov	r0, r2
 8001dd4:	f000 f9c0 	bl	8002158 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
	...

08001e48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d001      	beq.n	8001e60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e04e      	b.n	8001efe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2202      	movs	r2, #2
 8001e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68da      	ldr	r2, [r3, #12]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f042 0201 	orr.w	r2, r2, #1
 8001e76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a23      	ldr	r2, [pc, #140]	@ (8001f0c <HAL_TIM_Base_Start_IT+0xc4>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d022      	beq.n	8001ec8 <HAL_TIM_Base_Start_IT+0x80>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e8a:	d01d      	beq.n	8001ec8 <HAL_TIM_Base_Start_IT+0x80>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a1f      	ldr	r2, [pc, #124]	@ (8001f10 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d018      	beq.n	8001ec8 <HAL_TIM_Base_Start_IT+0x80>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a1e      	ldr	r2, [pc, #120]	@ (8001f14 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d013      	beq.n	8001ec8 <HAL_TIM_Base_Start_IT+0x80>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a1c      	ldr	r2, [pc, #112]	@ (8001f18 <HAL_TIM_Base_Start_IT+0xd0>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d00e      	beq.n	8001ec8 <HAL_TIM_Base_Start_IT+0x80>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a1b      	ldr	r2, [pc, #108]	@ (8001f1c <HAL_TIM_Base_Start_IT+0xd4>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d009      	beq.n	8001ec8 <HAL_TIM_Base_Start_IT+0x80>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a19      	ldr	r2, [pc, #100]	@ (8001f20 <HAL_TIM_Base_Start_IT+0xd8>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d004      	beq.n	8001ec8 <HAL_TIM_Base_Start_IT+0x80>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a18      	ldr	r2, [pc, #96]	@ (8001f24 <HAL_TIM_Base_Start_IT+0xdc>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d111      	bne.n	8001eec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2b06      	cmp	r3, #6
 8001ed8:	d010      	beq.n	8001efc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f042 0201 	orr.w	r2, r2, #1
 8001ee8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eea:	e007      	b.n	8001efc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f042 0201 	orr.w	r2, r2, #1
 8001efa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3714      	adds	r7, #20
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	40010000 	.word	0x40010000
 8001f10:	40000400 	.word	0x40000400
 8001f14:	40000800 	.word	0x40000800
 8001f18:	40000c00 	.word	0x40000c00
 8001f1c:	40010400 	.word	0x40010400
 8001f20:	40014000 	.word	0x40014000
 8001f24:	40001800 	.word	0x40001800

08001f28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d020      	beq.n	8001f8c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d01b      	beq.n	8001f8c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f06f 0202 	mvn.w	r2, #2
 8001f5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2201      	movs	r2, #1
 8001f62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	f003 0303 	and.w	r3, r3, #3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f8d2 	bl	800211c <HAL_TIM_IC_CaptureCallback>
 8001f78:	e005      	b.n	8001f86 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f8c4 	bl	8002108 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f000 f8d5 	bl	8002130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	f003 0304 	and.w	r3, r3, #4
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d020      	beq.n	8001fd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f003 0304 	and.w	r3, r3, #4
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d01b      	beq.n	8001fd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f06f 0204 	mvn.w	r2, #4
 8001fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2202      	movs	r2, #2
 8001fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f8ac 	bl	800211c <HAL_TIM_IC_CaptureCallback>
 8001fc4:	e005      	b.n	8001fd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f89e 	bl	8002108 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 f8af 	bl	8002130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d020      	beq.n	8002024 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f003 0308 	and.w	r3, r3, #8
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d01b      	beq.n	8002024 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f06f 0208 	mvn.w	r2, #8
 8001ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2204      	movs	r2, #4
 8001ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	f003 0303 	and.w	r3, r3, #3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f886 	bl	800211c <HAL_TIM_IC_CaptureCallback>
 8002010:	e005      	b.n	800201e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f878 	bl	8002108 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 f889 	bl	8002130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	f003 0310 	and.w	r3, r3, #16
 800202a:	2b00      	cmp	r3, #0
 800202c:	d020      	beq.n	8002070 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f003 0310 	and.w	r3, r3, #16
 8002034:	2b00      	cmp	r3, #0
 8002036:	d01b      	beq.n	8002070 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f06f 0210 	mvn.w	r2, #16
 8002040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2208      	movs	r2, #8
 8002046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 f860 	bl	800211c <HAL_TIM_IC_CaptureCallback>
 800205c:	e005      	b.n	800206a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 f852 	bl	8002108 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f000 f863 	bl	8002130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00c      	beq.n	8002094 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	2b00      	cmp	r3, #0
 8002082:	d007      	beq.n	8002094 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f06f 0201 	mvn.w	r2, #1
 800208c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7fe fc00 	bl	8000894 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00c      	beq.n	80020b8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d007      	beq.n	80020b8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80020b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 f900 	bl	80022b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00c      	beq.n	80020dc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d007      	beq.n	80020dc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80020d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f834 	bl	8002144 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	f003 0320 	and.w	r3, r3, #32
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00c      	beq.n	8002100 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f003 0320 	and.w	r3, r3, #32
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d007      	beq.n	8002100 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f06f 0220 	mvn.w	r2, #32
 80020f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f8d2 	bl	80022a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002100:	bf00      	nop
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a43      	ldr	r2, [pc, #268]	@ (8002278 <TIM_Base_SetConfig+0x120>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d013      	beq.n	8002198 <TIM_Base_SetConfig+0x40>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002176:	d00f      	beq.n	8002198 <TIM_Base_SetConfig+0x40>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a40      	ldr	r2, [pc, #256]	@ (800227c <TIM_Base_SetConfig+0x124>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d00b      	beq.n	8002198 <TIM_Base_SetConfig+0x40>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a3f      	ldr	r2, [pc, #252]	@ (8002280 <TIM_Base_SetConfig+0x128>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d007      	beq.n	8002198 <TIM_Base_SetConfig+0x40>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a3e      	ldr	r2, [pc, #248]	@ (8002284 <TIM_Base_SetConfig+0x12c>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d003      	beq.n	8002198 <TIM_Base_SetConfig+0x40>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a3d      	ldr	r2, [pc, #244]	@ (8002288 <TIM_Base_SetConfig+0x130>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d108      	bne.n	80021aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800219e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a32      	ldr	r2, [pc, #200]	@ (8002278 <TIM_Base_SetConfig+0x120>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d02b      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021b8:	d027      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a2f      	ldr	r2, [pc, #188]	@ (800227c <TIM_Base_SetConfig+0x124>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d023      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a2e      	ldr	r2, [pc, #184]	@ (8002280 <TIM_Base_SetConfig+0x128>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d01f      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a2d      	ldr	r2, [pc, #180]	@ (8002284 <TIM_Base_SetConfig+0x12c>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d01b      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a2c      	ldr	r2, [pc, #176]	@ (8002288 <TIM_Base_SetConfig+0x130>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d017      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a2b      	ldr	r2, [pc, #172]	@ (800228c <TIM_Base_SetConfig+0x134>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d013      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a2a      	ldr	r2, [pc, #168]	@ (8002290 <TIM_Base_SetConfig+0x138>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d00f      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a29      	ldr	r2, [pc, #164]	@ (8002294 <TIM_Base_SetConfig+0x13c>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d00b      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a28      	ldr	r2, [pc, #160]	@ (8002298 <TIM_Base_SetConfig+0x140>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d007      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a27      	ldr	r2, [pc, #156]	@ (800229c <TIM_Base_SetConfig+0x144>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d003      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a26      	ldr	r2, [pc, #152]	@ (80022a0 <TIM_Base_SetConfig+0x148>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d108      	bne.n	800221c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002210:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	4313      	orrs	r3, r2
 800221a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	4313      	orrs	r3, r2
 8002228:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	689a      	ldr	r2, [r3, #8]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a0e      	ldr	r2, [pc, #56]	@ (8002278 <TIM_Base_SetConfig+0x120>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d003      	beq.n	800224a <TIM_Base_SetConfig+0xf2>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a10      	ldr	r2, [pc, #64]	@ (8002288 <TIM_Base_SetConfig+0x130>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d103      	bne.n	8002252 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	691a      	ldr	r2, [r3, #16]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f043 0204 	orr.w	r2, r3, #4
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2201      	movs	r2, #1
 8002262:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	601a      	str	r2, [r3, #0]
}
 800226a:	bf00      	nop
 800226c:	3714      	adds	r7, #20
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	40010000 	.word	0x40010000
 800227c:	40000400 	.word	0x40000400
 8002280:	40000800 	.word	0x40000800
 8002284:	40000c00 	.word	0x40000c00
 8002288:	40010400 	.word	0x40010400
 800228c:	40014000 	.word	0x40014000
 8002290:	40014400 	.word	0x40014400
 8002294:	40014800 	.word	0x40014800
 8002298:	40001800 	.word	0x40001800
 800229c:	40001c00 	.word	0x40001c00
 80022a0:	40002000 	.word	0x40002000

080022a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e042      	b.n	8002364 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d106      	bne.n	80022f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f7fe fb12 	bl	800091c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2224      	movs	r2, #36	@ 0x24
 80022fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68da      	ldr	r2, [r3, #12]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800230e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 fa09 	bl	8002728 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	691a      	ldr	r2, [r3, #16]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002324:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	695a      	ldr	r2, [r3, #20]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002334:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68da      	ldr	r2, [r3, #12]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002344:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2220      	movs	r2, #32
 8002350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2220      	movs	r2, #32
 8002358:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b08a      	sub	sp, #40	@ 0x28
 8002370:	af02      	add	r7, sp, #8
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	603b      	str	r3, [r7, #0]
 8002378:	4613      	mov	r3, r2
 800237a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800237c:	2300      	movs	r3, #0
 800237e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002386:	b2db      	uxtb	r3, r3
 8002388:	2b20      	cmp	r3, #32
 800238a:	d175      	bne.n	8002478 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d002      	beq.n	8002398 <HAL_UART_Transmit+0x2c>
 8002392:	88fb      	ldrh	r3, [r7, #6]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d101      	bne.n	800239c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e06e      	b.n	800247a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2200      	movs	r2, #0
 80023a0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2221      	movs	r2, #33	@ 0x21
 80023a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023aa:	f7fe fc3d 	bl	8000c28 <HAL_GetTick>
 80023ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	88fa      	ldrh	r2, [r7, #6]
 80023b4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	88fa      	ldrh	r2, [r7, #6]
 80023ba:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023c4:	d108      	bne.n	80023d8 <HAL_UART_Transmit+0x6c>
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d104      	bne.n	80023d8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80023ce:	2300      	movs	r3, #0
 80023d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	61bb      	str	r3, [r7, #24]
 80023d6:	e003      	b.n	80023e0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023dc:	2300      	movs	r3, #0
 80023de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80023e0:	e02e      	b.n	8002440 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	9300      	str	r3, [sp, #0]
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	2200      	movs	r2, #0
 80023ea:	2180      	movs	r1, #128	@ 0x80
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f000 f8df 	bl	80025b0 <UART_WaitOnFlagUntilTimeout>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d005      	beq.n	8002404 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2220      	movs	r2, #32
 80023fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e03a      	b.n	800247a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10b      	bne.n	8002422 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	461a      	mov	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002418:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	3302      	adds	r3, #2
 800241e:	61bb      	str	r3, [r7, #24]
 8002420:	e007      	b.n	8002432 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	781a      	ldrb	r2, [r3, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	3301      	adds	r3, #1
 8002430:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002436:	b29b      	uxth	r3, r3
 8002438:	3b01      	subs	r3, #1
 800243a:	b29a      	uxth	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002444:	b29b      	uxth	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1cb      	bne.n	80023e2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	9300      	str	r3, [sp, #0]
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	2200      	movs	r2, #0
 8002452:	2140      	movs	r1, #64	@ 0x40
 8002454:	68f8      	ldr	r0, [r7, #12]
 8002456:	f000 f8ab 	bl	80025b0 <UART_WaitOnFlagUntilTimeout>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d005      	beq.n	800246c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2220      	movs	r2, #32
 8002464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e006      	b.n	800247a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2220      	movs	r2, #32
 8002470:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002474:	2300      	movs	r3, #0
 8002476:	e000      	b.n	800247a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002478:	2302      	movs	r3, #2
  }
}
 800247a:	4618      	mov	r0, r3
 800247c:	3720      	adds	r7, #32
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b08a      	sub	sp, #40	@ 0x28
 8002486:	af02      	add	r7, sp, #8
 8002488:	60f8      	str	r0, [r7, #12]
 800248a:	60b9      	str	r1, [r7, #8]
 800248c:	603b      	str	r3, [r7, #0]
 800248e:	4613      	mov	r3, r2
 8002490:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002492:	2300      	movs	r3, #0
 8002494:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b20      	cmp	r3, #32
 80024a0:	f040 8081 	bne.w	80025a6 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d002      	beq.n	80024b0 <HAL_UART_Receive+0x2e>
 80024aa:	88fb      	ldrh	r3, [r7, #6]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d101      	bne.n	80024b4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e079      	b.n	80025a8 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2222      	movs	r2, #34	@ 0x22
 80024be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024c8:	f7fe fbae 	bl	8000c28 <HAL_GetTick>
 80024cc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	88fa      	ldrh	r2, [r7, #6]
 80024d2:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	88fa      	ldrh	r2, [r7, #6]
 80024d8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024e2:	d108      	bne.n	80024f6 <HAL_UART_Receive+0x74>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d104      	bne.n	80024f6 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80024ec:	2300      	movs	r3, #0
 80024ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	61bb      	str	r3, [r7, #24]
 80024f4:	e003      	b.n	80024fe <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024fa:	2300      	movs	r3, #0
 80024fc:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80024fe:	e047      	b.n	8002590 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	2200      	movs	r2, #0
 8002508:	2120      	movs	r1, #32
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f000 f850 	bl	80025b0 <UART_WaitOnFlagUntilTimeout>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d005      	beq.n	8002522 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2220      	movs	r2, #32
 800251a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e042      	b.n	80025a8 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d10c      	bne.n	8002542 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	b29b      	uxth	r3, r3
 8002530:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002534:	b29a      	uxth	r2, r3
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	3302      	adds	r3, #2
 800253e:	61bb      	str	r3, [r7, #24]
 8002540:	e01f      	b.n	8002582 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800254a:	d007      	beq.n	800255c <HAL_UART_Receive+0xda>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d10a      	bne.n	800256a <HAL_UART_Receive+0xe8>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d106      	bne.n	800256a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	b2da      	uxtb	r2, r3
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	701a      	strb	r2, [r3, #0]
 8002568:	e008      	b.n	800257c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	b2db      	uxtb	r3, r3
 8002572:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002576:	b2da      	uxtb	r2, r3
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	3301      	adds	r3, #1
 8002580:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002586:	b29b      	uxth	r3, r3
 8002588:	3b01      	subs	r3, #1
 800258a:	b29a      	uxth	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002594:	b29b      	uxth	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1b2      	bne.n	8002500 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2220      	movs	r2, #32
 800259e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80025a2:	2300      	movs	r3, #0
 80025a4:	e000      	b.n	80025a8 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80025a6:	2302      	movs	r3, #2
  }
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3720      	adds	r7, #32
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	603b      	str	r3, [r7, #0]
 80025bc:	4613      	mov	r3, r2
 80025be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025c0:	e03b      	b.n	800263a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025c2:	6a3b      	ldr	r3, [r7, #32]
 80025c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c8:	d037      	beq.n	800263a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ca:	f7fe fb2d 	bl	8000c28 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	6a3a      	ldr	r2, [r7, #32]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d302      	bcc.n	80025e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80025da:	6a3b      	ldr	r3, [r7, #32]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e03a      	b.n	800265a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	f003 0304 	and.w	r3, r3, #4
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d023      	beq.n	800263a <UART_WaitOnFlagUntilTimeout+0x8a>
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	2b80      	cmp	r3, #128	@ 0x80
 80025f6:	d020      	beq.n	800263a <UART_WaitOnFlagUntilTimeout+0x8a>
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	2b40      	cmp	r3, #64	@ 0x40
 80025fc:	d01d      	beq.n	800263a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0308 	and.w	r3, r3, #8
 8002608:	2b08      	cmp	r3, #8
 800260a:	d116      	bne.n	800263a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800260c:	2300      	movs	r3, #0
 800260e:	617b      	str	r3, [r7, #20]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	617b      	str	r3, [r7, #20]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	617b      	str	r3, [r7, #20]
 8002620:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002622:	68f8      	ldr	r0, [r7, #12]
 8002624:	f000 f81d 	bl	8002662 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2208      	movs	r2, #8
 800262c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e00f      	b.n	800265a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	4013      	ands	r3, r2
 8002644:	68ba      	ldr	r2, [r7, #8]
 8002646:	429a      	cmp	r2, r3
 8002648:	bf0c      	ite	eq
 800264a:	2301      	moveq	r3, #1
 800264c:	2300      	movne	r3, #0
 800264e:	b2db      	uxtb	r3, r3
 8002650:	461a      	mov	r2, r3
 8002652:	79fb      	ldrb	r3, [r7, #7]
 8002654:	429a      	cmp	r2, r3
 8002656:	d0b4      	beq.n	80025c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3718      	adds	r7, #24
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002662:	b480      	push	{r7}
 8002664:	b095      	sub	sp, #84	@ 0x54
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	330c      	adds	r3, #12
 8002670:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002674:	e853 3f00 	ldrex	r3, [r3]
 8002678:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800267a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800267c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002680:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	330c      	adds	r3, #12
 8002688:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800268a:	643a      	str	r2, [r7, #64]	@ 0x40
 800268c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800268e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002690:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002692:	e841 2300 	strex	r3, r2, [r1]
 8002696:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1e5      	bne.n	800266a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	3314      	adds	r3, #20
 80026a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026a6:	6a3b      	ldr	r3, [r7, #32]
 80026a8:	e853 3f00 	ldrex	r3, [r3]
 80026ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	f023 0301 	bic.w	r3, r3, #1
 80026b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	3314      	adds	r3, #20
 80026bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80026be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80026c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80026c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026c6:	e841 2300 	strex	r3, r2, [r1]
 80026ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80026cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1e5      	bne.n	800269e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d119      	bne.n	800270e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	330c      	adds	r3, #12
 80026e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	e853 3f00 	ldrex	r3, [r3]
 80026e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	f023 0310 	bic.w	r3, r3, #16
 80026f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	330c      	adds	r3, #12
 80026f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80026fa:	61ba      	str	r2, [r7, #24]
 80026fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026fe:	6979      	ldr	r1, [r7, #20]
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	e841 2300 	strex	r3, r2, [r1]
 8002706:	613b      	str	r3, [r7, #16]
   return(result);
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1e5      	bne.n	80026da <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2220      	movs	r2, #32
 8002712:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800271c:	bf00      	nop
 800271e:	3754      	adds	r7, #84	@ 0x54
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800272c:	b0c0      	sub	sp, #256	@ 0x100
 800272e:	af00      	add	r7, sp, #0
 8002730:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002744:	68d9      	ldr	r1, [r3, #12]
 8002746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	ea40 0301 	orr.w	r3, r0, r1
 8002750:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	431a      	orrs	r2, r3
 8002760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	431a      	orrs	r2, r3
 8002768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	4313      	orrs	r3, r2
 8002770:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002780:	f021 010c 	bic.w	r1, r1, #12
 8002784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800278e:	430b      	orrs	r3, r1
 8002790:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800279e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027a2:	6999      	ldr	r1, [r3, #24]
 80027a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	ea40 0301 	orr.w	r3, r0, r1
 80027ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80027b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	4b8f      	ldr	r3, [pc, #572]	@ (80029f4 <UART_SetConfig+0x2cc>)
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d005      	beq.n	80027c8 <UART_SetConfig+0xa0>
 80027bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	4b8d      	ldr	r3, [pc, #564]	@ (80029f8 <UART_SetConfig+0x2d0>)
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d104      	bne.n	80027d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80027c8:	f7fe fdd0 	bl	800136c <HAL_RCC_GetPCLK2Freq>
 80027cc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80027d0:	e003      	b.n	80027da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80027d2:	f7fe fdb7 	bl	8001344 <HAL_RCC_GetPCLK1Freq>
 80027d6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027de:	69db      	ldr	r3, [r3, #28]
 80027e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027e4:	f040 810c 	bne.w	8002a00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80027e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027ec:	2200      	movs	r2, #0
 80027ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80027f2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80027f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80027fa:	4622      	mov	r2, r4
 80027fc:	462b      	mov	r3, r5
 80027fe:	1891      	adds	r1, r2, r2
 8002800:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002802:	415b      	adcs	r3, r3
 8002804:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002806:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800280a:	4621      	mov	r1, r4
 800280c:	eb12 0801 	adds.w	r8, r2, r1
 8002810:	4629      	mov	r1, r5
 8002812:	eb43 0901 	adc.w	r9, r3, r1
 8002816:	f04f 0200 	mov.w	r2, #0
 800281a:	f04f 0300 	mov.w	r3, #0
 800281e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002822:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002826:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800282a:	4690      	mov	r8, r2
 800282c:	4699      	mov	r9, r3
 800282e:	4623      	mov	r3, r4
 8002830:	eb18 0303 	adds.w	r3, r8, r3
 8002834:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002838:	462b      	mov	r3, r5
 800283a:	eb49 0303 	adc.w	r3, r9, r3
 800283e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800284e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002852:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002856:	460b      	mov	r3, r1
 8002858:	18db      	adds	r3, r3, r3
 800285a:	653b      	str	r3, [r7, #80]	@ 0x50
 800285c:	4613      	mov	r3, r2
 800285e:	eb42 0303 	adc.w	r3, r2, r3
 8002862:	657b      	str	r3, [r7, #84]	@ 0x54
 8002864:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002868:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800286c:	f7fd fcd0 	bl	8000210 <__aeabi_uldivmod>
 8002870:	4602      	mov	r2, r0
 8002872:	460b      	mov	r3, r1
 8002874:	4b61      	ldr	r3, [pc, #388]	@ (80029fc <UART_SetConfig+0x2d4>)
 8002876:	fba3 2302 	umull	r2, r3, r3, r2
 800287a:	095b      	lsrs	r3, r3, #5
 800287c:	011c      	lsls	r4, r3, #4
 800287e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002882:	2200      	movs	r2, #0
 8002884:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002888:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800288c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002890:	4642      	mov	r2, r8
 8002892:	464b      	mov	r3, r9
 8002894:	1891      	adds	r1, r2, r2
 8002896:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002898:	415b      	adcs	r3, r3
 800289a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800289c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80028a0:	4641      	mov	r1, r8
 80028a2:	eb12 0a01 	adds.w	sl, r2, r1
 80028a6:	4649      	mov	r1, r9
 80028a8:	eb43 0b01 	adc.w	fp, r3, r1
 80028ac:	f04f 0200 	mov.w	r2, #0
 80028b0:	f04f 0300 	mov.w	r3, #0
 80028b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80028b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80028bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028c0:	4692      	mov	sl, r2
 80028c2:	469b      	mov	fp, r3
 80028c4:	4643      	mov	r3, r8
 80028c6:	eb1a 0303 	adds.w	r3, sl, r3
 80028ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80028ce:	464b      	mov	r3, r9
 80028d0:	eb4b 0303 	adc.w	r3, fp, r3
 80028d4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80028d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80028e4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80028e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80028ec:	460b      	mov	r3, r1
 80028ee:	18db      	adds	r3, r3, r3
 80028f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80028f2:	4613      	mov	r3, r2
 80028f4:	eb42 0303 	adc.w	r3, r2, r3
 80028f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80028fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80028fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002902:	f7fd fc85 	bl	8000210 <__aeabi_uldivmod>
 8002906:	4602      	mov	r2, r0
 8002908:	460b      	mov	r3, r1
 800290a:	4611      	mov	r1, r2
 800290c:	4b3b      	ldr	r3, [pc, #236]	@ (80029fc <UART_SetConfig+0x2d4>)
 800290e:	fba3 2301 	umull	r2, r3, r3, r1
 8002912:	095b      	lsrs	r3, r3, #5
 8002914:	2264      	movs	r2, #100	@ 0x64
 8002916:	fb02 f303 	mul.w	r3, r2, r3
 800291a:	1acb      	subs	r3, r1, r3
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002922:	4b36      	ldr	r3, [pc, #216]	@ (80029fc <UART_SetConfig+0x2d4>)
 8002924:	fba3 2302 	umull	r2, r3, r3, r2
 8002928:	095b      	lsrs	r3, r3, #5
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002930:	441c      	add	r4, r3
 8002932:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002936:	2200      	movs	r2, #0
 8002938:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800293c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002940:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002944:	4642      	mov	r2, r8
 8002946:	464b      	mov	r3, r9
 8002948:	1891      	adds	r1, r2, r2
 800294a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800294c:	415b      	adcs	r3, r3
 800294e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002950:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002954:	4641      	mov	r1, r8
 8002956:	1851      	adds	r1, r2, r1
 8002958:	6339      	str	r1, [r7, #48]	@ 0x30
 800295a:	4649      	mov	r1, r9
 800295c:	414b      	adcs	r3, r1
 800295e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002960:	f04f 0200 	mov.w	r2, #0
 8002964:	f04f 0300 	mov.w	r3, #0
 8002968:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800296c:	4659      	mov	r1, fp
 800296e:	00cb      	lsls	r3, r1, #3
 8002970:	4651      	mov	r1, sl
 8002972:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002976:	4651      	mov	r1, sl
 8002978:	00ca      	lsls	r2, r1, #3
 800297a:	4610      	mov	r0, r2
 800297c:	4619      	mov	r1, r3
 800297e:	4603      	mov	r3, r0
 8002980:	4642      	mov	r2, r8
 8002982:	189b      	adds	r3, r3, r2
 8002984:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002988:	464b      	mov	r3, r9
 800298a:	460a      	mov	r2, r1
 800298c:	eb42 0303 	adc.w	r3, r2, r3
 8002990:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80029a0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80029a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80029a8:	460b      	mov	r3, r1
 80029aa:	18db      	adds	r3, r3, r3
 80029ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029ae:	4613      	mov	r3, r2
 80029b0:	eb42 0303 	adc.w	r3, r2, r3
 80029b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80029ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80029be:	f7fd fc27 	bl	8000210 <__aeabi_uldivmod>
 80029c2:	4602      	mov	r2, r0
 80029c4:	460b      	mov	r3, r1
 80029c6:	4b0d      	ldr	r3, [pc, #52]	@ (80029fc <UART_SetConfig+0x2d4>)
 80029c8:	fba3 1302 	umull	r1, r3, r3, r2
 80029cc:	095b      	lsrs	r3, r3, #5
 80029ce:	2164      	movs	r1, #100	@ 0x64
 80029d0:	fb01 f303 	mul.w	r3, r1, r3
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	3332      	adds	r3, #50	@ 0x32
 80029da:	4a08      	ldr	r2, [pc, #32]	@ (80029fc <UART_SetConfig+0x2d4>)
 80029dc:	fba2 2303 	umull	r2, r3, r2, r3
 80029e0:	095b      	lsrs	r3, r3, #5
 80029e2:	f003 0207 	and.w	r2, r3, #7
 80029e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4422      	add	r2, r4
 80029ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80029f0:	e106      	b.n	8002c00 <UART_SetConfig+0x4d8>
 80029f2:	bf00      	nop
 80029f4:	40011000 	.word	0x40011000
 80029f8:	40011400 	.word	0x40011400
 80029fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a04:	2200      	movs	r2, #0
 8002a06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002a0a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002a0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002a12:	4642      	mov	r2, r8
 8002a14:	464b      	mov	r3, r9
 8002a16:	1891      	adds	r1, r2, r2
 8002a18:	6239      	str	r1, [r7, #32]
 8002a1a:	415b      	adcs	r3, r3
 8002a1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a22:	4641      	mov	r1, r8
 8002a24:	1854      	adds	r4, r2, r1
 8002a26:	4649      	mov	r1, r9
 8002a28:	eb43 0501 	adc.w	r5, r3, r1
 8002a2c:	f04f 0200 	mov.w	r2, #0
 8002a30:	f04f 0300 	mov.w	r3, #0
 8002a34:	00eb      	lsls	r3, r5, #3
 8002a36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a3a:	00e2      	lsls	r2, r4, #3
 8002a3c:	4614      	mov	r4, r2
 8002a3e:	461d      	mov	r5, r3
 8002a40:	4643      	mov	r3, r8
 8002a42:	18e3      	adds	r3, r4, r3
 8002a44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002a48:	464b      	mov	r3, r9
 8002a4a:	eb45 0303 	adc.w	r3, r5, r3
 8002a4e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002a5e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002a62:	f04f 0200 	mov.w	r2, #0
 8002a66:	f04f 0300 	mov.w	r3, #0
 8002a6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002a6e:	4629      	mov	r1, r5
 8002a70:	008b      	lsls	r3, r1, #2
 8002a72:	4621      	mov	r1, r4
 8002a74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a78:	4621      	mov	r1, r4
 8002a7a:	008a      	lsls	r2, r1, #2
 8002a7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002a80:	f7fd fbc6 	bl	8000210 <__aeabi_uldivmod>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	4b60      	ldr	r3, [pc, #384]	@ (8002c0c <UART_SetConfig+0x4e4>)
 8002a8a:	fba3 2302 	umull	r2, r3, r3, r2
 8002a8e:	095b      	lsrs	r3, r3, #5
 8002a90:	011c      	lsls	r4, r3, #4
 8002a92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a96:	2200      	movs	r2, #0
 8002a98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002a9c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002aa0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002aa4:	4642      	mov	r2, r8
 8002aa6:	464b      	mov	r3, r9
 8002aa8:	1891      	adds	r1, r2, r2
 8002aaa:	61b9      	str	r1, [r7, #24]
 8002aac:	415b      	adcs	r3, r3
 8002aae:	61fb      	str	r3, [r7, #28]
 8002ab0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ab4:	4641      	mov	r1, r8
 8002ab6:	1851      	adds	r1, r2, r1
 8002ab8:	6139      	str	r1, [r7, #16]
 8002aba:	4649      	mov	r1, r9
 8002abc:	414b      	adcs	r3, r1
 8002abe:	617b      	str	r3, [r7, #20]
 8002ac0:	f04f 0200 	mov.w	r2, #0
 8002ac4:	f04f 0300 	mov.w	r3, #0
 8002ac8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002acc:	4659      	mov	r1, fp
 8002ace:	00cb      	lsls	r3, r1, #3
 8002ad0:	4651      	mov	r1, sl
 8002ad2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ad6:	4651      	mov	r1, sl
 8002ad8:	00ca      	lsls	r2, r1, #3
 8002ada:	4610      	mov	r0, r2
 8002adc:	4619      	mov	r1, r3
 8002ade:	4603      	mov	r3, r0
 8002ae0:	4642      	mov	r2, r8
 8002ae2:	189b      	adds	r3, r3, r2
 8002ae4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002ae8:	464b      	mov	r3, r9
 8002aea:	460a      	mov	r2, r1
 8002aec:	eb42 0303 	adc.w	r3, r2, r3
 8002af0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002afe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002b00:	f04f 0200 	mov.w	r2, #0
 8002b04:	f04f 0300 	mov.w	r3, #0
 8002b08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002b0c:	4649      	mov	r1, r9
 8002b0e:	008b      	lsls	r3, r1, #2
 8002b10:	4641      	mov	r1, r8
 8002b12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b16:	4641      	mov	r1, r8
 8002b18:	008a      	lsls	r2, r1, #2
 8002b1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002b1e:	f7fd fb77 	bl	8000210 <__aeabi_uldivmod>
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	4611      	mov	r1, r2
 8002b28:	4b38      	ldr	r3, [pc, #224]	@ (8002c0c <UART_SetConfig+0x4e4>)
 8002b2a:	fba3 2301 	umull	r2, r3, r3, r1
 8002b2e:	095b      	lsrs	r3, r3, #5
 8002b30:	2264      	movs	r2, #100	@ 0x64
 8002b32:	fb02 f303 	mul.w	r3, r2, r3
 8002b36:	1acb      	subs	r3, r1, r3
 8002b38:	011b      	lsls	r3, r3, #4
 8002b3a:	3332      	adds	r3, #50	@ 0x32
 8002b3c:	4a33      	ldr	r2, [pc, #204]	@ (8002c0c <UART_SetConfig+0x4e4>)
 8002b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b42:	095b      	lsrs	r3, r3, #5
 8002b44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b48:	441c      	add	r4, r3
 8002b4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b4e:	2200      	movs	r2, #0
 8002b50:	673b      	str	r3, [r7, #112]	@ 0x70
 8002b52:	677a      	str	r2, [r7, #116]	@ 0x74
 8002b54:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002b58:	4642      	mov	r2, r8
 8002b5a:	464b      	mov	r3, r9
 8002b5c:	1891      	adds	r1, r2, r2
 8002b5e:	60b9      	str	r1, [r7, #8]
 8002b60:	415b      	adcs	r3, r3
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b68:	4641      	mov	r1, r8
 8002b6a:	1851      	adds	r1, r2, r1
 8002b6c:	6039      	str	r1, [r7, #0]
 8002b6e:	4649      	mov	r1, r9
 8002b70:	414b      	adcs	r3, r1
 8002b72:	607b      	str	r3, [r7, #4]
 8002b74:	f04f 0200 	mov.w	r2, #0
 8002b78:	f04f 0300 	mov.w	r3, #0
 8002b7c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002b80:	4659      	mov	r1, fp
 8002b82:	00cb      	lsls	r3, r1, #3
 8002b84:	4651      	mov	r1, sl
 8002b86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b8a:	4651      	mov	r1, sl
 8002b8c:	00ca      	lsls	r2, r1, #3
 8002b8e:	4610      	mov	r0, r2
 8002b90:	4619      	mov	r1, r3
 8002b92:	4603      	mov	r3, r0
 8002b94:	4642      	mov	r2, r8
 8002b96:	189b      	adds	r3, r3, r2
 8002b98:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b9a:	464b      	mov	r3, r9
 8002b9c:	460a      	mov	r2, r1
 8002b9e:	eb42 0303 	adc.w	r3, r2, r3
 8002ba2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	663b      	str	r3, [r7, #96]	@ 0x60
 8002bae:	667a      	str	r2, [r7, #100]	@ 0x64
 8002bb0:	f04f 0200 	mov.w	r2, #0
 8002bb4:	f04f 0300 	mov.w	r3, #0
 8002bb8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002bbc:	4649      	mov	r1, r9
 8002bbe:	008b      	lsls	r3, r1, #2
 8002bc0:	4641      	mov	r1, r8
 8002bc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bc6:	4641      	mov	r1, r8
 8002bc8:	008a      	lsls	r2, r1, #2
 8002bca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002bce:	f7fd fb1f 	bl	8000210 <__aeabi_uldivmod>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8002c0c <UART_SetConfig+0x4e4>)
 8002bd8:	fba3 1302 	umull	r1, r3, r3, r2
 8002bdc:	095b      	lsrs	r3, r3, #5
 8002bde:	2164      	movs	r1, #100	@ 0x64
 8002be0:	fb01 f303 	mul.w	r3, r1, r3
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	011b      	lsls	r3, r3, #4
 8002be8:	3332      	adds	r3, #50	@ 0x32
 8002bea:	4a08      	ldr	r2, [pc, #32]	@ (8002c0c <UART_SetConfig+0x4e4>)
 8002bec:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf0:	095b      	lsrs	r3, r3, #5
 8002bf2:	f003 020f 	and.w	r2, r3, #15
 8002bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4422      	add	r2, r4
 8002bfe:	609a      	str	r2, [r3, #8]
}
 8002c00:	bf00      	nop
 8002c02:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002c06:	46bd      	mov	sp, r7
 8002c08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c0c:	51eb851f 	.word	0x51eb851f

08002c10 <__NVIC_SetPriority>:
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	4603      	mov	r3, r0
 8002c18:	6039      	str	r1, [r7, #0]
 8002c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	db0a      	blt.n	8002c3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	b2da      	uxtb	r2, r3
 8002c28:	490c      	ldr	r1, [pc, #48]	@ (8002c5c <__NVIC_SetPriority+0x4c>)
 8002c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2e:	0112      	lsls	r2, r2, #4
 8002c30:	b2d2      	uxtb	r2, r2
 8002c32:	440b      	add	r3, r1
 8002c34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002c38:	e00a      	b.n	8002c50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	b2da      	uxtb	r2, r3
 8002c3e:	4908      	ldr	r1, [pc, #32]	@ (8002c60 <__NVIC_SetPriority+0x50>)
 8002c40:	79fb      	ldrb	r3, [r7, #7]
 8002c42:	f003 030f 	and.w	r3, r3, #15
 8002c46:	3b04      	subs	r3, #4
 8002c48:	0112      	lsls	r2, r2, #4
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	761a      	strb	r2, [r3, #24]
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr
 8002c5c:	e000e100 	.word	0xe000e100
 8002c60:	e000ed00 	.word	0xe000ed00

08002c64 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002c68:	4b05      	ldr	r3, [pc, #20]	@ (8002c80 <SysTick_Handler+0x1c>)
 8002c6a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002c6c:	f001 fd46 	bl	80046fc <xTaskGetSchedulerState>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d001      	beq.n	8002c7a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002c76:	f002 fb3f 	bl	80052f8 <xPortSysTickHandler>
  }
}
 8002c7a:	bf00      	nop
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	e000e010 	.word	0xe000e010

08002c84 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002c88:	2100      	movs	r1, #0
 8002c8a:	f06f 0004 	mvn.w	r0, #4
 8002c8e:	f7ff ffbf 	bl	8002c10 <__NVIC_SetPriority>
#endif
}
 8002c92:	bf00      	nop
 8002c94:	bd80      	pop	{r7, pc}
	...

08002c98 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c9e:	f3ef 8305 	mrs	r3, IPSR
 8002ca2:	603b      	str	r3, [r7, #0]
  return(result);
 8002ca4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002caa:	f06f 0305 	mvn.w	r3, #5
 8002cae:	607b      	str	r3, [r7, #4]
 8002cb0:	e00c      	b.n	8002ccc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8002cdc <osKernelInitialize+0x44>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d105      	bne.n	8002cc6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002cba:	4b08      	ldr	r3, [pc, #32]	@ (8002cdc <osKernelInitialize+0x44>)
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	607b      	str	r3, [r7, #4]
 8002cc4:	e002      	b.n	8002ccc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8002cca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002ccc:	687b      	ldr	r3, [r7, #4]
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	200001e0 	.word	0x200001e0

08002ce0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ce6:	f3ef 8305 	mrs	r3, IPSR
 8002cea:	603b      	str	r3, [r7, #0]
  return(result);
 8002cec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d003      	beq.n	8002cfa <osKernelStart+0x1a>
    stat = osErrorISR;
 8002cf2:	f06f 0305 	mvn.w	r3, #5
 8002cf6:	607b      	str	r3, [r7, #4]
 8002cf8:	e010      	b.n	8002d1c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8002d28 <osKernelStart+0x48>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d109      	bne.n	8002d16 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002d02:	f7ff ffbf 	bl	8002c84 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002d06:	4b08      	ldr	r3, [pc, #32]	@ (8002d28 <osKernelStart+0x48>)
 8002d08:	2202      	movs	r2, #2
 8002d0a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002d0c:	f001 f892 	bl	8003e34 <vTaskStartScheduler>
      stat = osOK;
 8002d10:	2300      	movs	r3, #0
 8002d12:	607b      	str	r3, [r7, #4]
 8002d14:	e002      	b.n	8002d1c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002d16:	f04f 33ff 	mov.w	r3, #4294967295
 8002d1a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002d1c:	687b      	ldr	r3, [r7, #4]
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	200001e0 	.word	0x200001e0

08002d2c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b08e      	sub	sp, #56	@ 0x38
 8002d30:	af04      	add	r7, sp, #16
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d3c:	f3ef 8305 	mrs	r3, IPSR
 8002d40:	617b      	str	r3, [r7, #20]
  return(result);
 8002d42:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d17e      	bne.n	8002e46 <osThreadNew+0x11a>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d07b      	beq.n	8002e46 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002d4e:	2380      	movs	r3, #128	@ 0x80
 8002d50:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002d52:	2318      	movs	r3, #24
 8002d54:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002d56:	2300      	movs	r3, #0
 8002d58:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d5e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d045      	beq.n	8002df2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d002      	beq.n	8002d74 <osThreadNew+0x48>
        name = attr->name;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d002      	beq.n	8002d82 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d008      	beq.n	8002d9a <osThreadNew+0x6e>
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	2b38      	cmp	r3, #56	@ 0x38
 8002d8c:	d805      	bhi.n	8002d9a <osThreadNew+0x6e>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <osThreadNew+0x72>
        return (NULL);
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	e054      	b.n	8002e48 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	089b      	lsrs	r3, r3, #2
 8002dac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00e      	beq.n	8002dd4 <osThreadNew+0xa8>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	2ba7      	cmp	r3, #167	@ 0xa7
 8002dbc:	d90a      	bls.n	8002dd4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d006      	beq.n	8002dd4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d002      	beq.n	8002dd4 <osThreadNew+0xa8>
        mem = 1;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	61bb      	str	r3, [r7, #24]
 8002dd2:	e010      	b.n	8002df6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d10c      	bne.n	8002df6 <osThreadNew+0xca>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d108      	bne.n	8002df6 <osThreadNew+0xca>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d104      	bne.n	8002df6 <osThreadNew+0xca>
          mem = 0;
 8002dec:	2300      	movs	r3, #0
 8002dee:	61bb      	str	r3, [r7, #24]
 8002df0:	e001      	b.n	8002df6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002df2:	2300      	movs	r3, #0
 8002df4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d110      	bne.n	8002e1e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002e04:	9202      	str	r2, [sp, #8]
 8002e06:	9301      	str	r3, [sp, #4]
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	9300      	str	r3, [sp, #0]
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	6a3a      	ldr	r2, [r7, #32]
 8002e10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 fe1a 	bl	8003a4c <xTaskCreateStatic>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	613b      	str	r3, [r7, #16]
 8002e1c:	e013      	b.n	8002e46 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d110      	bne.n	8002e46 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002e24:	6a3b      	ldr	r3, [r7, #32]
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	f107 0310 	add.w	r3, r7, #16
 8002e2c:	9301      	str	r3, [sp, #4]
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f000 fe68 	bl	8003b0c <xTaskCreate>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d001      	beq.n	8002e46 <osThreadNew+0x11a>
            hTask = NULL;
 8002e42:	2300      	movs	r3, #0
 8002e44:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002e46:	693b      	ldr	r3, [r7, #16]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3728      	adds	r7, #40	@ 0x28
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e58:	f3ef 8305 	mrs	r3, IPSR
 8002e5c:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e5e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d003      	beq.n	8002e6c <osDelay+0x1c>
    stat = osErrorISR;
 8002e64:	f06f 0305 	mvn.w	r3, #5
 8002e68:	60fb      	str	r3, [r7, #12]
 8002e6a:	e007      	b.n	8002e7c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d002      	beq.n	8002e7c <osDelay+0x2c>
      vTaskDelay(ticks);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 ffa6 	bl	8003dc8 <vTaskDelay>
    }
  }

  return (stat);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
	...

08002e88 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	4a07      	ldr	r2, [pc, #28]	@ (8002eb4 <vApplicationGetIdleTaskMemory+0x2c>)
 8002e98:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	4a06      	ldr	r2, [pc, #24]	@ (8002eb8 <vApplicationGetIdleTaskMemory+0x30>)
 8002e9e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2280      	movs	r2, #128	@ 0x80
 8002ea4:	601a      	str	r2, [r3, #0]
}
 8002ea6:	bf00      	nop
 8002ea8:	3714      	adds	r7, #20
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	200001e4 	.word	0x200001e4
 8002eb8:	2000028c 	.word	0x2000028c

08002ebc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	4a07      	ldr	r2, [pc, #28]	@ (8002ee8 <vApplicationGetTimerTaskMemory+0x2c>)
 8002ecc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	4a06      	ldr	r2, [pc, #24]	@ (8002eec <vApplicationGetTimerTaskMemory+0x30>)
 8002ed2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002eda:	601a      	str	r2, [r3, #0]
}
 8002edc:	bf00      	nop
 8002ede:	3714      	adds	r7, #20
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	2000048c 	.word	0x2000048c
 8002eec:	20000534 	.word	0x20000534

08002ef0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f103 0208 	add.w	r2, r3, #8
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f04f 32ff 	mov.w	r2, #4294967295
 8002f08:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f103 0208 	add.w	r2, r3, #8
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f103 0208 	add.w	r2, r3, #8
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002f3e:	bf00      	nop
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr

08002f4a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b085      	sub	sp, #20
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
 8002f52:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	1c5a      	adds	r2, r3, #1
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	601a      	str	r2, [r3, #0]
}
 8002f86:	bf00      	nop
 8002f88:	3714      	adds	r7, #20
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr

08002f92 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f92:	b480      	push	{r7}
 8002f94:	b085      	sub	sp, #20
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
 8002f9a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa8:	d103      	bne.n	8002fb2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	60fb      	str	r3, [r7, #12]
 8002fb0:	e00c      	b.n	8002fcc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	3308      	adds	r3, #8
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	e002      	b.n	8002fc0 <vListInsert+0x2e>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	60fb      	str	r3, [r7, #12]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68ba      	ldr	r2, [r7, #8]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d2f6      	bcs.n	8002fba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	683a      	ldr	r2, [r7, #0]
 8002fda:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	1c5a      	adds	r2, r3, #1
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	601a      	str	r2, [r3, #0]
}
 8002ff8:	bf00      	nop
 8002ffa:	3714      	adds	r7, #20
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	6892      	ldr	r2, [r2, #8]
 800301a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	6852      	ldr	r2, [r2, #4]
 8003024:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	429a      	cmp	r2, r3
 800302e:	d103      	bne.n	8003038 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	1e5a      	subs	r2, r3, #1
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
}
 800304c:	4618      	mov	r0, r3
 800304e:	3714      	adds	r7, #20
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d10b      	bne.n	8003084 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800306c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003070:	f383 8811 	msr	BASEPRI, r3
 8003074:	f3bf 8f6f 	isb	sy
 8003078:	f3bf 8f4f 	dsb	sy
 800307c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800307e:	bf00      	nop
 8003080:	bf00      	nop
 8003082:	e7fd      	b.n	8003080 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003084:	f002 f8a8 	bl	80051d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003090:	68f9      	ldr	r1, [r7, #12]
 8003092:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003094:	fb01 f303 	mul.w	r3, r1, r3
 8003098:	441a      	add	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030b4:	3b01      	subs	r3, #1
 80030b6:	68f9      	ldr	r1, [r7, #12]
 80030b8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80030ba:	fb01 f303 	mul.w	r3, r1, r3
 80030be:	441a      	add	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	22ff      	movs	r2, #255	@ 0xff
 80030c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	22ff      	movs	r2, #255	@ 0xff
 80030d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d114      	bne.n	8003104 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d01a      	beq.n	8003118 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	3310      	adds	r3, #16
 80030e6:	4618      	mov	r0, r3
 80030e8:	f001 f942 	bl	8004370 <xTaskRemoveFromEventList>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d012      	beq.n	8003118 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80030f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003128 <xQueueGenericReset+0xd0>)
 80030f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030f8:	601a      	str	r2, [r3, #0]
 80030fa:	f3bf 8f4f 	dsb	sy
 80030fe:	f3bf 8f6f 	isb	sy
 8003102:	e009      	b.n	8003118 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	3310      	adds	r3, #16
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff fef1 	bl	8002ef0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	3324      	adds	r3, #36	@ 0x24
 8003112:	4618      	mov	r0, r3
 8003114:	f7ff feec 	bl	8002ef0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003118:	f002 f890 	bl	800523c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800311c:	2301      	movs	r3, #1
}
 800311e:	4618      	mov	r0, r3
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	e000ed04 	.word	0xe000ed04

0800312c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800312c:	b580      	push	{r7, lr}
 800312e:	b08e      	sub	sp, #56	@ 0x38
 8003130:	af02      	add	r7, sp, #8
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
 8003138:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d10b      	bne.n	8003158 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003144:	f383 8811 	msr	BASEPRI, r3
 8003148:	f3bf 8f6f 	isb	sy
 800314c:	f3bf 8f4f 	dsb	sy
 8003150:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003152:	bf00      	nop
 8003154:	bf00      	nop
 8003156:	e7fd      	b.n	8003154 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d10b      	bne.n	8003176 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800315e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003162:	f383 8811 	msr	BASEPRI, r3
 8003166:	f3bf 8f6f 	isb	sy
 800316a:	f3bf 8f4f 	dsb	sy
 800316e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003170:	bf00      	nop
 8003172:	bf00      	nop
 8003174:	e7fd      	b.n	8003172 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d002      	beq.n	8003182 <xQueueGenericCreateStatic+0x56>
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <xQueueGenericCreateStatic+0x5a>
 8003182:	2301      	movs	r3, #1
 8003184:	e000      	b.n	8003188 <xQueueGenericCreateStatic+0x5c>
 8003186:	2300      	movs	r3, #0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10b      	bne.n	80031a4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800318c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003190:	f383 8811 	msr	BASEPRI, r3
 8003194:	f3bf 8f6f 	isb	sy
 8003198:	f3bf 8f4f 	dsb	sy
 800319c:	623b      	str	r3, [r7, #32]
}
 800319e:	bf00      	nop
 80031a0:	bf00      	nop
 80031a2:	e7fd      	b.n	80031a0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d102      	bne.n	80031b0 <xQueueGenericCreateStatic+0x84>
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d101      	bne.n	80031b4 <xQueueGenericCreateStatic+0x88>
 80031b0:	2301      	movs	r3, #1
 80031b2:	e000      	b.n	80031b6 <xQueueGenericCreateStatic+0x8a>
 80031b4:	2300      	movs	r3, #0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10b      	bne.n	80031d2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80031ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031be:	f383 8811 	msr	BASEPRI, r3
 80031c2:	f3bf 8f6f 	isb	sy
 80031c6:	f3bf 8f4f 	dsb	sy
 80031ca:	61fb      	str	r3, [r7, #28]
}
 80031cc:	bf00      	nop
 80031ce:	bf00      	nop
 80031d0:	e7fd      	b.n	80031ce <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80031d2:	2350      	movs	r3, #80	@ 0x50
 80031d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	2b50      	cmp	r3, #80	@ 0x50
 80031da:	d00b      	beq.n	80031f4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80031dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031e0:	f383 8811 	msr	BASEPRI, r3
 80031e4:	f3bf 8f6f 	isb	sy
 80031e8:	f3bf 8f4f 	dsb	sy
 80031ec:	61bb      	str	r3, [r7, #24]
}
 80031ee:	bf00      	nop
 80031f0:	bf00      	nop
 80031f2:	e7fd      	b.n	80031f0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80031f4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80031fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00d      	beq.n	800321c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003208:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800320c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800320e:	9300      	str	r3, [sp, #0]
 8003210:	4613      	mov	r3, r2
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	68b9      	ldr	r1, [r7, #8]
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	f000 f805 	bl	8003226 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800321c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800321e:	4618      	mov	r0, r3
 8003220:	3730      	adds	r7, #48	@ 0x30
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b084      	sub	sp, #16
 800322a:	af00      	add	r7, sp, #0
 800322c:	60f8      	str	r0, [r7, #12]
 800322e:	60b9      	str	r1, [r7, #8]
 8003230:	607a      	str	r2, [r7, #4]
 8003232:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d103      	bne.n	8003242 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	e002      	b.n	8003248 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	68ba      	ldr	r2, [r7, #8]
 8003252:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003254:	2101      	movs	r1, #1
 8003256:	69b8      	ldr	r0, [r7, #24]
 8003258:	f7ff fefe 	bl	8003058 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	78fa      	ldrb	r2, [r7, #3]
 8003260:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003264:	bf00      	nop
 8003266:	3710      	adds	r7, #16
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b08e      	sub	sp, #56	@ 0x38
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
 8003278:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800327a:	2300      	movs	r3, #0
 800327c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003284:	2b00      	cmp	r3, #0
 8003286:	d10b      	bne.n	80032a0 <xQueueGenericSend+0x34>
	__asm volatile
 8003288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800328c:	f383 8811 	msr	BASEPRI, r3
 8003290:	f3bf 8f6f 	isb	sy
 8003294:	f3bf 8f4f 	dsb	sy
 8003298:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800329a:	bf00      	nop
 800329c:	bf00      	nop
 800329e:	e7fd      	b.n	800329c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d103      	bne.n	80032ae <xQueueGenericSend+0x42>
 80032a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <xQueueGenericSend+0x46>
 80032ae:	2301      	movs	r3, #1
 80032b0:	e000      	b.n	80032b4 <xQueueGenericSend+0x48>
 80032b2:	2300      	movs	r3, #0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d10b      	bne.n	80032d0 <xQueueGenericSend+0x64>
	__asm volatile
 80032b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032bc:	f383 8811 	msr	BASEPRI, r3
 80032c0:	f3bf 8f6f 	isb	sy
 80032c4:	f3bf 8f4f 	dsb	sy
 80032c8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80032ca:	bf00      	nop
 80032cc:	bf00      	nop
 80032ce:	e7fd      	b.n	80032cc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d103      	bne.n	80032de <xQueueGenericSend+0x72>
 80032d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d101      	bne.n	80032e2 <xQueueGenericSend+0x76>
 80032de:	2301      	movs	r3, #1
 80032e0:	e000      	b.n	80032e4 <xQueueGenericSend+0x78>
 80032e2:	2300      	movs	r3, #0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d10b      	bne.n	8003300 <xQueueGenericSend+0x94>
	__asm volatile
 80032e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032ec:	f383 8811 	msr	BASEPRI, r3
 80032f0:	f3bf 8f6f 	isb	sy
 80032f4:	f3bf 8f4f 	dsb	sy
 80032f8:	623b      	str	r3, [r7, #32]
}
 80032fa:	bf00      	nop
 80032fc:	bf00      	nop
 80032fe:	e7fd      	b.n	80032fc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003300:	f001 f9fc 	bl	80046fc <xTaskGetSchedulerState>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d102      	bne.n	8003310 <xQueueGenericSend+0xa4>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d101      	bne.n	8003314 <xQueueGenericSend+0xa8>
 8003310:	2301      	movs	r3, #1
 8003312:	e000      	b.n	8003316 <xQueueGenericSend+0xaa>
 8003314:	2300      	movs	r3, #0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10b      	bne.n	8003332 <xQueueGenericSend+0xc6>
	__asm volatile
 800331a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800331e:	f383 8811 	msr	BASEPRI, r3
 8003322:	f3bf 8f6f 	isb	sy
 8003326:	f3bf 8f4f 	dsb	sy
 800332a:	61fb      	str	r3, [r7, #28]
}
 800332c:	bf00      	nop
 800332e:	bf00      	nop
 8003330:	e7fd      	b.n	800332e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003332:	f001 ff51 	bl	80051d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003338:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800333a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800333c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800333e:	429a      	cmp	r2, r3
 8003340:	d302      	bcc.n	8003348 <xQueueGenericSend+0xdc>
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	2b02      	cmp	r3, #2
 8003346:	d129      	bne.n	800339c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	68b9      	ldr	r1, [r7, #8]
 800334c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800334e:	f000 fa0f 	bl	8003770 <prvCopyDataToQueue>
 8003352:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003358:	2b00      	cmp	r3, #0
 800335a:	d010      	beq.n	800337e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800335c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800335e:	3324      	adds	r3, #36	@ 0x24
 8003360:	4618      	mov	r0, r3
 8003362:	f001 f805 	bl	8004370 <xTaskRemoveFromEventList>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d013      	beq.n	8003394 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800336c:	4b3f      	ldr	r3, [pc, #252]	@ (800346c <xQueueGenericSend+0x200>)
 800336e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003372:	601a      	str	r2, [r3, #0]
 8003374:	f3bf 8f4f 	dsb	sy
 8003378:	f3bf 8f6f 	isb	sy
 800337c:	e00a      	b.n	8003394 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800337e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003380:	2b00      	cmp	r3, #0
 8003382:	d007      	beq.n	8003394 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003384:	4b39      	ldr	r3, [pc, #228]	@ (800346c <xQueueGenericSend+0x200>)
 8003386:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	f3bf 8f4f 	dsb	sy
 8003390:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003394:	f001 ff52 	bl	800523c <vPortExitCritical>
				return pdPASS;
 8003398:	2301      	movs	r3, #1
 800339a:	e063      	b.n	8003464 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d103      	bne.n	80033aa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80033a2:	f001 ff4b 	bl	800523c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80033a6:	2300      	movs	r3, #0
 80033a8:	e05c      	b.n	8003464 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80033aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d106      	bne.n	80033be <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80033b0:	f107 0314 	add.w	r3, r7, #20
 80033b4:	4618      	mov	r0, r3
 80033b6:	f001 f83f 	bl	8004438 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80033ba:	2301      	movs	r3, #1
 80033bc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80033be:	f001 ff3d 	bl	800523c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80033c2:	f000 fda7 	bl	8003f14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80033c6:	f001 ff07 	bl	80051d8 <vPortEnterCritical>
 80033ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80033d0:	b25b      	sxtb	r3, r3
 80033d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d6:	d103      	bne.n	80033e0 <xQueueGenericSend+0x174>
 80033d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80033e6:	b25b      	sxtb	r3, r3
 80033e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ec:	d103      	bne.n	80033f6 <xQueueGenericSend+0x18a>
 80033ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80033f6:	f001 ff21 	bl	800523c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80033fa:	1d3a      	adds	r2, r7, #4
 80033fc:	f107 0314 	add.w	r3, r7, #20
 8003400:	4611      	mov	r1, r2
 8003402:	4618      	mov	r0, r3
 8003404:	f001 f82e 	bl	8004464 <xTaskCheckForTimeOut>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d124      	bne.n	8003458 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800340e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003410:	f000 faa6 	bl	8003960 <prvIsQueueFull>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d018      	beq.n	800344c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800341a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800341c:	3310      	adds	r3, #16
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	4611      	mov	r1, r2
 8003422:	4618      	mov	r0, r3
 8003424:	f000 ff52 	bl	80042cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003428:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800342a:	f000 fa31 	bl	8003890 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800342e:	f000 fd7f 	bl	8003f30 <xTaskResumeAll>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	f47f af7c 	bne.w	8003332 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800343a:	4b0c      	ldr	r3, [pc, #48]	@ (800346c <xQueueGenericSend+0x200>)
 800343c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	f3bf 8f4f 	dsb	sy
 8003446:	f3bf 8f6f 	isb	sy
 800344a:	e772      	b.n	8003332 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800344c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800344e:	f000 fa1f 	bl	8003890 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003452:	f000 fd6d 	bl	8003f30 <xTaskResumeAll>
 8003456:	e76c      	b.n	8003332 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003458:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800345a:	f000 fa19 	bl	8003890 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800345e:	f000 fd67 	bl	8003f30 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003462:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003464:	4618      	mov	r0, r3
 8003466:	3738      	adds	r7, #56	@ 0x38
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	e000ed04 	.word	0xe000ed04

08003470 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b090      	sub	sp, #64	@ 0x40
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
 800347c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003484:	2b00      	cmp	r3, #0
 8003486:	d10b      	bne.n	80034a0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800348c:	f383 8811 	msr	BASEPRI, r3
 8003490:	f3bf 8f6f 	isb	sy
 8003494:	f3bf 8f4f 	dsb	sy
 8003498:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800349a:	bf00      	nop
 800349c:	bf00      	nop
 800349e:	e7fd      	b.n	800349c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d103      	bne.n	80034ae <xQueueGenericSendFromISR+0x3e>
 80034a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <xQueueGenericSendFromISR+0x42>
 80034ae:	2301      	movs	r3, #1
 80034b0:	e000      	b.n	80034b4 <xQueueGenericSendFromISR+0x44>
 80034b2:	2300      	movs	r3, #0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d10b      	bne.n	80034d0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80034b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034bc:	f383 8811 	msr	BASEPRI, r3
 80034c0:	f3bf 8f6f 	isb	sy
 80034c4:	f3bf 8f4f 	dsb	sy
 80034c8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80034ca:	bf00      	nop
 80034cc:	bf00      	nop
 80034ce:	e7fd      	b.n	80034cc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d103      	bne.n	80034de <xQueueGenericSendFromISR+0x6e>
 80034d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d101      	bne.n	80034e2 <xQueueGenericSendFromISR+0x72>
 80034de:	2301      	movs	r3, #1
 80034e0:	e000      	b.n	80034e4 <xQueueGenericSendFromISR+0x74>
 80034e2:	2300      	movs	r3, #0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10b      	bne.n	8003500 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80034e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034ec:	f383 8811 	msr	BASEPRI, r3
 80034f0:	f3bf 8f6f 	isb	sy
 80034f4:	f3bf 8f4f 	dsb	sy
 80034f8:	623b      	str	r3, [r7, #32]
}
 80034fa:	bf00      	nop
 80034fc:	bf00      	nop
 80034fe:	e7fd      	b.n	80034fc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003500:	f001 ff4a 	bl	8005398 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003504:	f3ef 8211 	mrs	r2, BASEPRI
 8003508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800350c:	f383 8811 	msr	BASEPRI, r3
 8003510:	f3bf 8f6f 	isb	sy
 8003514:	f3bf 8f4f 	dsb	sy
 8003518:	61fa      	str	r2, [r7, #28]
 800351a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800351c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800351e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003522:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003528:	429a      	cmp	r2, r3
 800352a:	d302      	bcc.n	8003532 <xQueueGenericSendFromISR+0xc2>
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	2b02      	cmp	r3, #2
 8003530:	d12f      	bne.n	8003592 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003534:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003538:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800353c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800353e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003540:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	68b9      	ldr	r1, [r7, #8]
 8003546:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003548:	f000 f912 	bl	8003770 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800354c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003554:	d112      	bne.n	800357c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800355a:	2b00      	cmp	r3, #0
 800355c:	d016      	beq.n	800358c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800355e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003560:	3324      	adds	r3, #36	@ 0x24
 8003562:	4618      	mov	r0, r3
 8003564:	f000 ff04 	bl	8004370 <xTaskRemoveFromEventList>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00e      	beq.n	800358c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00b      	beq.n	800358c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	601a      	str	r2, [r3, #0]
 800357a:	e007      	b.n	800358c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800357c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003580:	3301      	adds	r3, #1
 8003582:	b2db      	uxtb	r3, r3
 8003584:	b25a      	sxtb	r2, r3
 8003586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003588:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800358c:	2301      	movs	r3, #1
 800358e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003590:	e001      	b.n	8003596 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003592:	2300      	movs	r3, #0
 8003594:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003598:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80035a0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80035a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3740      	adds	r7, #64	@ 0x40
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b08c      	sub	sp, #48	@ 0x30
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80035b8:	2300      	movs	r3, #0
 80035ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80035c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10b      	bne.n	80035de <xQueueReceive+0x32>
	__asm volatile
 80035c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ca:	f383 8811 	msr	BASEPRI, r3
 80035ce:	f3bf 8f6f 	isb	sy
 80035d2:	f3bf 8f4f 	dsb	sy
 80035d6:	623b      	str	r3, [r7, #32]
}
 80035d8:	bf00      	nop
 80035da:	bf00      	nop
 80035dc:	e7fd      	b.n	80035da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d103      	bne.n	80035ec <xQueueReceive+0x40>
 80035e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d101      	bne.n	80035f0 <xQueueReceive+0x44>
 80035ec:	2301      	movs	r3, #1
 80035ee:	e000      	b.n	80035f2 <xQueueReceive+0x46>
 80035f0:	2300      	movs	r3, #0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10b      	bne.n	800360e <xQueueReceive+0x62>
	__asm volatile
 80035f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035fa:	f383 8811 	msr	BASEPRI, r3
 80035fe:	f3bf 8f6f 	isb	sy
 8003602:	f3bf 8f4f 	dsb	sy
 8003606:	61fb      	str	r3, [r7, #28]
}
 8003608:	bf00      	nop
 800360a:	bf00      	nop
 800360c:	e7fd      	b.n	800360a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800360e:	f001 f875 	bl	80046fc <xTaskGetSchedulerState>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d102      	bne.n	800361e <xQueueReceive+0x72>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <xQueueReceive+0x76>
 800361e:	2301      	movs	r3, #1
 8003620:	e000      	b.n	8003624 <xQueueReceive+0x78>
 8003622:	2300      	movs	r3, #0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d10b      	bne.n	8003640 <xQueueReceive+0x94>
	__asm volatile
 8003628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800362c:	f383 8811 	msr	BASEPRI, r3
 8003630:	f3bf 8f6f 	isb	sy
 8003634:	f3bf 8f4f 	dsb	sy
 8003638:	61bb      	str	r3, [r7, #24]
}
 800363a:	bf00      	nop
 800363c:	bf00      	nop
 800363e:	e7fd      	b.n	800363c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003640:	f001 fdca 	bl	80051d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003648:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800364a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800364c:	2b00      	cmp	r3, #0
 800364e:	d01f      	beq.n	8003690 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003650:	68b9      	ldr	r1, [r7, #8]
 8003652:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003654:	f000 f8f6 	bl	8003844 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800365a:	1e5a      	subs	r2, r3, #1
 800365c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800365e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00f      	beq.n	8003688 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800366a:	3310      	adds	r3, #16
 800366c:	4618      	mov	r0, r3
 800366e:	f000 fe7f 	bl	8004370 <xTaskRemoveFromEventList>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d007      	beq.n	8003688 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003678:	4b3c      	ldr	r3, [pc, #240]	@ (800376c <xQueueReceive+0x1c0>)
 800367a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	f3bf 8f4f 	dsb	sy
 8003684:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003688:	f001 fdd8 	bl	800523c <vPortExitCritical>
				return pdPASS;
 800368c:	2301      	movs	r3, #1
 800368e:	e069      	b.n	8003764 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d103      	bne.n	800369e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003696:	f001 fdd1 	bl	800523c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800369a:	2300      	movs	r3, #0
 800369c:	e062      	b.n	8003764 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800369e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d106      	bne.n	80036b2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80036a4:	f107 0310 	add.w	r3, r7, #16
 80036a8:	4618      	mov	r0, r3
 80036aa:	f000 fec5 	bl	8004438 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80036ae:	2301      	movs	r3, #1
 80036b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80036b2:	f001 fdc3 	bl	800523c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80036b6:	f000 fc2d 	bl	8003f14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80036ba:	f001 fd8d 	bl	80051d8 <vPortEnterCritical>
 80036be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80036c4:	b25b      	sxtb	r3, r3
 80036c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ca:	d103      	bne.n	80036d4 <xQueueReceive+0x128>
 80036cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80036da:	b25b      	sxtb	r3, r3
 80036dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e0:	d103      	bne.n	80036ea <xQueueReceive+0x13e>
 80036e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80036ea:	f001 fda7 	bl	800523c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80036ee:	1d3a      	adds	r2, r7, #4
 80036f0:	f107 0310 	add.w	r3, r7, #16
 80036f4:	4611      	mov	r1, r2
 80036f6:	4618      	mov	r0, r3
 80036f8:	f000 feb4 	bl	8004464 <xTaskCheckForTimeOut>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d123      	bne.n	800374a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003702:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003704:	f000 f916 	bl	8003934 <prvIsQueueEmpty>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d017      	beq.n	800373e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800370e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003710:	3324      	adds	r3, #36	@ 0x24
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	4611      	mov	r1, r2
 8003716:	4618      	mov	r0, r3
 8003718:	f000 fdd8 	bl	80042cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800371c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800371e:	f000 f8b7 	bl	8003890 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003722:	f000 fc05 	bl	8003f30 <xTaskResumeAll>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d189      	bne.n	8003640 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800372c:	4b0f      	ldr	r3, [pc, #60]	@ (800376c <xQueueReceive+0x1c0>)
 800372e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	f3bf 8f4f 	dsb	sy
 8003738:	f3bf 8f6f 	isb	sy
 800373c:	e780      	b.n	8003640 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800373e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003740:	f000 f8a6 	bl	8003890 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003744:	f000 fbf4 	bl	8003f30 <xTaskResumeAll>
 8003748:	e77a      	b.n	8003640 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800374a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800374c:	f000 f8a0 	bl	8003890 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003750:	f000 fbee 	bl	8003f30 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003754:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003756:	f000 f8ed 	bl	8003934 <prvIsQueueEmpty>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	f43f af6f 	beq.w	8003640 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003762:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003764:	4618      	mov	r0, r3
 8003766:	3730      	adds	r7, #48	@ 0x30
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	e000ed04 	.word	0xe000ed04

08003770 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800377c:	2300      	movs	r3, #0
 800377e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003784:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10d      	bne.n	80037aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d14d      	bne.n	8003832 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	4618      	mov	r0, r3
 800379c:	f000 ffcc 	bl	8004738 <xTaskPriorityDisinherit>
 80037a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	609a      	str	r2, [r3, #8]
 80037a8:	e043      	b.n	8003832 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d119      	bne.n	80037e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6858      	ldr	r0, [r3, #4]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b8:	461a      	mov	r2, r3
 80037ba:	68b9      	ldr	r1, [r7, #8]
 80037bc:	f002 f8a0 	bl	8005900 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c8:	441a      	add	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d32b      	bcc.n	8003832 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	605a      	str	r2, [r3, #4]
 80037e2:	e026      	b.n	8003832 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	68d8      	ldr	r0, [r3, #12]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ec:	461a      	mov	r2, r3
 80037ee:	68b9      	ldr	r1, [r7, #8]
 80037f0:	f002 f886 	bl	8005900 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	68da      	ldr	r2, [r3, #12]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fc:	425b      	negs	r3, r3
 80037fe:	441a      	add	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	68da      	ldr	r2, [r3, #12]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	429a      	cmp	r2, r3
 800380e:	d207      	bcs.n	8003820 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	689a      	ldr	r2, [r3, #8]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003818:	425b      	negs	r3, r3
 800381a:	441a      	add	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b02      	cmp	r3, #2
 8003824:	d105      	bne.n	8003832 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d002      	beq.n	8003832 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	3b01      	subs	r3, #1
 8003830:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	1c5a      	adds	r2, r3, #1
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800383a:	697b      	ldr	r3, [r7, #20]
}
 800383c:	4618      	mov	r0, r3
 800383e:	3718      	adds	r7, #24
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003852:	2b00      	cmp	r3, #0
 8003854:	d018      	beq.n	8003888 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68da      	ldr	r2, [r3, #12]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800385e:	441a      	add	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	68da      	ldr	r2, [r3, #12]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	429a      	cmp	r2, r3
 800386e:	d303      	bcc.n	8003878 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68d9      	ldr	r1, [r3, #12]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003880:	461a      	mov	r2, r3
 8003882:	6838      	ldr	r0, [r7, #0]
 8003884:	f002 f83c 	bl	8005900 <memcpy>
	}
}
 8003888:	bf00      	nop
 800388a:	3708      	adds	r7, #8
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003898:	f001 fc9e 	bl	80051d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80038a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80038a4:	e011      	b.n	80038ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d012      	beq.n	80038d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	3324      	adds	r3, #36	@ 0x24
 80038b2:	4618      	mov	r0, r3
 80038b4:	f000 fd5c 	bl	8004370 <xTaskRemoveFromEventList>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80038be:	f000 fe35 	bl	800452c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80038c2:	7bfb      	ldrb	r3, [r7, #15]
 80038c4:	3b01      	subs	r3, #1
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80038ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	dce9      	bgt.n	80038a6 <prvUnlockQueue+0x16>
 80038d2:	e000      	b.n	80038d6 <prvUnlockQueue+0x46>
					break;
 80038d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	22ff      	movs	r2, #255	@ 0xff
 80038da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80038de:	f001 fcad 	bl	800523c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80038e2:	f001 fc79 	bl	80051d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80038ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80038ee:	e011      	b.n	8003914 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d012      	beq.n	800391e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3310      	adds	r3, #16
 80038fc:	4618      	mov	r0, r3
 80038fe:	f000 fd37 	bl	8004370 <xTaskRemoveFromEventList>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d001      	beq.n	800390c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003908:	f000 fe10 	bl	800452c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800390c:	7bbb      	ldrb	r3, [r7, #14]
 800390e:	3b01      	subs	r3, #1
 8003910:	b2db      	uxtb	r3, r3
 8003912:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003914:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003918:	2b00      	cmp	r3, #0
 800391a:	dce9      	bgt.n	80038f0 <prvUnlockQueue+0x60>
 800391c:	e000      	b.n	8003920 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800391e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	22ff      	movs	r2, #255	@ 0xff
 8003924:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003928:	f001 fc88 	bl	800523c <vPortExitCritical>
}
 800392c:	bf00      	nop
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800393c:	f001 fc4c 	bl	80051d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003944:	2b00      	cmp	r3, #0
 8003946:	d102      	bne.n	800394e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003948:	2301      	movs	r3, #1
 800394a:	60fb      	str	r3, [r7, #12]
 800394c:	e001      	b.n	8003952 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800394e:	2300      	movs	r3, #0
 8003950:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003952:	f001 fc73 	bl	800523c <vPortExitCritical>

	return xReturn;
 8003956:	68fb      	ldr	r3, [r7, #12]
}
 8003958:	4618      	mov	r0, r3
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003968:	f001 fc36 	bl	80051d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003974:	429a      	cmp	r2, r3
 8003976:	d102      	bne.n	800397e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003978:	2301      	movs	r3, #1
 800397a:	60fb      	str	r3, [r7, #12]
 800397c:	e001      	b.n	8003982 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800397e:	2300      	movs	r3, #0
 8003980:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003982:	f001 fc5b 	bl	800523c <vPortExitCritical>

	return xReturn;
 8003986:	68fb      	ldr	r3, [r7, #12]
}
 8003988:	4618      	mov	r0, r3
 800398a:	3710      	adds	r7, #16
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800399a:	2300      	movs	r3, #0
 800399c:	60fb      	str	r3, [r7, #12]
 800399e:	e014      	b.n	80039ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80039a0:	4a0f      	ldr	r2, [pc, #60]	@ (80039e0 <vQueueAddToRegistry+0x50>)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d10b      	bne.n	80039c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80039ac:	490c      	ldr	r1, [pc, #48]	@ (80039e0 <vQueueAddToRegistry+0x50>)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80039b6:	4a0a      	ldr	r2, [pc, #40]	@ (80039e0 <vQueueAddToRegistry+0x50>)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	4413      	add	r3, r2
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80039c2:	e006      	b.n	80039d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	3301      	adds	r3, #1
 80039c8:	60fb      	str	r3, [r7, #12]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2b07      	cmp	r3, #7
 80039ce:	d9e7      	bls.n	80039a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80039d0:	bf00      	nop
 80039d2:	bf00      	nop
 80039d4:	3714      	adds	r7, #20
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	20000934 	.word	0x20000934

080039e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80039f4:	f001 fbf0 	bl	80051d8 <vPortEnterCritical>
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80039fe:	b25b      	sxtb	r3, r3
 8003a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a04:	d103      	bne.n	8003a0e <vQueueWaitForMessageRestricted+0x2a>
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a14:	b25b      	sxtb	r3, r3
 8003a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1a:	d103      	bne.n	8003a24 <vQueueWaitForMessageRestricted+0x40>
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a24:	f001 fc0a 	bl	800523c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d106      	bne.n	8003a3e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	3324      	adds	r3, #36	@ 0x24
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	68b9      	ldr	r1, [r7, #8]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f000 fc6d 	bl	8004318 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003a3e:	6978      	ldr	r0, [r7, #20]
 8003a40:	f7ff ff26 	bl	8003890 <prvUnlockQueue>
	}
 8003a44:	bf00      	nop
 8003a46:	3718      	adds	r7, #24
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b08e      	sub	sp, #56	@ 0x38
 8003a50:	af04      	add	r7, sp, #16
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
 8003a58:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003a5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d10b      	bne.n	8003a78 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a64:	f383 8811 	msr	BASEPRI, r3
 8003a68:	f3bf 8f6f 	isb	sy
 8003a6c:	f3bf 8f4f 	dsb	sy
 8003a70:	623b      	str	r3, [r7, #32]
}
 8003a72:	bf00      	nop
 8003a74:	bf00      	nop
 8003a76:	e7fd      	b.n	8003a74 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003a78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10b      	bne.n	8003a96 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a82:	f383 8811 	msr	BASEPRI, r3
 8003a86:	f3bf 8f6f 	isb	sy
 8003a8a:	f3bf 8f4f 	dsb	sy
 8003a8e:	61fb      	str	r3, [r7, #28]
}
 8003a90:	bf00      	nop
 8003a92:	bf00      	nop
 8003a94:	e7fd      	b.n	8003a92 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003a96:	23a8      	movs	r3, #168	@ 0xa8
 8003a98:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	2ba8      	cmp	r3, #168	@ 0xa8
 8003a9e:	d00b      	beq.n	8003ab8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aa4:	f383 8811 	msr	BASEPRI, r3
 8003aa8:	f3bf 8f6f 	isb	sy
 8003aac:	f3bf 8f4f 	dsb	sy
 8003ab0:	61bb      	str	r3, [r7, #24]
}
 8003ab2:	bf00      	nop
 8003ab4:	bf00      	nop
 8003ab6:	e7fd      	b.n	8003ab4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003ab8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d01e      	beq.n	8003afe <xTaskCreateStatic+0xb2>
 8003ac0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d01b      	beq.n	8003afe <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ac8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003acc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003ace:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003ad8:	2300      	movs	r3, #0
 8003ada:	9303      	str	r3, [sp, #12]
 8003adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ade:	9302      	str	r3, [sp, #8]
 8003ae0:	f107 0314 	add.w	r3, r7, #20
 8003ae4:	9301      	str	r3, [sp, #4]
 8003ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ae8:	9300      	str	r3, [sp, #0]
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	68b9      	ldr	r1, [r7, #8]
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f000 f851 	bl	8003b98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003af6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003af8:	f000 f8f6 	bl	8003ce8 <prvAddNewTaskToReadyList>
 8003afc:	e001      	b.n	8003b02 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003afe:	2300      	movs	r3, #0
 8003b00:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003b02:	697b      	ldr	r3, [r7, #20]
	}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3728      	adds	r7, #40	@ 0x28
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b08c      	sub	sp, #48	@ 0x30
 8003b10:	af04      	add	r7, sp, #16
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	603b      	str	r3, [r7, #0]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003b1c:	88fb      	ldrh	r3, [r7, #6]
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4618      	mov	r0, r3
 8003b22:	f001 fc7b 	bl	800541c <pvPortMalloc>
 8003b26:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00e      	beq.n	8003b4c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003b2e:	20a8      	movs	r0, #168	@ 0xa8
 8003b30:	f001 fc74 	bl	800541c <pvPortMalloc>
 8003b34:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d003      	beq.n	8003b44 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b42:	e005      	b.n	8003b50 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003b44:	6978      	ldr	r0, [r7, #20]
 8003b46:	f001 fd37 	bl	80055b8 <vPortFree>
 8003b4a:	e001      	b.n	8003b50 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d017      	beq.n	8003b86 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b5e:	88fa      	ldrh	r2, [r7, #6]
 8003b60:	2300      	movs	r3, #0
 8003b62:	9303      	str	r3, [sp, #12]
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	9302      	str	r3, [sp, #8]
 8003b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b6a:	9301      	str	r3, [sp, #4]
 8003b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b6e:	9300      	str	r3, [sp, #0]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	68b9      	ldr	r1, [r7, #8]
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f000 f80f 	bl	8003b98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b7a:	69f8      	ldr	r0, [r7, #28]
 8003b7c:	f000 f8b4 	bl	8003ce8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003b80:	2301      	movs	r3, #1
 8003b82:	61bb      	str	r3, [r7, #24]
 8003b84:	e002      	b.n	8003b8c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b86:	f04f 33ff 	mov.w	r3, #4294967295
 8003b8a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003b8c:	69bb      	ldr	r3, [r7, #24]
	}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3720      	adds	r7, #32
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
	...

08003b98 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b088      	sub	sp, #32
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
 8003ba4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	461a      	mov	r2, r3
 8003bb0:	21a5      	movs	r1, #165	@ 0xa5
 8003bb2:	f001 fe21 	bl	80057f8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	4413      	add	r3, r2
 8003bc6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	f023 0307 	bic.w	r3, r3, #7
 8003bce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	f003 0307 	and.w	r3, r3, #7
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00b      	beq.n	8003bf2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bde:	f383 8811 	msr	BASEPRI, r3
 8003be2:	f3bf 8f6f 	isb	sy
 8003be6:	f3bf 8f4f 	dsb	sy
 8003bea:	617b      	str	r3, [r7, #20]
}
 8003bec:	bf00      	nop
 8003bee:	bf00      	nop
 8003bf0:	e7fd      	b.n	8003bee <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d01f      	beq.n	8003c38 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	61fb      	str	r3, [r7, #28]
 8003bfc:	e012      	b.n	8003c24 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	4413      	add	r3, r2
 8003c04:	7819      	ldrb	r1, [r3, #0]
 8003c06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	3334      	adds	r3, #52	@ 0x34
 8003c0e:	460a      	mov	r2, r1
 8003c10:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	4413      	add	r3, r2
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d006      	beq.n	8003c2c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	3301      	adds	r3, #1
 8003c22:	61fb      	str	r3, [r7, #28]
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	2b0f      	cmp	r3, #15
 8003c28:	d9e9      	bls.n	8003bfe <prvInitialiseNewTask+0x66>
 8003c2a:	e000      	b.n	8003c2e <prvInitialiseNewTask+0x96>
			{
				break;
 8003c2c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c36:	e003      	b.n	8003c40 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c42:	2b37      	cmp	r3, #55	@ 0x37
 8003c44:	d901      	bls.n	8003c4a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003c46:	2337      	movs	r3, #55	@ 0x37
 8003c48:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c4e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c54:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c58:	2200      	movs	r2, #0
 8003c5a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c5e:	3304      	adds	r3, #4
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7ff f965 	bl	8002f30 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c68:	3318      	adds	r3, #24
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7ff f960 	bl	8002f30 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c74:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c78:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c7e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c84:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c98:	3354      	adds	r3, #84	@ 0x54
 8003c9a:	224c      	movs	r2, #76	@ 0x4c
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f001 fdaa 	bl	80057f8 <memset>
 8003ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ca6:	4a0d      	ldr	r2, [pc, #52]	@ (8003cdc <prvInitialiseNewTask+0x144>)
 8003ca8:	659a      	str	r2, [r3, #88]	@ 0x58
 8003caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cac:	4a0c      	ldr	r2, [pc, #48]	@ (8003ce0 <prvInitialiseNewTask+0x148>)
 8003cae:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb2:	4a0c      	ldr	r2, [pc, #48]	@ (8003ce4 <prvInitialiseNewTask+0x14c>)
 8003cb4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003cb6:	683a      	ldr	r2, [r7, #0]
 8003cb8:	68f9      	ldr	r1, [r7, #12]
 8003cba:	69b8      	ldr	r0, [r7, #24]
 8003cbc:	f001 f95a 	bl	8004f74 <pxPortInitialiseStack>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d002      	beq.n	8003cd2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cd0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003cd2:	bf00      	nop
 8003cd4:	3720      	adds	r7, #32
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	20004bc8 	.word	0x20004bc8
 8003ce0:	20004c30 	.word	0x20004c30
 8003ce4:	20004c98 	.word	0x20004c98

08003ce8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003cf0:	f001 fa72 	bl	80051d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003cf4:	4b2d      	ldr	r3, [pc, #180]	@ (8003dac <prvAddNewTaskToReadyList+0xc4>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	4a2c      	ldr	r2, [pc, #176]	@ (8003dac <prvAddNewTaskToReadyList+0xc4>)
 8003cfc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003cfe:	4b2c      	ldr	r3, [pc, #176]	@ (8003db0 <prvAddNewTaskToReadyList+0xc8>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d109      	bne.n	8003d1a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003d06:	4a2a      	ldr	r2, [pc, #168]	@ (8003db0 <prvAddNewTaskToReadyList+0xc8>)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003d0c:	4b27      	ldr	r3, [pc, #156]	@ (8003dac <prvAddNewTaskToReadyList+0xc4>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d110      	bne.n	8003d36 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003d14:	f000 fc2e 	bl	8004574 <prvInitialiseTaskLists>
 8003d18:	e00d      	b.n	8003d36 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003d1a:	4b26      	ldr	r3, [pc, #152]	@ (8003db4 <prvAddNewTaskToReadyList+0xcc>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d109      	bne.n	8003d36 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003d22:	4b23      	ldr	r3, [pc, #140]	@ (8003db0 <prvAddNewTaskToReadyList+0xc8>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d802      	bhi.n	8003d36 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003d30:	4a1f      	ldr	r2, [pc, #124]	@ (8003db0 <prvAddNewTaskToReadyList+0xc8>)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003d36:	4b20      	ldr	r3, [pc, #128]	@ (8003db8 <prvAddNewTaskToReadyList+0xd0>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	4a1e      	ldr	r2, [pc, #120]	@ (8003db8 <prvAddNewTaskToReadyList+0xd0>)
 8003d3e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003d40:	4b1d      	ldr	r3, [pc, #116]	@ (8003db8 <prvAddNewTaskToReadyList+0xd0>)
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d4c:	4b1b      	ldr	r3, [pc, #108]	@ (8003dbc <prvAddNewTaskToReadyList+0xd4>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d903      	bls.n	8003d5c <prvAddNewTaskToReadyList+0x74>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d58:	4a18      	ldr	r2, [pc, #96]	@ (8003dbc <prvAddNewTaskToReadyList+0xd4>)
 8003d5a:	6013      	str	r3, [r2, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d60:	4613      	mov	r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	4413      	add	r3, r2
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	4a15      	ldr	r2, [pc, #84]	@ (8003dc0 <prvAddNewTaskToReadyList+0xd8>)
 8003d6a:	441a      	add	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	3304      	adds	r3, #4
 8003d70:	4619      	mov	r1, r3
 8003d72:	4610      	mov	r0, r2
 8003d74:	f7ff f8e9 	bl	8002f4a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003d78:	f001 fa60 	bl	800523c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003d7c:	4b0d      	ldr	r3, [pc, #52]	@ (8003db4 <prvAddNewTaskToReadyList+0xcc>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00e      	beq.n	8003da2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003d84:	4b0a      	ldr	r3, [pc, #40]	@ (8003db0 <prvAddNewTaskToReadyList+0xc8>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d207      	bcs.n	8003da2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003d92:	4b0c      	ldr	r3, [pc, #48]	@ (8003dc4 <prvAddNewTaskToReadyList+0xdc>)
 8003d94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d98:	601a      	str	r2, [r3, #0]
 8003d9a:	f3bf 8f4f 	dsb	sy
 8003d9e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003da2:	bf00      	nop
 8003da4:	3708      	adds	r7, #8
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	20000e48 	.word	0x20000e48
 8003db0:	20000974 	.word	0x20000974
 8003db4:	20000e54 	.word	0x20000e54
 8003db8:	20000e64 	.word	0x20000e64
 8003dbc:	20000e50 	.word	0x20000e50
 8003dc0:	20000978 	.word	0x20000978
 8003dc4:	e000ed04 	.word	0xe000ed04

08003dc8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d018      	beq.n	8003e0c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003dda:	4b14      	ldr	r3, [pc, #80]	@ (8003e2c <vTaskDelay+0x64>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00b      	beq.n	8003dfa <vTaskDelay+0x32>
	__asm volatile
 8003de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003de6:	f383 8811 	msr	BASEPRI, r3
 8003dea:	f3bf 8f6f 	isb	sy
 8003dee:	f3bf 8f4f 	dsb	sy
 8003df2:	60bb      	str	r3, [r7, #8]
}
 8003df4:	bf00      	nop
 8003df6:	bf00      	nop
 8003df8:	e7fd      	b.n	8003df6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003dfa:	f000 f88b 	bl	8003f14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003dfe:	2100      	movs	r1, #0
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 fd09 	bl	8004818 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003e06:	f000 f893 	bl	8003f30 <xTaskResumeAll>
 8003e0a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d107      	bne.n	8003e22 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003e12:	4b07      	ldr	r3, [pc, #28]	@ (8003e30 <vTaskDelay+0x68>)
 8003e14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	f3bf 8f4f 	dsb	sy
 8003e1e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003e22:	bf00      	nop
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	20000e70 	.word	0x20000e70
 8003e30:	e000ed04 	.word	0xe000ed04

08003e34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b08a      	sub	sp, #40	@ 0x28
 8003e38:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003e42:	463a      	mov	r2, r7
 8003e44:	1d39      	adds	r1, r7, #4
 8003e46:	f107 0308 	add.w	r3, r7, #8
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7ff f81c 	bl	8002e88 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003e50:	6839      	ldr	r1, [r7, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	9202      	str	r2, [sp, #8]
 8003e58:	9301      	str	r3, [sp, #4]
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	2300      	movs	r3, #0
 8003e60:	460a      	mov	r2, r1
 8003e62:	4924      	ldr	r1, [pc, #144]	@ (8003ef4 <vTaskStartScheduler+0xc0>)
 8003e64:	4824      	ldr	r0, [pc, #144]	@ (8003ef8 <vTaskStartScheduler+0xc4>)
 8003e66:	f7ff fdf1 	bl	8003a4c <xTaskCreateStatic>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	4a23      	ldr	r2, [pc, #140]	@ (8003efc <vTaskStartScheduler+0xc8>)
 8003e6e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003e70:	4b22      	ldr	r3, [pc, #136]	@ (8003efc <vTaskStartScheduler+0xc8>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d002      	beq.n	8003e7e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	617b      	str	r3, [r7, #20]
 8003e7c:	e001      	b.n	8003e82 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d102      	bne.n	8003e8e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003e88:	f000 fd1a 	bl	80048c0 <xTimerCreateTimerTask>
 8003e8c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d11b      	bne.n	8003ecc <vTaskStartScheduler+0x98>
	__asm volatile
 8003e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e98:	f383 8811 	msr	BASEPRI, r3
 8003e9c:	f3bf 8f6f 	isb	sy
 8003ea0:	f3bf 8f4f 	dsb	sy
 8003ea4:	613b      	str	r3, [r7, #16]
}
 8003ea6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003ea8:	4b15      	ldr	r3, [pc, #84]	@ (8003f00 <vTaskStartScheduler+0xcc>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	3354      	adds	r3, #84	@ 0x54
 8003eae:	4a15      	ldr	r2, [pc, #84]	@ (8003f04 <vTaskStartScheduler+0xd0>)
 8003eb0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003eb2:	4b15      	ldr	r3, [pc, #84]	@ (8003f08 <vTaskStartScheduler+0xd4>)
 8003eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8003eb8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003eba:	4b14      	ldr	r3, [pc, #80]	@ (8003f0c <vTaskStartScheduler+0xd8>)
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003ec0:	4b13      	ldr	r3, [pc, #76]	@ (8003f10 <vTaskStartScheduler+0xdc>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003ec6:	f001 f8e3 	bl	8005090 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003eca:	e00f      	b.n	8003eec <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed2:	d10b      	bne.n	8003eec <vTaskStartScheduler+0xb8>
	__asm volatile
 8003ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ed8:	f383 8811 	msr	BASEPRI, r3
 8003edc:	f3bf 8f6f 	isb	sy
 8003ee0:	f3bf 8f4f 	dsb	sy
 8003ee4:	60fb      	str	r3, [r7, #12]
}
 8003ee6:	bf00      	nop
 8003ee8:	bf00      	nop
 8003eea:	e7fd      	b.n	8003ee8 <vTaskStartScheduler+0xb4>
}
 8003eec:	bf00      	nop
 8003eee:	3718      	adds	r7, #24
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	08005a28 	.word	0x08005a28
 8003ef8:	08004545 	.word	0x08004545
 8003efc:	20000e6c 	.word	0x20000e6c
 8003f00:	20000974 	.word	0x20000974
 8003f04:	20000010 	.word	0x20000010
 8003f08:	20000e68 	.word	0x20000e68
 8003f0c:	20000e54 	.word	0x20000e54
 8003f10:	20000e4c 	.word	0x20000e4c

08003f14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003f14:	b480      	push	{r7}
 8003f16:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003f18:	4b04      	ldr	r3, [pc, #16]	@ (8003f2c <vTaskSuspendAll+0x18>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	4a03      	ldr	r2, [pc, #12]	@ (8003f2c <vTaskSuspendAll+0x18>)
 8003f20:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003f22:	bf00      	nop
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr
 8003f2c:	20000e70 	.word	0x20000e70

08003f30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003f36:	2300      	movs	r3, #0
 8003f38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003f3e:	4b42      	ldr	r3, [pc, #264]	@ (8004048 <xTaskResumeAll+0x118>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d10b      	bne.n	8003f5e <xTaskResumeAll+0x2e>
	__asm volatile
 8003f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f4a:	f383 8811 	msr	BASEPRI, r3
 8003f4e:	f3bf 8f6f 	isb	sy
 8003f52:	f3bf 8f4f 	dsb	sy
 8003f56:	603b      	str	r3, [r7, #0]
}
 8003f58:	bf00      	nop
 8003f5a:	bf00      	nop
 8003f5c:	e7fd      	b.n	8003f5a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003f5e:	f001 f93b 	bl	80051d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003f62:	4b39      	ldr	r3, [pc, #228]	@ (8004048 <xTaskResumeAll+0x118>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	3b01      	subs	r3, #1
 8003f68:	4a37      	ldr	r2, [pc, #220]	@ (8004048 <xTaskResumeAll+0x118>)
 8003f6a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f6c:	4b36      	ldr	r3, [pc, #216]	@ (8004048 <xTaskResumeAll+0x118>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d162      	bne.n	800403a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003f74:	4b35      	ldr	r3, [pc, #212]	@ (800404c <xTaskResumeAll+0x11c>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d05e      	beq.n	800403a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f7c:	e02f      	b.n	8003fde <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f7e:	4b34      	ldr	r3, [pc, #208]	@ (8004050 <xTaskResumeAll+0x120>)
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	3318      	adds	r3, #24
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7ff f83a 	bl	8003004 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	3304      	adds	r3, #4
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7ff f835 	bl	8003004 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f9e:	4b2d      	ldr	r3, [pc, #180]	@ (8004054 <xTaskResumeAll+0x124>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d903      	bls.n	8003fae <xTaskResumeAll+0x7e>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003faa:	4a2a      	ldr	r2, [pc, #168]	@ (8004054 <xTaskResumeAll+0x124>)
 8003fac:	6013      	str	r3, [r2, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4413      	add	r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	4a27      	ldr	r2, [pc, #156]	@ (8004058 <xTaskResumeAll+0x128>)
 8003fbc:	441a      	add	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	3304      	adds	r3, #4
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	4610      	mov	r0, r2
 8003fc6:	f7fe ffc0 	bl	8002f4a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fce:	4b23      	ldr	r3, [pc, #140]	@ (800405c <xTaskResumeAll+0x12c>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d302      	bcc.n	8003fde <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003fd8:	4b21      	ldr	r3, [pc, #132]	@ (8004060 <xTaskResumeAll+0x130>)
 8003fda:	2201      	movs	r2, #1
 8003fdc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003fde:	4b1c      	ldr	r3, [pc, #112]	@ (8004050 <xTaskResumeAll+0x120>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1cb      	bne.n	8003f7e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003fec:	f000 fb66 	bl	80046bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003ff0:	4b1c      	ldr	r3, [pc, #112]	@ (8004064 <xTaskResumeAll+0x134>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d010      	beq.n	800401e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003ffc:	f000 f846 	bl	800408c <xTaskIncrementTick>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d002      	beq.n	800400c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004006:	4b16      	ldr	r3, [pc, #88]	@ (8004060 <xTaskResumeAll+0x130>)
 8004008:	2201      	movs	r2, #1
 800400a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	3b01      	subs	r3, #1
 8004010:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1f1      	bne.n	8003ffc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004018:	4b12      	ldr	r3, [pc, #72]	@ (8004064 <xTaskResumeAll+0x134>)
 800401a:	2200      	movs	r2, #0
 800401c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800401e:	4b10      	ldr	r3, [pc, #64]	@ (8004060 <xTaskResumeAll+0x130>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d009      	beq.n	800403a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004026:	2301      	movs	r3, #1
 8004028:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800402a:	4b0f      	ldr	r3, [pc, #60]	@ (8004068 <xTaskResumeAll+0x138>)
 800402c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004030:	601a      	str	r2, [r3, #0]
 8004032:	f3bf 8f4f 	dsb	sy
 8004036:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800403a:	f001 f8ff 	bl	800523c <vPortExitCritical>

	return xAlreadyYielded;
 800403e:	68bb      	ldr	r3, [r7, #8]
}
 8004040:	4618      	mov	r0, r3
 8004042:	3710      	adds	r7, #16
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	20000e70 	.word	0x20000e70
 800404c:	20000e48 	.word	0x20000e48
 8004050:	20000e08 	.word	0x20000e08
 8004054:	20000e50 	.word	0x20000e50
 8004058:	20000978 	.word	0x20000978
 800405c:	20000974 	.word	0x20000974
 8004060:	20000e5c 	.word	0x20000e5c
 8004064:	20000e58 	.word	0x20000e58
 8004068:	e000ed04 	.word	0xe000ed04

0800406c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004072:	4b05      	ldr	r3, [pc, #20]	@ (8004088 <xTaskGetTickCount+0x1c>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004078:	687b      	ldr	r3, [r7, #4]
}
 800407a:	4618      	mov	r0, r3
 800407c:	370c      	adds	r7, #12
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	20000e4c 	.word	0x20000e4c

0800408c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004092:	2300      	movs	r3, #0
 8004094:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004096:	4b4f      	ldr	r3, [pc, #316]	@ (80041d4 <xTaskIncrementTick+0x148>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2b00      	cmp	r3, #0
 800409c:	f040 8090 	bne.w	80041c0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80040a0:	4b4d      	ldr	r3, [pc, #308]	@ (80041d8 <xTaskIncrementTick+0x14c>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	3301      	adds	r3, #1
 80040a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80040a8:	4a4b      	ldr	r2, [pc, #300]	@ (80041d8 <xTaskIncrementTick+0x14c>)
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d121      	bne.n	80040f8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80040b4:	4b49      	ldr	r3, [pc, #292]	@ (80041dc <xTaskIncrementTick+0x150>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00b      	beq.n	80040d6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80040be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040c2:	f383 8811 	msr	BASEPRI, r3
 80040c6:	f3bf 8f6f 	isb	sy
 80040ca:	f3bf 8f4f 	dsb	sy
 80040ce:	603b      	str	r3, [r7, #0]
}
 80040d0:	bf00      	nop
 80040d2:	bf00      	nop
 80040d4:	e7fd      	b.n	80040d2 <xTaskIncrementTick+0x46>
 80040d6:	4b41      	ldr	r3, [pc, #260]	@ (80041dc <xTaskIncrementTick+0x150>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	60fb      	str	r3, [r7, #12]
 80040dc:	4b40      	ldr	r3, [pc, #256]	@ (80041e0 <xTaskIncrementTick+0x154>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a3e      	ldr	r2, [pc, #248]	@ (80041dc <xTaskIncrementTick+0x150>)
 80040e2:	6013      	str	r3, [r2, #0]
 80040e4:	4a3e      	ldr	r2, [pc, #248]	@ (80041e0 <xTaskIncrementTick+0x154>)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6013      	str	r3, [r2, #0]
 80040ea:	4b3e      	ldr	r3, [pc, #248]	@ (80041e4 <xTaskIncrementTick+0x158>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	3301      	adds	r3, #1
 80040f0:	4a3c      	ldr	r2, [pc, #240]	@ (80041e4 <xTaskIncrementTick+0x158>)
 80040f2:	6013      	str	r3, [r2, #0]
 80040f4:	f000 fae2 	bl	80046bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80040f8:	4b3b      	ldr	r3, [pc, #236]	@ (80041e8 <xTaskIncrementTick+0x15c>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d349      	bcc.n	8004196 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004102:	4b36      	ldr	r3, [pc, #216]	@ (80041dc <xTaskIncrementTick+0x150>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d104      	bne.n	8004116 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800410c:	4b36      	ldr	r3, [pc, #216]	@ (80041e8 <xTaskIncrementTick+0x15c>)
 800410e:	f04f 32ff 	mov.w	r2, #4294967295
 8004112:	601a      	str	r2, [r3, #0]
					break;
 8004114:	e03f      	b.n	8004196 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004116:	4b31      	ldr	r3, [pc, #196]	@ (80041dc <xTaskIncrementTick+0x150>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004126:	693a      	ldr	r2, [r7, #16]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	429a      	cmp	r2, r3
 800412c:	d203      	bcs.n	8004136 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800412e:	4a2e      	ldr	r2, [pc, #184]	@ (80041e8 <xTaskIncrementTick+0x15c>)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004134:	e02f      	b.n	8004196 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	3304      	adds	r3, #4
 800413a:	4618      	mov	r0, r3
 800413c:	f7fe ff62 	bl	8003004 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004144:	2b00      	cmp	r3, #0
 8004146:	d004      	beq.n	8004152 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	3318      	adds	r3, #24
 800414c:	4618      	mov	r0, r3
 800414e:	f7fe ff59 	bl	8003004 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004156:	4b25      	ldr	r3, [pc, #148]	@ (80041ec <xTaskIncrementTick+0x160>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	429a      	cmp	r2, r3
 800415c:	d903      	bls.n	8004166 <xTaskIncrementTick+0xda>
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004162:	4a22      	ldr	r2, [pc, #136]	@ (80041ec <xTaskIncrementTick+0x160>)
 8004164:	6013      	str	r3, [r2, #0]
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800416a:	4613      	mov	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	4413      	add	r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	4a1f      	ldr	r2, [pc, #124]	@ (80041f0 <xTaskIncrementTick+0x164>)
 8004174:	441a      	add	r2, r3
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	3304      	adds	r3, #4
 800417a:	4619      	mov	r1, r3
 800417c:	4610      	mov	r0, r2
 800417e:	f7fe fee4 	bl	8002f4a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004186:	4b1b      	ldr	r3, [pc, #108]	@ (80041f4 <xTaskIncrementTick+0x168>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800418c:	429a      	cmp	r2, r3
 800418e:	d3b8      	bcc.n	8004102 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004190:	2301      	movs	r3, #1
 8004192:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004194:	e7b5      	b.n	8004102 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004196:	4b17      	ldr	r3, [pc, #92]	@ (80041f4 <xTaskIncrementTick+0x168>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800419c:	4914      	ldr	r1, [pc, #80]	@ (80041f0 <xTaskIncrementTick+0x164>)
 800419e:	4613      	mov	r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	4413      	add	r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	440b      	add	r3, r1
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d901      	bls.n	80041b2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80041ae:	2301      	movs	r3, #1
 80041b0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80041b2:	4b11      	ldr	r3, [pc, #68]	@ (80041f8 <xTaskIncrementTick+0x16c>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d007      	beq.n	80041ca <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80041ba:	2301      	movs	r3, #1
 80041bc:	617b      	str	r3, [r7, #20]
 80041be:	e004      	b.n	80041ca <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80041c0:	4b0e      	ldr	r3, [pc, #56]	@ (80041fc <xTaskIncrementTick+0x170>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	3301      	adds	r3, #1
 80041c6:	4a0d      	ldr	r2, [pc, #52]	@ (80041fc <xTaskIncrementTick+0x170>)
 80041c8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80041ca:	697b      	ldr	r3, [r7, #20]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3718      	adds	r7, #24
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	20000e70 	.word	0x20000e70
 80041d8:	20000e4c 	.word	0x20000e4c
 80041dc:	20000e00 	.word	0x20000e00
 80041e0:	20000e04 	.word	0x20000e04
 80041e4:	20000e60 	.word	0x20000e60
 80041e8:	20000e68 	.word	0x20000e68
 80041ec:	20000e50 	.word	0x20000e50
 80041f0:	20000978 	.word	0x20000978
 80041f4:	20000974 	.word	0x20000974
 80041f8:	20000e5c 	.word	0x20000e5c
 80041fc:	20000e58 	.word	0x20000e58

08004200 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004206:	4b2b      	ldr	r3, [pc, #172]	@ (80042b4 <vTaskSwitchContext+0xb4>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d003      	beq.n	8004216 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800420e:	4b2a      	ldr	r3, [pc, #168]	@ (80042b8 <vTaskSwitchContext+0xb8>)
 8004210:	2201      	movs	r2, #1
 8004212:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004214:	e047      	b.n	80042a6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004216:	4b28      	ldr	r3, [pc, #160]	@ (80042b8 <vTaskSwitchContext+0xb8>)
 8004218:	2200      	movs	r2, #0
 800421a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800421c:	4b27      	ldr	r3, [pc, #156]	@ (80042bc <vTaskSwitchContext+0xbc>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	60fb      	str	r3, [r7, #12]
 8004222:	e011      	b.n	8004248 <vTaskSwitchContext+0x48>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10b      	bne.n	8004242 <vTaskSwitchContext+0x42>
	__asm volatile
 800422a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800422e:	f383 8811 	msr	BASEPRI, r3
 8004232:	f3bf 8f6f 	isb	sy
 8004236:	f3bf 8f4f 	dsb	sy
 800423a:	607b      	str	r3, [r7, #4]
}
 800423c:	bf00      	nop
 800423e:	bf00      	nop
 8004240:	e7fd      	b.n	800423e <vTaskSwitchContext+0x3e>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	3b01      	subs	r3, #1
 8004246:	60fb      	str	r3, [r7, #12]
 8004248:	491d      	ldr	r1, [pc, #116]	@ (80042c0 <vTaskSwitchContext+0xc0>)
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	4613      	mov	r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4413      	add	r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	440b      	add	r3, r1
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d0e3      	beq.n	8004224 <vTaskSwitchContext+0x24>
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	4613      	mov	r3, r2
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	4413      	add	r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4a16      	ldr	r2, [pc, #88]	@ (80042c0 <vTaskSwitchContext+0xc0>)
 8004268:	4413      	add	r3, r2
 800426a:	60bb      	str	r3, [r7, #8]
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	685a      	ldr	r2, [r3, #4]
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	605a      	str	r2, [r3, #4]
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	685a      	ldr	r2, [r3, #4]
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	3308      	adds	r3, #8
 800427e:	429a      	cmp	r2, r3
 8004280:	d104      	bne.n	800428c <vTaskSwitchContext+0x8c>
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	685a      	ldr	r2, [r3, #4]
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	605a      	str	r2, [r3, #4]
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	4a0c      	ldr	r2, [pc, #48]	@ (80042c4 <vTaskSwitchContext+0xc4>)
 8004294:	6013      	str	r3, [r2, #0]
 8004296:	4a09      	ldr	r2, [pc, #36]	@ (80042bc <vTaskSwitchContext+0xbc>)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800429c:	4b09      	ldr	r3, [pc, #36]	@ (80042c4 <vTaskSwitchContext+0xc4>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	3354      	adds	r3, #84	@ 0x54
 80042a2:	4a09      	ldr	r2, [pc, #36]	@ (80042c8 <vTaskSwitchContext+0xc8>)
 80042a4:	6013      	str	r3, [r2, #0]
}
 80042a6:	bf00      	nop
 80042a8:	3714      	adds	r7, #20
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	20000e70 	.word	0x20000e70
 80042b8:	20000e5c 	.word	0x20000e5c
 80042bc:	20000e50 	.word	0x20000e50
 80042c0:	20000978 	.word	0x20000978
 80042c4:	20000974 	.word	0x20000974
 80042c8:	20000010 	.word	0x20000010

080042cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d10b      	bne.n	80042f4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80042dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042e0:	f383 8811 	msr	BASEPRI, r3
 80042e4:	f3bf 8f6f 	isb	sy
 80042e8:	f3bf 8f4f 	dsb	sy
 80042ec:	60fb      	str	r3, [r7, #12]
}
 80042ee:	bf00      	nop
 80042f0:	bf00      	nop
 80042f2:	e7fd      	b.n	80042f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80042f4:	4b07      	ldr	r3, [pc, #28]	@ (8004314 <vTaskPlaceOnEventList+0x48>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	3318      	adds	r3, #24
 80042fa:	4619      	mov	r1, r3
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f7fe fe48 	bl	8002f92 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004302:	2101      	movs	r1, #1
 8004304:	6838      	ldr	r0, [r7, #0]
 8004306:	f000 fa87 	bl	8004818 <prvAddCurrentTaskToDelayedList>
}
 800430a:	bf00      	nop
 800430c:	3710      	adds	r7, #16
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	20000974 	.word	0x20000974

08004318 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10b      	bne.n	8004342 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800432a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800432e:	f383 8811 	msr	BASEPRI, r3
 8004332:	f3bf 8f6f 	isb	sy
 8004336:	f3bf 8f4f 	dsb	sy
 800433a:	617b      	str	r3, [r7, #20]
}
 800433c:	bf00      	nop
 800433e:	bf00      	nop
 8004340:	e7fd      	b.n	800433e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004342:	4b0a      	ldr	r3, [pc, #40]	@ (800436c <vTaskPlaceOnEventListRestricted+0x54>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	3318      	adds	r3, #24
 8004348:	4619      	mov	r1, r3
 800434a:	68f8      	ldr	r0, [r7, #12]
 800434c:	f7fe fdfd 	bl	8002f4a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d002      	beq.n	800435c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004356:	f04f 33ff 	mov.w	r3, #4294967295
 800435a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800435c:	6879      	ldr	r1, [r7, #4]
 800435e:	68b8      	ldr	r0, [r7, #8]
 8004360:	f000 fa5a 	bl	8004818 <prvAddCurrentTaskToDelayedList>
	}
 8004364:	bf00      	nop
 8004366:	3718      	adds	r7, #24
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	20000974 	.word	0x20000974

08004370 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d10b      	bne.n	800439e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800438a:	f383 8811 	msr	BASEPRI, r3
 800438e:	f3bf 8f6f 	isb	sy
 8004392:	f3bf 8f4f 	dsb	sy
 8004396:	60fb      	str	r3, [r7, #12]
}
 8004398:	bf00      	nop
 800439a:	bf00      	nop
 800439c:	e7fd      	b.n	800439a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	3318      	adds	r3, #24
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7fe fe2e 	bl	8003004 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043a8:	4b1d      	ldr	r3, [pc, #116]	@ (8004420 <xTaskRemoveFromEventList+0xb0>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d11d      	bne.n	80043ec <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	3304      	adds	r3, #4
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7fe fe25 	bl	8003004 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043be:	4b19      	ldr	r3, [pc, #100]	@ (8004424 <xTaskRemoveFromEventList+0xb4>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d903      	bls.n	80043ce <xTaskRemoveFromEventList+0x5e>
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ca:	4a16      	ldr	r2, [pc, #88]	@ (8004424 <xTaskRemoveFromEventList+0xb4>)
 80043cc:	6013      	str	r3, [r2, #0]
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043d2:	4613      	mov	r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	4413      	add	r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	4a13      	ldr	r2, [pc, #76]	@ (8004428 <xTaskRemoveFromEventList+0xb8>)
 80043dc:	441a      	add	r2, r3
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	3304      	adds	r3, #4
 80043e2:	4619      	mov	r1, r3
 80043e4:	4610      	mov	r0, r2
 80043e6:	f7fe fdb0 	bl	8002f4a <vListInsertEnd>
 80043ea:	e005      	b.n	80043f8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	3318      	adds	r3, #24
 80043f0:	4619      	mov	r1, r3
 80043f2:	480e      	ldr	r0, [pc, #56]	@ (800442c <xTaskRemoveFromEventList+0xbc>)
 80043f4:	f7fe fda9 	bl	8002f4a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004430 <xTaskRemoveFromEventList+0xc0>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004402:	429a      	cmp	r2, r3
 8004404:	d905      	bls.n	8004412 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004406:	2301      	movs	r3, #1
 8004408:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800440a:	4b0a      	ldr	r3, [pc, #40]	@ (8004434 <xTaskRemoveFromEventList+0xc4>)
 800440c:	2201      	movs	r2, #1
 800440e:	601a      	str	r2, [r3, #0]
 8004410:	e001      	b.n	8004416 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004412:	2300      	movs	r3, #0
 8004414:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004416:	697b      	ldr	r3, [r7, #20]
}
 8004418:	4618      	mov	r0, r3
 800441a:	3718      	adds	r7, #24
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	20000e70 	.word	0x20000e70
 8004424:	20000e50 	.word	0x20000e50
 8004428:	20000978 	.word	0x20000978
 800442c:	20000e08 	.word	0x20000e08
 8004430:	20000974 	.word	0x20000974
 8004434:	20000e5c 	.word	0x20000e5c

08004438 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004440:	4b06      	ldr	r3, [pc, #24]	@ (800445c <vTaskInternalSetTimeOutState+0x24>)
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004448:	4b05      	ldr	r3, [pc, #20]	@ (8004460 <vTaskInternalSetTimeOutState+0x28>)
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	605a      	str	r2, [r3, #4]
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr
 800445c:	20000e60 	.word	0x20000e60
 8004460:	20000e4c 	.word	0x20000e4c

08004464 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b088      	sub	sp, #32
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d10b      	bne.n	800448c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004478:	f383 8811 	msr	BASEPRI, r3
 800447c:	f3bf 8f6f 	isb	sy
 8004480:	f3bf 8f4f 	dsb	sy
 8004484:	613b      	str	r3, [r7, #16]
}
 8004486:	bf00      	nop
 8004488:	bf00      	nop
 800448a:	e7fd      	b.n	8004488 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10b      	bne.n	80044aa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004496:	f383 8811 	msr	BASEPRI, r3
 800449a:	f3bf 8f6f 	isb	sy
 800449e:	f3bf 8f4f 	dsb	sy
 80044a2:	60fb      	str	r3, [r7, #12]
}
 80044a4:	bf00      	nop
 80044a6:	bf00      	nop
 80044a8:	e7fd      	b.n	80044a6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80044aa:	f000 fe95 	bl	80051d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80044ae:	4b1d      	ldr	r3, [pc, #116]	@ (8004524 <xTaskCheckForTimeOut+0xc0>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	69ba      	ldr	r2, [r7, #24]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c6:	d102      	bne.n	80044ce <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80044c8:	2300      	movs	r3, #0
 80044ca:	61fb      	str	r3, [r7, #28]
 80044cc:	e023      	b.n	8004516 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	4b15      	ldr	r3, [pc, #84]	@ (8004528 <xTaskCheckForTimeOut+0xc4>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d007      	beq.n	80044ea <xTaskCheckForTimeOut+0x86>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	69ba      	ldr	r2, [r7, #24]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d302      	bcc.n	80044ea <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80044e4:	2301      	movs	r3, #1
 80044e6:	61fb      	str	r3, [r7, #28]
 80044e8:	e015      	b.n	8004516 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	697a      	ldr	r2, [r7, #20]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d20b      	bcs.n	800450c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	1ad2      	subs	r2, r2, r3
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f7ff ff99 	bl	8004438 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004506:	2300      	movs	r3, #0
 8004508:	61fb      	str	r3, [r7, #28]
 800450a:	e004      	b.n	8004516 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	2200      	movs	r2, #0
 8004510:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004512:	2301      	movs	r3, #1
 8004514:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004516:	f000 fe91 	bl	800523c <vPortExitCritical>

	return xReturn;
 800451a:	69fb      	ldr	r3, [r7, #28]
}
 800451c:	4618      	mov	r0, r3
 800451e:	3720      	adds	r7, #32
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	20000e4c 	.word	0x20000e4c
 8004528:	20000e60 	.word	0x20000e60

0800452c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800452c:	b480      	push	{r7}
 800452e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004530:	4b03      	ldr	r3, [pc, #12]	@ (8004540 <vTaskMissedYield+0x14>)
 8004532:	2201      	movs	r2, #1
 8004534:	601a      	str	r2, [r3, #0]
}
 8004536:	bf00      	nop
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr
 8004540:	20000e5c 	.word	0x20000e5c

08004544 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800454c:	f000 f852 	bl	80045f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004550:	4b06      	ldr	r3, [pc, #24]	@ (800456c <prvIdleTask+0x28>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d9f9      	bls.n	800454c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004558:	4b05      	ldr	r3, [pc, #20]	@ (8004570 <prvIdleTask+0x2c>)
 800455a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800455e:	601a      	str	r2, [r3, #0]
 8004560:	f3bf 8f4f 	dsb	sy
 8004564:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004568:	e7f0      	b.n	800454c <prvIdleTask+0x8>
 800456a:	bf00      	nop
 800456c:	20000978 	.word	0x20000978
 8004570:	e000ed04 	.word	0xe000ed04

08004574 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800457a:	2300      	movs	r3, #0
 800457c:	607b      	str	r3, [r7, #4]
 800457e:	e00c      	b.n	800459a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	4613      	mov	r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	4413      	add	r3, r2
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	4a12      	ldr	r2, [pc, #72]	@ (80045d4 <prvInitialiseTaskLists+0x60>)
 800458c:	4413      	add	r3, r2
 800458e:	4618      	mov	r0, r3
 8004590:	f7fe fcae 	bl	8002ef0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	3301      	adds	r3, #1
 8004598:	607b      	str	r3, [r7, #4]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b37      	cmp	r3, #55	@ 0x37
 800459e:	d9ef      	bls.n	8004580 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80045a0:	480d      	ldr	r0, [pc, #52]	@ (80045d8 <prvInitialiseTaskLists+0x64>)
 80045a2:	f7fe fca5 	bl	8002ef0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80045a6:	480d      	ldr	r0, [pc, #52]	@ (80045dc <prvInitialiseTaskLists+0x68>)
 80045a8:	f7fe fca2 	bl	8002ef0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80045ac:	480c      	ldr	r0, [pc, #48]	@ (80045e0 <prvInitialiseTaskLists+0x6c>)
 80045ae:	f7fe fc9f 	bl	8002ef0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80045b2:	480c      	ldr	r0, [pc, #48]	@ (80045e4 <prvInitialiseTaskLists+0x70>)
 80045b4:	f7fe fc9c 	bl	8002ef0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80045b8:	480b      	ldr	r0, [pc, #44]	@ (80045e8 <prvInitialiseTaskLists+0x74>)
 80045ba:	f7fe fc99 	bl	8002ef0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80045be:	4b0b      	ldr	r3, [pc, #44]	@ (80045ec <prvInitialiseTaskLists+0x78>)
 80045c0:	4a05      	ldr	r2, [pc, #20]	@ (80045d8 <prvInitialiseTaskLists+0x64>)
 80045c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80045c4:	4b0a      	ldr	r3, [pc, #40]	@ (80045f0 <prvInitialiseTaskLists+0x7c>)
 80045c6:	4a05      	ldr	r2, [pc, #20]	@ (80045dc <prvInitialiseTaskLists+0x68>)
 80045c8:	601a      	str	r2, [r3, #0]
}
 80045ca:	bf00      	nop
 80045cc:	3708      	adds	r7, #8
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	20000978 	.word	0x20000978
 80045d8:	20000dd8 	.word	0x20000dd8
 80045dc:	20000dec 	.word	0x20000dec
 80045e0:	20000e08 	.word	0x20000e08
 80045e4:	20000e1c 	.word	0x20000e1c
 80045e8:	20000e34 	.word	0x20000e34
 80045ec:	20000e00 	.word	0x20000e00
 80045f0:	20000e04 	.word	0x20000e04

080045f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80045fa:	e019      	b.n	8004630 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80045fc:	f000 fdec 	bl	80051d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004600:	4b10      	ldr	r3, [pc, #64]	@ (8004644 <prvCheckTasksWaitingTermination+0x50>)
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	3304      	adds	r3, #4
 800460c:	4618      	mov	r0, r3
 800460e:	f7fe fcf9 	bl	8003004 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004612:	4b0d      	ldr	r3, [pc, #52]	@ (8004648 <prvCheckTasksWaitingTermination+0x54>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	3b01      	subs	r3, #1
 8004618:	4a0b      	ldr	r2, [pc, #44]	@ (8004648 <prvCheckTasksWaitingTermination+0x54>)
 800461a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800461c:	4b0b      	ldr	r3, [pc, #44]	@ (800464c <prvCheckTasksWaitingTermination+0x58>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	3b01      	subs	r3, #1
 8004622:	4a0a      	ldr	r2, [pc, #40]	@ (800464c <prvCheckTasksWaitingTermination+0x58>)
 8004624:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004626:	f000 fe09 	bl	800523c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 f810 	bl	8004650 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004630:	4b06      	ldr	r3, [pc, #24]	@ (800464c <prvCheckTasksWaitingTermination+0x58>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1e1      	bne.n	80045fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004638:	bf00      	nop
 800463a:	bf00      	nop
 800463c:	3708      	adds	r7, #8
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	20000e1c 	.word	0x20000e1c
 8004648:	20000e48 	.word	0x20000e48
 800464c:	20000e30 	.word	0x20000e30

08004650 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	3354      	adds	r3, #84	@ 0x54
 800465c:	4618      	mov	r0, r3
 800465e:	f001 f8d3 	bl	8005808 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004668:	2b00      	cmp	r3, #0
 800466a:	d108      	bne.n	800467e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004670:	4618      	mov	r0, r3
 8004672:	f000 ffa1 	bl	80055b8 <vPortFree>
				vPortFree( pxTCB );
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 ff9e 	bl	80055b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800467c:	e019      	b.n	80046b2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004684:	2b01      	cmp	r3, #1
 8004686:	d103      	bne.n	8004690 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 ff95 	bl	80055b8 <vPortFree>
	}
 800468e:	e010      	b.n	80046b2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004696:	2b02      	cmp	r3, #2
 8004698:	d00b      	beq.n	80046b2 <prvDeleteTCB+0x62>
	__asm volatile
 800469a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800469e:	f383 8811 	msr	BASEPRI, r3
 80046a2:	f3bf 8f6f 	isb	sy
 80046a6:	f3bf 8f4f 	dsb	sy
 80046aa:	60fb      	str	r3, [r7, #12]
}
 80046ac:	bf00      	nop
 80046ae:	bf00      	nop
 80046b0:	e7fd      	b.n	80046ae <prvDeleteTCB+0x5e>
	}
 80046b2:	bf00      	nop
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
	...

080046bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046c2:	4b0c      	ldr	r3, [pc, #48]	@ (80046f4 <prvResetNextTaskUnblockTime+0x38>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d104      	bne.n	80046d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80046cc:	4b0a      	ldr	r3, [pc, #40]	@ (80046f8 <prvResetNextTaskUnblockTime+0x3c>)
 80046ce:	f04f 32ff 	mov.w	r2, #4294967295
 80046d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80046d4:	e008      	b.n	80046e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046d6:	4b07      	ldr	r3, [pc, #28]	@ (80046f4 <prvResetNextTaskUnblockTime+0x38>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	4a04      	ldr	r2, [pc, #16]	@ (80046f8 <prvResetNextTaskUnblockTime+0x3c>)
 80046e6:	6013      	str	r3, [r2, #0]
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr
 80046f4:	20000e00 	.word	0x20000e00
 80046f8:	20000e68 	.word	0x20000e68

080046fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004702:	4b0b      	ldr	r3, [pc, #44]	@ (8004730 <xTaskGetSchedulerState+0x34>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d102      	bne.n	8004710 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800470a:	2301      	movs	r3, #1
 800470c:	607b      	str	r3, [r7, #4]
 800470e:	e008      	b.n	8004722 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004710:	4b08      	ldr	r3, [pc, #32]	@ (8004734 <xTaskGetSchedulerState+0x38>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d102      	bne.n	800471e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004718:	2302      	movs	r3, #2
 800471a:	607b      	str	r3, [r7, #4]
 800471c:	e001      	b.n	8004722 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800471e:	2300      	movs	r3, #0
 8004720:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004722:	687b      	ldr	r3, [r7, #4]
	}
 8004724:	4618      	mov	r0, r3
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr
 8004730:	20000e54 	.word	0x20000e54
 8004734:	20000e70 	.word	0x20000e70

08004738 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004738:	b580      	push	{r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004744:	2300      	movs	r3, #0
 8004746:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d058      	beq.n	8004800 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800474e:	4b2f      	ldr	r3, [pc, #188]	@ (800480c <xTaskPriorityDisinherit+0xd4>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	429a      	cmp	r2, r3
 8004756:	d00b      	beq.n	8004770 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800475c:	f383 8811 	msr	BASEPRI, r3
 8004760:	f3bf 8f6f 	isb	sy
 8004764:	f3bf 8f4f 	dsb	sy
 8004768:	60fb      	str	r3, [r7, #12]
}
 800476a:	bf00      	nop
 800476c:	bf00      	nop
 800476e:	e7fd      	b.n	800476c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004774:	2b00      	cmp	r3, #0
 8004776:	d10b      	bne.n	8004790 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800477c:	f383 8811 	msr	BASEPRI, r3
 8004780:	f3bf 8f6f 	isb	sy
 8004784:	f3bf 8f4f 	dsb	sy
 8004788:	60bb      	str	r3, [r7, #8]
}
 800478a:	bf00      	nop
 800478c:	bf00      	nop
 800478e:	e7fd      	b.n	800478c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004794:	1e5a      	subs	r2, r3, #1
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d02c      	beq.n	8004800 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d128      	bne.n	8004800 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	3304      	adds	r3, #4
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7fe fc26 	bl	8003004 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047d0:	4b0f      	ldr	r3, [pc, #60]	@ (8004810 <xTaskPriorityDisinherit+0xd8>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d903      	bls.n	80047e0 <xTaskPriorityDisinherit+0xa8>
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047dc:	4a0c      	ldr	r2, [pc, #48]	@ (8004810 <xTaskPriorityDisinherit+0xd8>)
 80047de:	6013      	str	r3, [r2, #0]
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047e4:	4613      	mov	r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	4413      	add	r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	4a09      	ldr	r2, [pc, #36]	@ (8004814 <xTaskPriorityDisinherit+0xdc>)
 80047ee:	441a      	add	r2, r3
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	3304      	adds	r3, #4
 80047f4:	4619      	mov	r1, r3
 80047f6:	4610      	mov	r0, r2
 80047f8:	f7fe fba7 	bl	8002f4a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80047fc:	2301      	movs	r3, #1
 80047fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004800:	697b      	ldr	r3, [r7, #20]
	}
 8004802:	4618      	mov	r0, r3
 8004804:	3718      	adds	r7, #24
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	20000974 	.word	0x20000974
 8004810:	20000e50 	.word	0x20000e50
 8004814:	20000978 	.word	0x20000978

08004818 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004822:	4b21      	ldr	r3, [pc, #132]	@ (80048a8 <prvAddCurrentTaskToDelayedList+0x90>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004828:	4b20      	ldr	r3, [pc, #128]	@ (80048ac <prvAddCurrentTaskToDelayedList+0x94>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	3304      	adds	r3, #4
 800482e:	4618      	mov	r0, r3
 8004830:	f7fe fbe8 	bl	8003004 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800483a:	d10a      	bne.n	8004852 <prvAddCurrentTaskToDelayedList+0x3a>
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d007      	beq.n	8004852 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004842:	4b1a      	ldr	r3, [pc, #104]	@ (80048ac <prvAddCurrentTaskToDelayedList+0x94>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	3304      	adds	r3, #4
 8004848:	4619      	mov	r1, r3
 800484a:	4819      	ldr	r0, [pc, #100]	@ (80048b0 <prvAddCurrentTaskToDelayedList+0x98>)
 800484c:	f7fe fb7d 	bl	8002f4a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004850:	e026      	b.n	80048a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4413      	add	r3, r2
 8004858:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800485a:	4b14      	ldr	r3, [pc, #80]	@ (80048ac <prvAddCurrentTaskToDelayedList+0x94>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68ba      	ldr	r2, [r7, #8]
 8004860:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004862:	68ba      	ldr	r2, [r7, #8]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	429a      	cmp	r2, r3
 8004868:	d209      	bcs.n	800487e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800486a:	4b12      	ldr	r3, [pc, #72]	@ (80048b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	4b0f      	ldr	r3, [pc, #60]	@ (80048ac <prvAddCurrentTaskToDelayedList+0x94>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	3304      	adds	r3, #4
 8004874:	4619      	mov	r1, r3
 8004876:	4610      	mov	r0, r2
 8004878:	f7fe fb8b 	bl	8002f92 <vListInsert>
}
 800487c:	e010      	b.n	80048a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800487e:	4b0e      	ldr	r3, [pc, #56]	@ (80048b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	4b0a      	ldr	r3, [pc, #40]	@ (80048ac <prvAddCurrentTaskToDelayedList+0x94>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	3304      	adds	r3, #4
 8004888:	4619      	mov	r1, r3
 800488a:	4610      	mov	r0, r2
 800488c:	f7fe fb81 	bl	8002f92 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004890:	4b0a      	ldr	r3, [pc, #40]	@ (80048bc <prvAddCurrentTaskToDelayedList+0xa4>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68ba      	ldr	r2, [r7, #8]
 8004896:	429a      	cmp	r2, r3
 8004898:	d202      	bcs.n	80048a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800489a:	4a08      	ldr	r2, [pc, #32]	@ (80048bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	6013      	str	r3, [r2, #0]
}
 80048a0:	bf00      	nop
 80048a2:	3710      	adds	r7, #16
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	20000e4c 	.word	0x20000e4c
 80048ac:	20000974 	.word	0x20000974
 80048b0:	20000e34 	.word	0x20000e34
 80048b4:	20000e04 	.word	0x20000e04
 80048b8:	20000e00 	.word	0x20000e00
 80048bc:	20000e68 	.word	0x20000e68

080048c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b08a      	sub	sp, #40	@ 0x28
 80048c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80048c6:	2300      	movs	r3, #0
 80048c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80048ca:	f000 fb13 	bl	8004ef4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80048ce:	4b1d      	ldr	r3, [pc, #116]	@ (8004944 <xTimerCreateTimerTask+0x84>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d021      	beq.n	800491a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80048d6:	2300      	movs	r3, #0
 80048d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80048da:	2300      	movs	r3, #0
 80048dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80048de:	1d3a      	adds	r2, r7, #4
 80048e0:	f107 0108 	add.w	r1, r7, #8
 80048e4:	f107 030c 	add.w	r3, r7, #12
 80048e8:	4618      	mov	r0, r3
 80048ea:	f7fe fae7 	bl	8002ebc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80048ee:	6879      	ldr	r1, [r7, #4]
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	9202      	str	r2, [sp, #8]
 80048f6:	9301      	str	r3, [sp, #4]
 80048f8:	2302      	movs	r3, #2
 80048fa:	9300      	str	r3, [sp, #0]
 80048fc:	2300      	movs	r3, #0
 80048fe:	460a      	mov	r2, r1
 8004900:	4911      	ldr	r1, [pc, #68]	@ (8004948 <xTimerCreateTimerTask+0x88>)
 8004902:	4812      	ldr	r0, [pc, #72]	@ (800494c <xTimerCreateTimerTask+0x8c>)
 8004904:	f7ff f8a2 	bl	8003a4c <xTaskCreateStatic>
 8004908:	4603      	mov	r3, r0
 800490a:	4a11      	ldr	r2, [pc, #68]	@ (8004950 <xTimerCreateTimerTask+0x90>)
 800490c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800490e:	4b10      	ldr	r3, [pc, #64]	@ (8004950 <xTimerCreateTimerTask+0x90>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d001      	beq.n	800491a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004916:	2301      	movs	r3, #1
 8004918:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d10b      	bne.n	8004938 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004924:	f383 8811 	msr	BASEPRI, r3
 8004928:	f3bf 8f6f 	isb	sy
 800492c:	f3bf 8f4f 	dsb	sy
 8004930:	613b      	str	r3, [r7, #16]
}
 8004932:	bf00      	nop
 8004934:	bf00      	nop
 8004936:	e7fd      	b.n	8004934 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004938:	697b      	ldr	r3, [r7, #20]
}
 800493a:	4618      	mov	r0, r3
 800493c:	3718      	adds	r7, #24
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	20000ea4 	.word	0x20000ea4
 8004948:	08005a30 	.word	0x08005a30
 800494c:	08004a8d 	.word	0x08004a8d
 8004950:	20000ea8 	.word	0x20000ea8

08004954 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b08a      	sub	sp, #40	@ 0x28
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
 8004960:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004962:	2300      	movs	r3, #0
 8004964:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d10b      	bne.n	8004984 <xTimerGenericCommand+0x30>
	__asm volatile
 800496c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004970:	f383 8811 	msr	BASEPRI, r3
 8004974:	f3bf 8f6f 	isb	sy
 8004978:	f3bf 8f4f 	dsb	sy
 800497c:	623b      	str	r3, [r7, #32]
}
 800497e:	bf00      	nop
 8004980:	bf00      	nop
 8004982:	e7fd      	b.n	8004980 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004984:	4b19      	ldr	r3, [pc, #100]	@ (80049ec <xTimerGenericCommand+0x98>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d02a      	beq.n	80049e2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	2b05      	cmp	r3, #5
 800499c:	dc18      	bgt.n	80049d0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800499e:	f7ff fead 	bl	80046fc <xTaskGetSchedulerState>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d109      	bne.n	80049bc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80049a8:	4b10      	ldr	r3, [pc, #64]	@ (80049ec <xTimerGenericCommand+0x98>)
 80049aa:	6818      	ldr	r0, [r3, #0]
 80049ac:	f107 0110 	add.w	r1, r7, #16
 80049b0:	2300      	movs	r3, #0
 80049b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049b4:	f7fe fc5a 	bl	800326c <xQueueGenericSend>
 80049b8:	6278      	str	r0, [r7, #36]	@ 0x24
 80049ba:	e012      	b.n	80049e2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80049bc:	4b0b      	ldr	r3, [pc, #44]	@ (80049ec <xTimerGenericCommand+0x98>)
 80049be:	6818      	ldr	r0, [r3, #0]
 80049c0:	f107 0110 	add.w	r1, r7, #16
 80049c4:	2300      	movs	r3, #0
 80049c6:	2200      	movs	r2, #0
 80049c8:	f7fe fc50 	bl	800326c <xQueueGenericSend>
 80049cc:	6278      	str	r0, [r7, #36]	@ 0x24
 80049ce:	e008      	b.n	80049e2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80049d0:	4b06      	ldr	r3, [pc, #24]	@ (80049ec <xTimerGenericCommand+0x98>)
 80049d2:	6818      	ldr	r0, [r3, #0]
 80049d4:	f107 0110 	add.w	r1, r7, #16
 80049d8:	2300      	movs	r3, #0
 80049da:	683a      	ldr	r2, [r7, #0]
 80049dc:	f7fe fd48 	bl	8003470 <xQueueGenericSendFromISR>
 80049e0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80049e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3728      	adds	r7, #40	@ 0x28
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	20000ea4 	.word	0x20000ea4

080049f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b088      	sub	sp, #32
 80049f4:	af02      	add	r7, sp, #8
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049fa:	4b23      	ldr	r3, [pc, #140]	@ (8004a88 <prvProcessExpiredTimer+0x98>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	3304      	adds	r3, #4
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7fe fafb 	bl	8003004 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a14:	f003 0304 	and.w	r3, r3, #4
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d023      	beq.n	8004a64 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	699a      	ldr	r2, [r3, #24]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	18d1      	adds	r1, r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	683a      	ldr	r2, [r7, #0]
 8004a28:	6978      	ldr	r0, [r7, #20]
 8004a2a:	f000 f8d5 	bl	8004bd8 <prvInsertTimerInActiveList>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d020      	beq.n	8004a76 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a34:	2300      	movs	r3, #0
 8004a36:	9300      	str	r3, [sp, #0]
 8004a38:	2300      	movs	r3, #0
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	2100      	movs	r1, #0
 8004a3e:	6978      	ldr	r0, [r7, #20]
 8004a40:	f7ff ff88 	bl	8004954 <xTimerGenericCommand>
 8004a44:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d114      	bne.n	8004a76 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a50:	f383 8811 	msr	BASEPRI, r3
 8004a54:	f3bf 8f6f 	isb	sy
 8004a58:	f3bf 8f4f 	dsb	sy
 8004a5c:	60fb      	str	r3, [r7, #12]
}
 8004a5e:	bf00      	nop
 8004a60:	bf00      	nop
 8004a62:	e7fd      	b.n	8004a60 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a6a:	f023 0301 	bic.w	r3, r3, #1
 8004a6e:	b2da      	uxtb	r2, r3
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	6978      	ldr	r0, [r7, #20]
 8004a7c:	4798      	blx	r3
}
 8004a7e:	bf00      	nop
 8004a80:	3718      	adds	r7, #24
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	20000e9c 	.word	0x20000e9c

08004a8c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a94:	f107 0308 	add.w	r3, r7, #8
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f000 f859 	bl	8004b50 <prvGetNextExpireTime>
 8004a9e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f000 f805 	bl	8004ab4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004aaa:	f000 f8d7 	bl	8004c5c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004aae:	bf00      	nop
 8004ab0:	e7f0      	b.n	8004a94 <prvTimerTask+0x8>
	...

08004ab4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004abe:	f7ff fa29 	bl	8003f14 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004ac2:	f107 0308 	add.w	r3, r7, #8
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f000 f866 	bl	8004b98 <prvSampleTimeNow>
 8004acc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d130      	bne.n	8004b36 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10a      	bne.n	8004af0 <prvProcessTimerOrBlockTask+0x3c>
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d806      	bhi.n	8004af0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004ae2:	f7ff fa25 	bl	8003f30 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004ae6:	68f9      	ldr	r1, [r7, #12]
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f7ff ff81 	bl	80049f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004aee:	e024      	b.n	8004b3a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d008      	beq.n	8004b08 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004af6:	4b13      	ldr	r3, [pc, #76]	@ (8004b44 <prvProcessTimerOrBlockTask+0x90>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d101      	bne.n	8004b04 <prvProcessTimerOrBlockTask+0x50>
 8004b00:	2301      	movs	r3, #1
 8004b02:	e000      	b.n	8004b06 <prvProcessTimerOrBlockTask+0x52>
 8004b04:	2300      	movs	r3, #0
 8004b06:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004b08:	4b0f      	ldr	r3, [pc, #60]	@ (8004b48 <prvProcessTimerOrBlockTask+0x94>)
 8004b0a:	6818      	ldr	r0, [r3, #0]
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	683a      	ldr	r2, [r7, #0]
 8004b14:	4619      	mov	r1, r3
 8004b16:	f7fe ff65 	bl	80039e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004b1a:	f7ff fa09 	bl	8003f30 <xTaskResumeAll>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d10a      	bne.n	8004b3a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004b24:	4b09      	ldr	r3, [pc, #36]	@ (8004b4c <prvProcessTimerOrBlockTask+0x98>)
 8004b26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b2a:	601a      	str	r2, [r3, #0]
 8004b2c:	f3bf 8f4f 	dsb	sy
 8004b30:	f3bf 8f6f 	isb	sy
}
 8004b34:	e001      	b.n	8004b3a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004b36:	f7ff f9fb 	bl	8003f30 <xTaskResumeAll>
}
 8004b3a:	bf00      	nop
 8004b3c:	3710      	adds	r7, #16
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	20000ea0 	.word	0x20000ea0
 8004b48:	20000ea4 	.word	0x20000ea4
 8004b4c:	e000ed04 	.word	0xe000ed04

08004b50 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004b58:	4b0e      	ldr	r3, [pc, #56]	@ (8004b94 <prvGetNextExpireTime+0x44>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <prvGetNextExpireTime+0x16>
 8004b62:	2201      	movs	r2, #1
 8004b64:	e000      	b.n	8004b68 <prvGetNextExpireTime+0x18>
 8004b66:	2200      	movs	r2, #0
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d105      	bne.n	8004b80 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b74:	4b07      	ldr	r3, [pc, #28]	@ (8004b94 <prvGetNextExpireTime+0x44>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	60fb      	str	r3, [r7, #12]
 8004b7e:	e001      	b.n	8004b84 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004b80:	2300      	movs	r3, #0
 8004b82:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004b84:	68fb      	ldr	r3, [r7, #12]
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3714      	adds	r7, #20
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	20000e9c 	.word	0x20000e9c

08004b98 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004ba0:	f7ff fa64 	bl	800406c <xTaskGetTickCount>
 8004ba4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8004bd4 <prvSampleTimeNow+0x3c>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d205      	bcs.n	8004bbc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004bb0:	f000 f93a 	bl	8004e28 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	601a      	str	r2, [r3, #0]
 8004bba:	e002      	b.n	8004bc2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004bc2:	4a04      	ldr	r2, [pc, #16]	@ (8004bd4 <prvSampleTimeNow+0x3c>)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	20000eac 	.word	0x20000eac

08004bd8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b086      	sub	sp, #24
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
 8004be4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004be6:	2300      	movs	r3, #0
 8004be8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	68ba      	ldr	r2, [r7, #8]
 8004bee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004bf6:	68ba      	ldr	r2, [r7, #8]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d812      	bhi.n	8004c24 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	1ad2      	subs	r2, r2, r3
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d302      	bcc.n	8004c12 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	617b      	str	r3, [r7, #20]
 8004c10:	e01b      	b.n	8004c4a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004c12:	4b10      	ldr	r3, [pc, #64]	@ (8004c54 <prvInsertTimerInActiveList+0x7c>)
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	3304      	adds	r3, #4
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	4610      	mov	r0, r2
 8004c1e:	f7fe f9b8 	bl	8002f92 <vListInsert>
 8004c22:	e012      	b.n	8004c4a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d206      	bcs.n	8004c3a <prvInsertTimerInActiveList+0x62>
 8004c2c:	68ba      	ldr	r2, [r7, #8]
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d302      	bcc.n	8004c3a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004c34:	2301      	movs	r3, #1
 8004c36:	617b      	str	r3, [r7, #20]
 8004c38:	e007      	b.n	8004c4a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c3a:	4b07      	ldr	r3, [pc, #28]	@ (8004c58 <prvInsertTimerInActiveList+0x80>)
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	3304      	adds	r3, #4
 8004c42:	4619      	mov	r1, r3
 8004c44:	4610      	mov	r0, r2
 8004c46:	f7fe f9a4 	bl	8002f92 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004c4a:	697b      	ldr	r3, [r7, #20]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3718      	adds	r7, #24
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	20000ea0 	.word	0x20000ea0
 8004c58:	20000e9c 	.word	0x20000e9c

08004c5c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b08e      	sub	sp, #56	@ 0x38
 8004c60:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c62:	e0ce      	b.n	8004e02 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	da19      	bge.n	8004c9e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004c6a:	1d3b      	adds	r3, r7, #4
 8004c6c:	3304      	adds	r3, #4
 8004c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10b      	bne.n	8004c8e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c7a:	f383 8811 	msr	BASEPRI, r3
 8004c7e:	f3bf 8f6f 	isb	sy
 8004c82:	f3bf 8f4f 	dsb	sy
 8004c86:	61fb      	str	r3, [r7, #28]
}
 8004c88:	bf00      	nop
 8004c8a:	bf00      	nop
 8004c8c:	e7fd      	b.n	8004c8a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c94:	6850      	ldr	r0, [r2, #4]
 8004c96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c98:	6892      	ldr	r2, [r2, #8]
 8004c9a:	4611      	mov	r1, r2
 8004c9c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f2c0 80ae 	blt.w	8004e02 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d004      	beq.n	8004cbc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb4:	3304      	adds	r3, #4
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7fe f9a4 	bl	8003004 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004cbc:	463b      	mov	r3, r7
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7ff ff6a 	bl	8004b98 <prvSampleTimeNow>
 8004cc4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b09      	cmp	r3, #9
 8004cca:	f200 8097 	bhi.w	8004dfc <prvProcessReceivedCommands+0x1a0>
 8004cce:	a201      	add	r2, pc, #4	@ (adr r2, 8004cd4 <prvProcessReceivedCommands+0x78>)
 8004cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd4:	08004cfd 	.word	0x08004cfd
 8004cd8:	08004cfd 	.word	0x08004cfd
 8004cdc:	08004cfd 	.word	0x08004cfd
 8004ce0:	08004d73 	.word	0x08004d73
 8004ce4:	08004d87 	.word	0x08004d87
 8004ce8:	08004dd3 	.word	0x08004dd3
 8004cec:	08004cfd 	.word	0x08004cfd
 8004cf0:	08004cfd 	.word	0x08004cfd
 8004cf4:	08004d73 	.word	0x08004d73
 8004cf8:	08004d87 	.word	0x08004d87
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cfe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d02:	f043 0301 	orr.w	r3, r3, #1
 8004d06:	b2da      	uxtb	r2, r3
 8004d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d0a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004d0e:	68ba      	ldr	r2, [r7, #8]
 8004d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d12:	699b      	ldr	r3, [r3, #24]
 8004d14:	18d1      	adds	r1, r2, r3
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d1c:	f7ff ff5c 	bl	8004bd8 <prvInsertTimerInActiveList>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d06c      	beq.n	8004e00 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d28:	6a1b      	ldr	r3, [r3, #32]
 8004d2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d2c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d34:	f003 0304 	and.w	r3, r3, #4
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d061      	beq.n	8004e00 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004d3c:	68ba      	ldr	r2, [r7, #8]
 8004d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	441a      	add	r2, r3
 8004d44:	2300      	movs	r3, #0
 8004d46:	9300      	str	r3, [sp, #0]
 8004d48:	2300      	movs	r3, #0
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d4e:	f7ff fe01 	bl	8004954 <xTimerGenericCommand>
 8004d52:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004d54:	6a3b      	ldr	r3, [r7, #32]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d152      	bne.n	8004e00 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d5e:	f383 8811 	msr	BASEPRI, r3
 8004d62:	f3bf 8f6f 	isb	sy
 8004d66:	f3bf 8f4f 	dsb	sy
 8004d6a:	61bb      	str	r3, [r7, #24]
}
 8004d6c:	bf00      	nop
 8004d6e:	bf00      	nop
 8004d70:	e7fd      	b.n	8004d6e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d78:	f023 0301 	bic.w	r3, r3, #1
 8004d7c:	b2da      	uxtb	r2, r3
 8004d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d80:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004d84:	e03d      	b.n	8004e02 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d8c:	f043 0301 	orr.w	r3, r3, #1
 8004d90:	b2da      	uxtb	r2, r3
 8004d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d94:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004d98:	68ba      	ldr	r2, [r7, #8]
 8004d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d9c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d10b      	bne.n	8004dbe <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004daa:	f383 8811 	msr	BASEPRI, r3
 8004dae:	f3bf 8f6f 	isb	sy
 8004db2:	f3bf 8f4f 	dsb	sy
 8004db6:	617b      	str	r3, [r7, #20]
}
 8004db8:	bf00      	nop
 8004dba:	bf00      	nop
 8004dbc:	e7fd      	b.n	8004dba <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dc0:	699a      	ldr	r2, [r3, #24]
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc4:	18d1      	adds	r1, r2, r3
 8004dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004dcc:	f7ff ff04 	bl	8004bd8 <prvInsertTimerInActiveList>
					break;
 8004dd0:	e017      	b.n	8004e02 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004dd8:	f003 0302 	and.w	r3, r3, #2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d103      	bne.n	8004de8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004de0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004de2:	f000 fbe9 	bl	80055b8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004de6:	e00c      	b.n	8004e02 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004dee:	f023 0301 	bic.w	r3, r3, #1
 8004df2:	b2da      	uxtb	r2, r3
 8004df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004df6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004dfa:	e002      	b.n	8004e02 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004dfc:	bf00      	nop
 8004dfe:	e000      	b.n	8004e02 <prvProcessReceivedCommands+0x1a6>
					break;
 8004e00:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004e02:	4b08      	ldr	r3, [pc, #32]	@ (8004e24 <prvProcessReceivedCommands+0x1c8>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	1d39      	adds	r1, r7, #4
 8004e08:	2200      	movs	r2, #0
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7fe fbce 	bl	80035ac <xQueueReceive>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	f47f af26 	bne.w	8004c64 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004e18:	bf00      	nop
 8004e1a:	bf00      	nop
 8004e1c:	3730      	adds	r7, #48	@ 0x30
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	20000ea4 	.word	0x20000ea4

08004e28 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b088      	sub	sp, #32
 8004e2c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e2e:	e049      	b.n	8004ec4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e30:	4b2e      	ldr	r3, [pc, #184]	@ (8004eec <prvSwitchTimerLists+0xc4>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e3a:	4b2c      	ldr	r3, [pc, #176]	@ (8004eec <prvSwitchTimerLists+0xc4>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	3304      	adds	r3, #4
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f7fe f8db 	bl	8003004 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	68f8      	ldr	r0, [r7, #12]
 8004e54:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e5c:	f003 0304 	and.w	r3, r3, #4
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d02f      	beq.n	8004ec4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	699b      	ldr	r3, [r3, #24]
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004e6e:	68ba      	ldr	r2, [r7, #8]
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d90e      	bls.n	8004e94 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	68ba      	ldr	r2, [r7, #8]
 8004e7a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e82:	4b1a      	ldr	r3, [pc, #104]	@ (8004eec <prvSwitchTimerLists+0xc4>)
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	3304      	adds	r3, #4
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	4610      	mov	r0, r2
 8004e8e:	f7fe f880 	bl	8002f92 <vListInsert>
 8004e92:	e017      	b.n	8004ec4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e94:	2300      	movs	r3, #0
 8004e96:	9300      	str	r3, [sp, #0]
 8004e98:	2300      	movs	r3, #0
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f7ff fd58 	bl	8004954 <xTimerGenericCommand>
 8004ea4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d10b      	bne.n	8004ec4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eb0:	f383 8811 	msr	BASEPRI, r3
 8004eb4:	f3bf 8f6f 	isb	sy
 8004eb8:	f3bf 8f4f 	dsb	sy
 8004ebc:	603b      	str	r3, [r7, #0]
}
 8004ebe:	bf00      	nop
 8004ec0:	bf00      	nop
 8004ec2:	e7fd      	b.n	8004ec0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004ec4:	4b09      	ldr	r3, [pc, #36]	@ (8004eec <prvSwitchTimerLists+0xc4>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1b0      	bne.n	8004e30 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004ece:	4b07      	ldr	r3, [pc, #28]	@ (8004eec <prvSwitchTimerLists+0xc4>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004ed4:	4b06      	ldr	r3, [pc, #24]	@ (8004ef0 <prvSwitchTimerLists+0xc8>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a04      	ldr	r2, [pc, #16]	@ (8004eec <prvSwitchTimerLists+0xc4>)
 8004eda:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004edc:	4a04      	ldr	r2, [pc, #16]	@ (8004ef0 <prvSwitchTimerLists+0xc8>)
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	6013      	str	r3, [r2, #0]
}
 8004ee2:	bf00      	nop
 8004ee4:	3718      	adds	r7, #24
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	20000e9c 	.word	0x20000e9c
 8004ef0:	20000ea0 	.word	0x20000ea0

08004ef4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004efa:	f000 f96d 	bl	80051d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004efe:	4b15      	ldr	r3, [pc, #84]	@ (8004f54 <prvCheckForValidListAndQueue+0x60>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d120      	bne.n	8004f48 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004f06:	4814      	ldr	r0, [pc, #80]	@ (8004f58 <prvCheckForValidListAndQueue+0x64>)
 8004f08:	f7fd fff2 	bl	8002ef0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004f0c:	4813      	ldr	r0, [pc, #76]	@ (8004f5c <prvCheckForValidListAndQueue+0x68>)
 8004f0e:	f7fd ffef 	bl	8002ef0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004f12:	4b13      	ldr	r3, [pc, #76]	@ (8004f60 <prvCheckForValidListAndQueue+0x6c>)
 8004f14:	4a10      	ldr	r2, [pc, #64]	@ (8004f58 <prvCheckForValidListAndQueue+0x64>)
 8004f16:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004f18:	4b12      	ldr	r3, [pc, #72]	@ (8004f64 <prvCheckForValidListAndQueue+0x70>)
 8004f1a:	4a10      	ldr	r2, [pc, #64]	@ (8004f5c <prvCheckForValidListAndQueue+0x68>)
 8004f1c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004f1e:	2300      	movs	r3, #0
 8004f20:	9300      	str	r3, [sp, #0]
 8004f22:	4b11      	ldr	r3, [pc, #68]	@ (8004f68 <prvCheckForValidListAndQueue+0x74>)
 8004f24:	4a11      	ldr	r2, [pc, #68]	@ (8004f6c <prvCheckForValidListAndQueue+0x78>)
 8004f26:	2110      	movs	r1, #16
 8004f28:	200a      	movs	r0, #10
 8004f2a:	f7fe f8ff 	bl	800312c <xQueueGenericCreateStatic>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	4a08      	ldr	r2, [pc, #32]	@ (8004f54 <prvCheckForValidListAndQueue+0x60>)
 8004f32:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004f34:	4b07      	ldr	r3, [pc, #28]	@ (8004f54 <prvCheckForValidListAndQueue+0x60>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d005      	beq.n	8004f48 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004f3c:	4b05      	ldr	r3, [pc, #20]	@ (8004f54 <prvCheckForValidListAndQueue+0x60>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	490b      	ldr	r1, [pc, #44]	@ (8004f70 <prvCheckForValidListAndQueue+0x7c>)
 8004f42:	4618      	mov	r0, r3
 8004f44:	f7fe fd24 	bl	8003990 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f48:	f000 f978 	bl	800523c <vPortExitCritical>
}
 8004f4c:	bf00      	nop
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	20000ea4 	.word	0x20000ea4
 8004f58:	20000e74 	.word	0x20000e74
 8004f5c:	20000e88 	.word	0x20000e88
 8004f60:	20000e9c 	.word	0x20000e9c
 8004f64:	20000ea0 	.word	0x20000ea0
 8004f68:	20000f50 	.word	0x20000f50
 8004f6c:	20000eb0 	.word	0x20000eb0
 8004f70:	08005a38 	.word	0x08005a38

08004f74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	3b04      	subs	r3, #4
 8004f84:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004f8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	3b04      	subs	r3, #4
 8004f92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	f023 0201 	bic.w	r2, r3, #1
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	3b04      	subs	r3, #4
 8004fa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004fa4:	4a0c      	ldr	r2, [pc, #48]	@ (8004fd8 <pxPortInitialiseStack+0x64>)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	3b14      	subs	r3, #20
 8004fae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	3b04      	subs	r3, #4
 8004fba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f06f 0202 	mvn.w	r2, #2
 8004fc2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	3b20      	subs	r3, #32
 8004fc8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004fca:	68fb      	ldr	r3, [r7, #12]
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3714      	adds	r7, #20
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr
 8004fd8:	08004fdd 	.word	0x08004fdd

08004fdc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004fe6:	4b13      	ldr	r3, [pc, #76]	@ (8005034 <prvTaskExitError+0x58>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fee:	d00b      	beq.n	8005008 <prvTaskExitError+0x2c>
	__asm volatile
 8004ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ff4:	f383 8811 	msr	BASEPRI, r3
 8004ff8:	f3bf 8f6f 	isb	sy
 8004ffc:	f3bf 8f4f 	dsb	sy
 8005000:	60fb      	str	r3, [r7, #12]
}
 8005002:	bf00      	nop
 8005004:	bf00      	nop
 8005006:	e7fd      	b.n	8005004 <prvTaskExitError+0x28>
	__asm volatile
 8005008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800500c:	f383 8811 	msr	BASEPRI, r3
 8005010:	f3bf 8f6f 	isb	sy
 8005014:	f3bf 8f4f 	dsb	sy
 8005018:	60bb      	str	r3, [r7, #8]
}
 800501a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800501c:	bf00      	nop
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d0fc      	beq.n	800501e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005024:	bf00      	nop
 8005026:	bf00      	nop
 8005028:	3714      	adds	r7, #20
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	2000000c 	.word	0x2000000c
	...

08005040 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005040:	4b07      	ldr	r3, [pc, #28]	@ (8005060 <pxCurrentTCBConst2>)
 8005042:	6819      	ldr	r1, [r3, #0]
 8005044:	6808      	ldr	r0, [r1, #0]
 8005046:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800504a:	f380 8809 	msr	PSP, r0
 800504e:	f3bf 8f6f 	isb	sy
 8005052:	f04f 0000 	mov.w	r0, #0
 8005056:	f380 8811 	msr	BASEPRI, r0
 800505a:	4770      	bx	lr
 800505c:	f3af 8000 	nop.w

08005060 <pxCurrentTCBConst2>:
 8005060:	20000974 	.word	0x20000974
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005064:	bf00      	nop
 8005066:	bf00      	nop

08005068 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005068:	4808      	ldr	r0, [pc, #32]	@ (800508c <prvPortStartFirstTask+0x24>)
 800506a:	6800      	ldr	r0, [r0, #0]
 800506c:	6800      	ldr	r0, [r0, #0]
 800506e:	f380 8808 	msr	MSP, r0
 8005072:	f04f 0000 	mov.w	r0, #0
 8005076:	f380 8814 	msr	CONTROL, r0
 800507a:	b662      	cpsie	i
 800507c:	b661      	cpsie	f
 800507e:	f3bf 8f4f 	dsb	sy
 8005082:	f3bf 8f6f 	isb	sy
 8005086:	df00      	svc	0
 8005088:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800508a:	bf00      	nop
 800508c:	e000ed08 	.word	0xe000ed08

08005090 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b086      	sub	sp, #24
 8005094:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005096:	4b47      	ldr	r3, [pc, #284]	@ (80051b4 <xPortStartScheduler+0x124>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a47      	ldr	r2, [pc, #284]	@ (80051b8 <xPortStartScheduler+0x128>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d10b      	bne.n	80050b8 <xPortStartScheduler+0x28>
	__asm volatile
 80050a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050a4:	f383 8811 	msr	BASEPRI, r3
 80050a8:	f3bf 8f6f 	isb	sy
 80050ac:	f3bf 8f4f 	dsb	sy
 80050b0:	613b      	str	r3, [r7, #16]
}
 80050b2:	bf00      	nop
 80050b4:	bf00      	nop
 80050b6:	e7fd      	b.n	80050b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80050b8:	4b3e      	ldr	r3, [pc, #248]	@ (80051b4 <xPortStartScheduler+0x124>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a3f      	ldr	r2, [pc, #252]	@ (80051bc <xPortStartScheduler+0x12c>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d10b      	bne.n	80050da <xPortStartScheduler+0x4a>
	__asm volatile
 80050c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c6:	f383 8811 	msr	BASEPRI, r3
 80050ca:	f3bf 8f6f 	isb	sy
 80050ce:	f3bf 8f4f 	dsb	sy
 80050d2:	60fb      	str	r3, [r7, #12]
}
 80050d4:	bf00      	nop
 80050d6:	bf00      	nop
 80050d8:	e7fd      	b.n	80050d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80050da:	4b39      	ldr	r3, [pc, #228]	@ (80051c0 <xPortStartScheduler+0x130>)
 80050dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	22ff      	movs	r2, #255	@ 0xff
 80050ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80050f4:	78fb      	ldrb	r3, [r7, #3]
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80050fc:	b2da      	uxtb	r2, r3
 80050fe:	4b31      	ldr	r3, [pc, #196]	@ (80051c4 <xPortStartScheduler+0x134>)
 8005100:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005102:	4b31      	ldr	r3, [pc, #196]	@ (80051c8 <xPortStartScheduler+0x138>)
 8005104:	2207      	movs	r2, #7
 8005106:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005108:	e009      	b.n	800511e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800510a:	4b2f      	ldr	r3, [pc, #188]	@ (80051c8 <xPortStartScheduler+0x138>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	3b01      	subs	r3, #1
 8005110:	4a2d      	ldr	r2, [pc, #180]	@ (80051c8 <xPortStartScheduler+0x138>)
 8005112:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005114:	78fb      	ldrb	r3, [r7, #3]
 8005116:	b2db      	uxtb	r3, r3
 8005118:	005b      	lsls	r3, r3, #1
 800511a:	b2db      	uxtb	r3, r3
 800511c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800511e:	78fb      	ldrb	r3, [r7, #3]
 8005120:	b2db      	uxtb	r3, r3
 8005122:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005126:	2b80      	cmp	r3, #128	@ 0x80
 8005128:	d0ef      	beq.n	800510a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800512a:	4b27      	ldr	r3, [pc, #156]	@ (80051c8 <xPortStartScheduler+0x138>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f1c3 0307 	rsb	r3, r3, #7
 8005132:	2b04      	cmp	r3, #4
 8005134:	d00b      	beq.n	800514e <xPortStartScheduler+0xbe>
	__asm volatile
 8005136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800513a:	f383 8811 	msr	BASEPRI, r3
 800513e:	f3bf 8f6f 	isb	sy
 8005142:	f3bf 8f4f 	dsb	sy
 8005146:	60bb      	str	r3, [r7, #8]
}
 8005148:	bf00      	nop
 800514a:	bf00      	nop
 800514c:	e7fd      	b.n	800514a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800514e:	4b1e      	ldr	r3, [pc, #120]	@ (80051c8 <xPortStartScheduler+0x138>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	021b      	lsls	r3, r3, #8
 8005154:	4a1c      	ldr	r2, [pc, #112]	@ (80051c8 <xPortStartScheduler+0x138>)
 8005156:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005158:	4b1b      	ldr	r3, [pc, #108]	@ (80051c8 <xPortStartScheduler+0x138>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005160:	4a19      	ldr	r2, [pc, #100]	@ (80051c8 <xPortStartScheduler+0x138>)
 8005162:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	b2da      	uxtb	r2, r3
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800516c:	4b17      	ldr	r3, [pc, #92]	@ (80051cc <xPortStartScheduler+0x13c>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a16      	ldr	r2, [pc, #88]	@ (80051cc <xPortStartScheduler+0x13c>)
 8005172:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005176:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005178:	4b14      	ldr	r3, [pc, #80]	@ (80051cc <xPortStartScheduler+0x13c>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a13      	ldr	r2, [pc, #76]	@ (80051cc <xPortStartScheduler+0x13c>)
 800517e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005182:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005184:	f000 f8da 	bl	800533c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005188:	4b11      	ldr	r3, [pc, #68]	@ (80051d0 <xPortStartScheduler+0x140>)
 800518a:	2200      	movs	r2, #0
 800518c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800518e:	f000 f8f9 	bl	8005384 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005192:	4b10      	ldr	r3, [pc, #64]	@ (80051d4 <xPortStartScheduler+0x144>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a0f      	ldr	r2, [pc, #60]	@ (80051d4 <xPortStartScheduler+0x144>)
 8005198:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800519c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800519e:	f7ff ff63 	bl	8005068 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80051a2:	f7ff f82d 	bl	8004200 <vTaskSwitchContext>
	prvTaskExitError();
 80051a6:	f7ff ff19 	bl	8004fdc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3718      	adds	r7, #24
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	e000ed00 	.word	0xe000ed00
 80051b8:	410fc271 	.word	0x410fc271
 80051bc:	410fc270 	.word	0x410fc270
 80051c0:	e000e400 	.word	0xe000e400
 80051c4:	20000fa0 	.word	0x20000fa0
 80051c8:	20000fa4 	.word	0x20000fa4
 80051cc:	e000ed20 	.word	0xe000ed20
 80051d0:	2000000c 	.word	0x2000000c
 80051d4:	e000ef34 	.word	0xe000ef34

080051d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
	__asm volatile
 80051de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e2:	f383 8811 	msr	BASEPRI, r3
 80051e6:	f3bf 8f6f 	isb	sy
 80051ea:	f3bf 8f4f 	dsb	sy
 80051ee:	607b      	str	r3, [r7, #4]
}
 80051f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80051f2:	4b10      	ldr	r3, [pc, #64]	@ (8005234 <vPortEnterCritical+0x5c>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	3301      	adds	r3, #1
 80051f8:	4a0e      	ldr	r2, [pc, #56]	@ (8005234 <vPortEnterCritical+0x5c>)
 80051fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80051fc:	4b0d      	ldr	r3, [pc, #52]	@ (8005234 <vPortEnterCritical+0x5c>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d110      	bne.n	8005226 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005204:	4b0c      	ldr	r3, [pc, #48]	@ (8005238 <vPortEnterCritical+0x60>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00b      	beq.n	8005226 <vPortEnterCritical+0x4e>
	__asm volatile
 800520e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005212:	f383 8811 	msr	BASEPRI, r3
 8005216:	f3bf 8f6f 	isb	sy
 800521a:	f3bf 8f4f 	dsb	sy
 800521e:	603b      	str	r3, [r7, #0]
}
 8005220:	bf00      	nop
 8005222:	bf00      	nop
 8005224:	e7fd      	b.n	8005222 <vPortEnterCritical+0x4a>
	}
}
 8005226:	bf00      	nop
 8005228:	370c      	adds	r7, #12
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	2000000c 	.word	0x2000000c
 8005238:	e000ed04 	.word	0xe000ed04

0800523c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005242:	4b12      	ldr	r3, [pc, #72]	@ (800528c <vPortExitCritical+0x50>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d10b      	bne.n	8005262 <vPortExitCritical+0x26>
	__asm volatile
 800524a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800524e:	f383 8811 	msr	BASEPRI, r3
 8005252:	f3bf 8f6f 	isb	sy
 8005256:	f3bf 8f4f 	dsb	sy
 800525a:	607b      	str	r3, [r7, #4]
}
 800525c:	bf00      	nop
 800525e:	bf00      	nop
 8005260:	e7fd      	b.n	800525e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005262:	4b0a      	ldr	r3, [pc, #40]	@ (800528c <vPortExitCritical+0x50>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	3b01      	subs	r3, #1
 8005268:	4a08      	ldr	r2, [pc, #32]	@ (800528c <vPortExitCritical+0x50>)
 800526a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800526c:	4b07      	ldr	r3, [pc, #28]	@ (800528c <vPortExitCritical+0x50>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d105      	bne.n	8005280 <vPortExitCritical+0x44>
 8005274:	2300      	movs	r3, #0
 8005276:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	f383 8811 	msr	BASEPRI, r3
}
 800527e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005280:	bf00      	nop
 8005282:	370c      	adds	r7, #12
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr
 800528c:	2000000c 	.word	0x2000000c

08005290 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005290:	f3ef 8009 	mrs	r0, PSP
 8005294:	f3bf 8f6f 	isb	sy
 8005298:	4b15      	ldr	r3, [pc, #84]	@ (80052f0 <pxCurrentTCBConst>)
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	f01e 0f10 	tst.w	lr, #16
 80052a0:	bf08      	it	eq
 80052a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80052a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052aa:	6010      	str	r0, [r2, #0]
 80052ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80052b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80052b4:	f380 8811 	msr	BASEPRI, r0
 80052b8:	f3bf 8f4f 	dsb	sy
 80052bc:	f3bf 8f6f 	isb	sy
 80052c0:	f7fe ff9e 	bl	8004200 <vTaskSwitchContext>
 80052c4:	f04f 0000 	mov.w	r0, #0
 80052c8:	f380 8811 	msr	BASEPRI, r0
 80052cc:	bc09      	pop	{r0, r3}
 80052ce:	6819      	ldr	r1, [r3, #0]
 80052d0:	6808      	ldr	r0, [r1, #0]
 80052d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052d6:	f01e 0f10 	tst.w	lr, #16
 80052da:	bf08      	it	eq
 80052dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80052e0:	f380 8809 	msr	PSP, r0
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	f3af 8000 	nop.w

080052f0 <pxCurrentTCBConst>:
 80052f0:	20000974 	.word	0x20000974
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80052f4:	bf00      	nop
 80052f6:	bf00      	nop

080052f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
	__asm volatile
 80052fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005302:	f383 8811 	msr	BASEPRI, r3
 8005306:	f3bf 8f6f 	isb	sy
 800530a:	f3bf 8f4f 	dsb	sy
 800530e:	607b      	str	r3, [r7, #4]
}
 8005310:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005312:	f7fe febb 	bl	800408c <xTaskIncrementTick>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d003      	beq.n	8005324 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800531c:	4b06      	ldr	r3, [pc, #24]	@ (8005338 <xPortSysTickHandler+0x40>)
 800531e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005322:	601a      	str	r2, [r3, #0]
 8005324:	2300      	movs	r3, #0
 8005326:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	f383 8811 	msr	BASEPRI, r3
}
 800532e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005330:	bf00      	nop
 8005332:	3708      	adds	r7, #8
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	e000ed04 	.word	0xe000ed04

0800533c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800533c:	b480      	push	{r7}
 800533e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005340:	4b0b      	ldr	r3, [pc, #44]	@ (8005370 <vPortSetupTimerInterrupt+0x34>)
 8005342:	2200      	movs	r2, #0
 8005344:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005346:	4b0b      	ldr	r3, [pc, #44]	@ (8005374 <vPortSetupTimerInterrupt+0x38>)
 8005348:	2200      	movs	r2, #0
 800534a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800534c:	4b0a      	ldr	r3, [pc, #40]	@ (8005378 <vPortSetupTimerInterrupt+0x3c>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a0a      	ldr	r2, [pc, #40]	@ (800537c <vPortSetupTimerInterrupt+0x40>)
 8005352:	fba2 2303 	umull	r2, r3, r2, r3
 8005356:	099b      	lsrs	r3, r3, #6
 8005358:	4a09      	ldr	r2, [pc, #36]	@ (8005380 <vPortSetupTimerInterrupt+0x44>)
 800535a:	3b01      	subs	r3, #1
 800535c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800535e:	4b04      	ldr	r3, [pc, #16]	@ (8005370 <vPortSetupTimerInterrupt+0x34>)
 8005360:	2207      	movs	r2, #7
 8005362:	601a      	str	r2, [r3, #0]
}
 8005364:	bf00      	nop
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	e000e010 	.word	0xe000e010
 8005374:	e000e018 	.word	0xe000e018
 8005378:	20000000 	.word	0x20000000
 800537c:	10624dd3 	.word	0x10624dd3
 8005380:	e000e014 	.word	0xe000e014

08005384 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005384:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005394 <vPortEnableVFP+0x10>
 8005388:	6801      	ldr	r1, [r0, #0]
 800538a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800538e:	6001      	str	r1, [r0, #0]
 8005390:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005392:	bf00      	nop
 8005394:	e000ed88 	.word	0xe000ed88

08005398 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005398:	b480      	push	{r7}
 800539a:	b085      	sub	sp, #20
 800539c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800539e:	f3ef 8305 	mrs	r3, IPSR
 80053a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2b0f      	cmp	r3, #15
 80053a8:	d915      	bls.n	80053d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80053aa:	4a18      	ldr	r2, [pc, #96]	@ (800540c <vPortValidateInterruptPriority+0x74>)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	4413      	add	r3, r2
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80053b4:	4b16      	ldr	r3, [pc, #88]	@ (8005410 <vPortValidateInterruptPriority+0x78>)
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	7afa      	ldrb	r2, [r7, #11]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d20b      	bcs.n	80053d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80053be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053c2:	f383 8811 	msr	BASEPRI, r3
 80053c6:	f3bf 8f6f 	isb	sy
 80053ca:	f3bf 8f4f 	dsb	sy
 80053ce:	607b      	str	r3, [r7, #4]
}
 80053d0:	bf00      	nop
 80053d2:	bf00      	nop
 80053d4:	e7fd      	b.n	80053d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80053d6:	4b0f      	ldr	r3, [pc, #60]	@ (8005414 <vPortValidateInterruptPriority+0x7c>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80053de:	4b0e      	ldr	r3, [pc, #56]	@ (8005418 <vPortValidateInterruptPriority+0x80>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d90b      	bls.n	80053fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80053e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ea:	f383 8811 	msr	BASEPRI, r3
 80053ee:	f3bf 8f6f 	isb	sy
 80053f2:	f3bf 8f4f 	dsb	sy
 80053f6:	603b      	str	r3, [r7, #0]
}
 80053f8:	bf00      	nop
 80053fa:	bf00      	nop
 80053fc:	e7fd      	b.n	80053fa <vPortValidateInterruptPriority+0x62>
	}
 80053fe:	bf00      	nop
 8005400:	3714      	adds	r7, #20
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	e000e3f0 	.word	0xe000e3f0
 8005410:	20000fa0 	.word	0x20000fa0
 8005414:	e000ed0c 	.word	0xe000ed0c
 8005418:	20000fa4 	.word	0x20000fa4

0800541c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b08a      	sub	sp, #40	@ 0x28
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005424:	2300      	movs	r3, #0
 8005426:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005428:	f7fe fd74 	bl	8003f14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800542c:	4b5c      	ldr	r3, [pc, #368]	@ (80055a0 <pvPortMalloc+0x184>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d101      	bne.n	8005438 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005434:	f000 f924 	bl	8005680 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005438:	4b5a      	ldr	r3, [pc, #360]	@ (80055a4 <pvPortMalloc+0x188>)
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4013      	ands	r3, r2
 8005440:	2b00      	cmp	r3, #0
 8005442:	f040 8095 	bne.w	8005570 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d01e      	beq.n	800548a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800544c:	2208      	movs	r2, #8
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4413      	add	r3, r2
 8005452:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f003 0307 	and.w	r3, r3, #7
 800545a:	2b00      	cmp	r3, #0
 800545c:	d015      	beq.n	800548a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f023 0307 	bic.w	r3, r3, #7
 8005464:	3308      	adds	r3, #8
 8005466:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f003 0307 	and.w	r3, r3, #7
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00b      	beq.n	800548a <pvPortMalloc+0x6e>
	__asm volatile
 8005472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005476:	f383 8811 	msr	BASEPRI, r3
 800547a:	f3bf 8f6f 	isb	sy
 800547e:	f3bf 8f4f 	dsb	sy
 8005482:	617b      	str	r3, [r7, #20]
}
 8005484:	bf00      	nop
 8005486:	bf00      	nop
 8005488:	e7fd      	b.n	8005486 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d06f      	beq.n	8005570 <pvPortMalloc+0x154>
 8005490:	4b45      	ldr	r3, [pc, #276]	@ (80055a8 <pvPortMalloc+0x18c>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	429a      	cmp	r2, r3
 8005498:	d86a      	bhi.n	8005570 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800549a:	4b44      	ldr	r3, [pc, #272]	@ (80055ac <pvPortMalloc+0x190>)
 800549c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800549e:	4b43      	ldr	r3, [pc, #268]	@ (80055ac <pvPortMalloc+0x190>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054a4:	e004      	b.n	80054b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80054a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80054aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d903      	bls.n	80054c2 <pvPortMalloc+0xa6>
 80054ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1f1      	bne.n	80054a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80054c2:	4b37      	ldr	r3, [pc, #220]	@ (80055a0 <pvPortMalloc+0x184>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d051      	beq.n	8005570 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80054cc:	6a3b      	ldr	r3, [r7, #32]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2208      	movs	r2, #8
 80054d2:	4413      	add	r3, r2
 80054d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80054d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	6a3b      	ldr	r3, [r7, #32]
 80054dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80054de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e0:	685a      	ldr	r2, [r3, #4]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	1ad2      	subs	r2, r2, r3
 80054e6:	2308      	movs	r3, #8
 80054e8:	005b      	lsls	r3, r3, #1
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d920      	bls.n	8005530 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80054ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4413      	add	r3, r2
 80054f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	f003 0307 	and.w	r3, r3, #7
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d00b      	beq.n	8005518 <pvPortMalloc+0xfc>
	__asm volatile
 8005500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005504:	f383 8811 	msr	BASEPRI, r3
 8005508:	f3bf 8f6f 	isb	sy
 800550c:	f3bf 8f4f 	dsb	sy
 8005510:	613b      	str	r3, [r7, #16]
}
 8005512:	bf00      	nop
 8005514:	bf00      	nop
 8005516:	e7fd      	b.n	8005514 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800551a:	685a      	ldr	r2, [r3, #4]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	1ad2      	subs	r2, r2, r3
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800552a:	69b8      	ldr	r0, [r7, #24]
 800552c:	f000 f90a 	bl	8005744 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005530:	4b1d      	ldr	r3, [pc, #116]	@ (80055a8 <pvPortMalloc+0x18c>)
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	4a1b      	ldr	r2, [pc, #108]	@ (80055a8 <pvPortMalloc+0x18c>)
 800553c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800553e:	4b1a      	ldr	r3, [pc, #104]	@ (80055a8 <pvPortMalloc+0x18c>)
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	4b1b      	ldr	r3, [pc, #108]	@ (80055b0 <pvPortMalloc+0x194>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	429a      	cmp	r2, r3
 8005548:	d203      	bcs.n	8005552 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800554a:	4b17      	ldr	r3, [pc, #92]	@ (80055a8 <pvPortMalloc+0x18c>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a18      	ldr	r2, [pc, #96]	@ (80055b0 <pvPortMalloc+0x194>)
 8005550:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005554:	685a      	ldr	r2, [r3, #4]
 8005556:	4b13      	ldr	r3, [pc, #76]	@ (80055a4 <pvPortMalloc+0x188>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	431a      	orrs	r2, r3
 800555c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800555e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005562:	2200      	movs	r2, #0
 8005564:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005566:	4b13      	ldr	r3, [pc, #76]	@ (80055b4 <pvPortMalloc+0x198>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	3301      	adds	r3, #1
 800556c:	4a11      	ldr	r2, [pc, #68]	@ (80055b4 <pvPortMalloc+0x198>)
 800556e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005570:	f7fe fcde 	bl	8003f30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	f003 0307 	and.w	r3, r3, #7
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00b      	beq.n	8005596 <pvPortMalloc+0x17a>
	__asm volatile
 800557e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005582:	f383 8811 	msr	BASEPRI, r3
 8005586:	f3bf 8f6f 	isb	sy
 800558a:	f3bf 8f4f 	dsb	sy
 800558e:	60fb      	str	r3, [r7, #12]
}
 8005590:	bf00      	nop
 8005592:	bf00      	nop
 8005594:	e7fd      	b.n	8005592 <pvPortMalloc+0x176>
	return pvReturn;
 8005596:	69fb      	ldr	r3, [r7, #28]
}
 8005598:	4618      	mov	r0, r3
 800559a:	3728      	adds	r7, #40	@ 0x28
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	20004bb0 	.word	0x20004bb0
 80055a4:	20004bc4 	.word	0x20004bc4
 80055a8:	20004bb4 	.word	0x20004bb4
 80055ac:	20004ba8 	.word	0x20004ba8
 80055b0:	20004bb8 	.word	0x20004bb8
 80055b4:	20004bbc 	.word	0x20004bbc

080055b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b086      	sub	sp, #24
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d04f      	beq.n	800566a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80055ca:	2308      	movs	r3, #8
 80055cc:	425b      	negs	r3, r3
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	4413      	add	r3, r2
 80055d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	685a      	ldr	r2, [r3, #4]
 80055dc:	4b25      	ldr	r3, [pc, #148]	@ (8005674 <vPortFree+0xbc>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4013      	ands	r3, r2
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d10b      	bne.n	80055fe <vPortFree+0x46>
	__asm volatile
 80055e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ea:	f383 8811 	msr	BASEPRI, r3
 80055ee:	f3bf 8f6f 	isb	sy
 80055f2:	f3bf 8f4f 	dsb	sy
 80055f6:	60fb      	str	r3, [r7, #12]
}
 80055f8:	bf00      	nop
 80055fa:	bf00      	nop
 80055fc:	e7fd      	b.n	80055fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00b      	beq.n	800561e <vPortFree+0x66>
	__asm volatile
 8005606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800560a:	f383 8811 	msr	BASEPRI, r3
 800560e:	f3bf 8f6f 	isb	sy
 8005612:	f3bf 8f4f 	dsb	sy
 8005616:	60bb      	str	r3, [r7, #8]
}
 8005618:	bf00      	nop
 800561a:	bf00      	nop
 800561c:	e7fd      	b.n	800561a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	685a      	ldr	r2, [r3, #4]
 8005622:	4b14      	ldr	r3, [pc, #80]	@ (8005674 <vPortFree+0xbc>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4013      	ands	r3, r2
 8005628:	2b00      	cmp	r3, #0
 800562a:	d01e      	beq.n	800566a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d11a      	bne.n	800566a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	685a      	ldr	r2, [r3, #4]
 8005638:	4b0e      	ldr	r3, [pc, #56]	@ (8005674 <vPortFree+0xbc>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	43db      	mvns	r3, r3
 800563e:	401a      	ands	r2, r3
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005644:	f7fe fc66 	bl	8003f14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	685a      	ldr	r2, [r3, #4]
 800564c:	4b0a      	ldr	r3, [pc, #40]	@ (8005678 <vPortFree+0xc0>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4413      	add	r3, r2
 8005652:	4a09      	ldr	r2, [pc, #36]	@ (8005678 <vPortFree+0xc0>)
 8005654:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005656:	6938      	ldr	r0, [r7, #16]
 8005658:	f000 f874 	bl	8005744 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800565c:	4b07      	ldr	r3, [pc, #28]	@ (800567c <vPortFree+0xc4>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	3301      	adds	r3, #1
 8005662:	4a06      	ldr	r2, [pc, #24]	@ (800567c <vPortFree+0xc4>)
 8005664:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005666:	f7fe fc63 	bl	8003f30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800566a:	bf00      	nop
 800566c:	3718      	adds	r7, #24
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	20004bc4 	.word	0x20004bc4
 8005678:	20004bb4 	.word	0x20004bb4
 800567c:	20004bc0 	.word	0x20004bc0

08005680 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005686:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800568a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800568c:	4b27      	ldr	r3, [pc, #156]	@ (800572c <prvHeapInit+0xac>)
 800568e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f003 0307 	and.w	r3, r3, #7
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00c      	beq.n	80056b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	3307      	adds	r3, #7
 800569e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f023 0307 	bic.w	r3, r3, #7
 80056a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80056a8:	68ba      	ldr	r2, [r7, #8]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	4a1f      	ldr	r2, [pc, #124]	@ (800572c <prvHeapInit+0xac>)
 80056b0:	4413      	add	r3, r2
 80056b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80056b8:	4a1d      	ldr	r2, [pc, #116]	@ (8005730 <prvHeapInit+0xb0>)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80056be:	4b1c      	ldr	r3, [pc, #112]	@ (8005730 <prvHeapInit+0xb0>)
 80056c0:	2200      	movs	r2, #0
 80056c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	68ba      	ldr	r2, [r7, #8]
 80056c8:	4413      	add	r3, r2
 80056ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80056cc:	2208      	movs	r2, #8
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	1a9b      	subs	r3, r3, r2
 80056d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f023 0307 	bic.w	r3, r3, #7
 80056da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	4a15      	ldr	r2, [pc, #84]	@ (8005734 <prvHeapInit+0xb4>)
 80056e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80056e2:	4b14      	ldr	r3, [pc, #80]	@ (8005734 <prvHeapInit+0xb4>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2200      	movs	r2, #0
 80056e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80056ea:	4b12      	ldr	r3, [pc, #72]	@ (8005734 <prvHeapInit+0xb4>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2200      	movs	r2, #0
 80056f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	1ad2      	subs	r2, r2, r3
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005700:	4b0c      	ldr	r3, [pc, #48]	@ (8005734 <prvHeapInit+0xb4>)
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	4a0a      	ldr	r2, [pc, #40]	@ (8005738 <prvHeapInit+0xb8>)
 800570e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	4a09      	ldr	r2, [pc, #36]	@ (800573c <prvHeapInit+0xbc>)
 8005716:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005718:	4b09      	ldr	r3, [pc, #36]	@ (8005740 <prvHeapInit+0xc0>)
 800571a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800571e:	601a      	str	r2, [r3, #0]
}
 8005720:	bf00      	nop
 8005722:	3714      	adds	r7, #20
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr
 800572c:	20000fa8 	.word	0x20000fa8
 8005730:	20004ba8 	.word	0x20004ba8
 8005734:	20004bb0 	.word	0x20004bb0
 8005738:	20004bb8 	.word	0x20004bb8
 800573c:	20004bb4 	.word	0x20004bb4
 8005740:	20004bc4 	.word	0x20004bc4

08005744 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800574c:	4b28      	ldr	r3, [pc, #160]	@ (80057f0 <prvInsertBlockIntoFreeList+0xac>)
 800574e:	60fb      	str	r3, [r7, #12]
 8005750:	e002      	b.n	8005758 <prvInsertBlockIntoFreeList+0x14>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	60fb      	str	r3, [r7, #12]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	429a      	cmp	r2, r3
 8005760:	d8f7      	bhi.n	8005752 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	68ba      	ldr	r2, [r7, #8]
 800576c:	4413      	add	r3, r2
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	429a      	cmp	r2, r3
 8005772:	d108      	bne.n	8005786 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	685a      	ldr	r2, [r3, #4]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	441a      	add	r2, r3
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	68ba      	ldr	r2, [r7, #8]
 8005790:	441a      	add	r2, r3
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	429a      	cmp	r2, r3
 8005798:	d118      	bne.n	80057cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	4b15      	ldr	r3, [pc, #84]	@ (80057f4 <prvInsertBlockIntoFreeList+0xb0>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d00d      	beq.n	80057c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	685a      	ldr	r2, [r3, #4]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	441a      	add	r2, r3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	601a      	str	r2, [r3, #0]
 80057c0:	e008      	b.n	80057d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80057c2:	4b0c      	ldr	r3, [pc, #48]	@ (80057f4 <prvInsertBlockIntoFreeList+0xb0>)
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	601a      	str	r2, [r3, #0]
 80057ca:	e003      	b.n	80057d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80057d4:	68fa      	ldr	r2, [r7, #12]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d002      	beq.n	80057e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057e2:	bf00      	nop
 80057e4:	3714      	adds	r7, #20
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	20004ba8 	.word	0x20004ba8
 80057f4:	20004bb0 	.word	0x20004bb0

080057f8 <memset>:
 80057f8:	4402      	add	r2, r0
 80057fa:	4603      	mov	r3, r0
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d100      	bne.n	8005802 <memset+0xa>
 8005800:	4770      	bx	lr
 8005802:	f803 1b01 	strb.w	r1, [r3], #1
 8005806:	e7f9      	b.n	80057fc <memset+0x4>

08005808 <_reclaim_reent>:
 8005808:	4b29      	ldr	r3, [pc, #164]	@ (80058b0 <_reclaim_reent+0xa8>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4283      	cmp	r3, r0
 800580e:	b570      	push	{r4, r5, r6, lr}
 8005810:	4604      	mov	r4, r0
 8005812:	d04b      	beq.n	80058ac <_reclaim_reent+0xa4>
 8005814:	69c3      	ldr	r3, [r0, #28]
 8005816:	b1ab      	cbz	r3, 8005844 <_reclaim_reent+0x3c>
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	b16b      	cbz	r3, 8005838 <_reclaim_reent+0x30>
 800581c:	2500      	movs	r5, #0
 800581e:	69e3      	ldr	r3, [r4, #28]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	5959      	ldr	r1, [r3, r5]
 8005824:	2900      	cmp	r1, #0
 8005826:	d13b      	bne.n	80058a0 <_reclaim_reent+0x98>
 8005828:	3504      	adds	r5, #4
 800582a:	2d80      	cmp	r5, #128	@ 0x80
 800582c:	d1f7      	bne.n	800581e <_reclaim_reent+0x16>
 800582e:	69e3      	ldr	r3, [r4, #28]
 8005830:	4620      	mov	r0, r4
 8005832:	68d9      	ldr	r1, [r3, #12]
 8005834:	f000 f872 	bl	800591c <_free_r>
 8005838:	69e3      	ldr	r3, [r4, #28]
 800583a:	6819      	ldr	r1, [r3, #0]
 800583c:	b111      	cbz	r1, 8005844 <_reclaim_reent+0x3c>
 800583e:	4620      	mov	r0, r4
 8005840:	f000 f86c 	bl	800591c <_free_r>
 8005844:	6961      	ldr	r1, [r4, #20]
 8005846:	b111      	cbz	r1, 800584e <_reclaim_reent+0x46>
 8005848:	4620      	mov	r0, r4
 800584a:	f000 f867 	bl	800591c <_free_r>
 800584e:	69e1      	ldr	r1, [r4, #28]
 8005850:	b111      	cbz	r1, 8005858 <_reclaim_reent+0x50>
 8005852:	4620      	mov	r0, r4
 8005854:	f000 f862 	bl	800591c <_free_r>
 8005858:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800585a:	b111      	cbz	r1, 8005862 <_reclaim_reent+0x5a>
 800585c:	4620      	mov	r0, r4
 800585e:	f000 f85d 	bl	800591c <_free_r>
 8005862:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005864:	b111      	cbz	r1, 800586c <_reclaim_reent+0x64>
 8005866:	4620      	mov	r0, r4
 8005868:	f000 f858 	bl	800591c <_free_r>
 800586c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800586e:	b111      	cbz	r1, 8005876 <_reclaim_reent+0x6e>
 8005870:	4620      	mov	r0, r4
 8005872:	f000 f853 	bl	800591c <_free_r>
 8005876:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005878:	b111      	cbz	r1, 8005880 <_reclaim_reent+0x78>
 800587a:	4620      	mov	r0, r4
 800587c:	f000 f84e 	bl	800591c <_free_r>
 8005880:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005882:	b111      	cbz	r1, 800588a <_reclaim_reent+0x82>
 8005884:	4620      	mov	r0, r4
 8005886:	f000 f849 	bl	800591c <_free_r>
 800588a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800588c:	b111      	cbz	r1, 8005894 <_reclaim_reent+0x8c>
 800588e:	4620      	mov	r0, r4
 8005890:	f000 f844 	bl	800591c <_free_r>
 8005894:	6a23      	ldr	r3, [r4, #32]
 8005896:	b14b      	cbz	r3, 80058ac <_reclaim_reent+0xa4>
 8005898:	4620      	mov	r0, r4
 800589a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800589e:	4718      	bx	r3
 80058a0:	680e      	ldr	r6, [r1, #0]
 80058a2:	4620      	mov	r0, r4
 80058a4:	f000 f83a 	bl	800591c <_free_r>
 80058a8:	4631      	mov	r1, r6
 80058aa:	e7bb      	b.n	8005824 <_reclaim_reent+0x1c>
 80058ac:	bd70      	pop	{r4, r5, r6, pc}
 80058ae:	bf00      	nop
 80058b0:	20000010 	.word	0x20000010

080058b4 <__libc_init_array>:
 80058b4:	b570      	push	{r4, r5, r6, lr}
 80058b6:	4d0d      	ldr	r5, [pc, #52]	@ (80058ec <__libc_init_array+0x38>)
 80058b8:	4c0d      	ldr	r4, [pc, #52]	@ (80058f0 <__libc_init_array+0x3c>)
 80058ba:	1b64      	subs	r4, r4, r5
 80058bc:	10a4      	asrs	r4, r4, #2
 80058be:	2600      	movs	r6, #0
 80058c0:	42a6      	cmp	r6, r4
 80058c2:	d109      	bne.n	80058d8 <__libc_init_array+0x24>
 80058c4:	4d0b      	ldr	r5, [pc, #44]	@ (80058f4 <__libc_init_array+0x40>)
 80058c6:	4c0c      	ldr	r4, [pc, #48]	@ (80058f8 <__libc_init_array+0x44>)
 80058c8:	f000 f87e 	bl	80059c8 <_init>
 80058cc:	1b64      	subs	r4, r4, r5
 80058ce:	10a4      	asrs	r4, r4, #2
 80058d0:	2600      	movs	r6, #0
 80058d2:	42a6      	cmp	r6, r4
 80058d4:	d105      	bne.n	80058e2 <__libc_init_array+0x2e>
 80058d6:	bd70      	pop	{r4, r5, r6, pc}
 80058d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80058dc:	4798      	blx	r3
 80058de:	3601      	adds	r6, #1
 80058e0:	e7ee      	b.n	80058c0 <__libc_init_array+0xc>
 80058e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80058e6:	4798      	blx	r3
 80058e8:	3601      	adds	r6, #1
 80058ea:	e7f2      	b.n	80058d2 <__libc_init_array+0x1e>
 80058ec:	08005aa8 	.word	0x08005aa8
 80058f0:	08005aa8 	.word	0x08005aa8
 80058f4:	08005aa8 	.word	0x08005aa8
 80058f8:	08005aac 	.word	0x08005aac

080058fc <__retarget_lock_acquire_recursive>:
 80058fc:	4770      	bx	lr

080058fe <__retarget_lock_release_recursive>:
 80058fe:	4770      	bx	lr

08005900 <memcpy>:
 8005900:	440a      	add	r2, r1
 8005902:	4291      	cmp	r1, r2
 8005904:	f100 33ff 	add.w	r3, r0, #4294967295
 8005908:	d100      	bne.n	800590c <memcpy+0xc>
 800590a:	4770      	bx	lr
 800590c:	b510      	push	{r4, lr}
 800590e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005912:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005916:	4291      	cmp	r1, r2
 8005918:	d1f9      	bne.n	800590e <memcpy+0xe>
 800591a:	bd10      	pop	{r4, pc}

0800591c <_free_r>:
 800591c:	b538      	push	{r3, r4, r5, lr}
 800591e:	4605      	mov	r5, r0
 8005920:	2900      	cmp	r1, #0
 8005922:	d041      	beq.n	80059a8 <_free_r+0x8c>
 8005924:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005928:	1f0c      	subs	r4, r1, #4
 800592a:	2b00      	cmp	r3, #0
 800592c:	bfb8      	it	lt
 800592e:	18e4      	addlt	r4, r4, r3
 8005930:	f000 f83e 	bl	80059b0 <__malloc_lock>
 8005934:	4a1d      	ldr	r2, [pc, #116]	@ (80059ac <_free_r+0x90>)
 8005936:	6813      	ldr	r3, [r2, #0]
 8005938:	b933      	cbnz	r3, 8005948 <_free_r+0x2c>
 800593a:	6063      	str	r3, [r4, #4]
 800593c:	6014      	str	r4, [r2, #0]
 800593e:	4628      	mov	r0, r5
 8005940:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005944:	f000 b83a 	b.w	80059bc <__malloc_unlock>
 8005948:	42a3      	cmp	r3, r4
 800594a:	d908      	bls.n	800595e <_free_r+0x42>
 800594c:	6820      	ldr	r0, [r4, #0]
 800594e:	1821      	adds	r1, r4, r0
 8005950:	428b      	cmp	r3, r1
 8005952:	bf01      	itttt	eq
 8005954:	6819      	ldreq	r1, [r3, #0]
 8005956:	685b      	ldreq	r3, [r3, #4]
 8005958:	1809      	addeq	r1, r1, r0
 800595a:	6021      	streq	r1, [r4, #0]
 800595c:	e7ed      	b.n	800593a <_free_r+0x1e>
 800595e:	461a      	mov	r2, r3
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	b10b      	cbz	r3, 8005968 <_free_r+0x4c>
 8005964:	42a3      	cmp	r3, r4
 8005966:	d9fa      	bls.n	800595e <_free_r+0x42>
 8005968:	6811      	ldr	r1, [r2, #0]
 800596a:	1850      	adds	r0, r2, r1
 800596c:	42a0      	cmp	r0, r4
 800596e:	d10b      	bne.n	8005988 <_free_r+0x6c>
 8005970:	6820      	ldr	r0, [r4, #0]
 8005972:	4401      	add	r1, r0
 8005974:	1850      	adds	r0, r2, r1
 8005976:	4283      	cmp	r3, r0
 8005978:	6011      	str	r1, [r2, #0]
 800597a:	d1e0      	bne.n	800593e <_free_r+0x22>
 800597c:	6818      	ldr	r0, [r3, #0]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	6053      	str	r3, [r2, #4]
 8005982:	4408      	add	r0, r1
 8005984:	6010      	str	r0, [r2, #0]
 8005986:	e7da      	b.n	800593e <_free_r+0x22>
 8005988:	d902      	bls.n	8005990 <_free_r+0x74>
 800598a:	230c      	movs	r3, #12
 800598c:	602b      	str	r3, [r5, #0]
 800598e:	e7d6      	b.n	800593e <_free_r+0x22>
 8005990:	6820      	ldr	r0, [r4, #0]
 8005992:	1821      	adds	r1, r4, r0
 8005994:	428b      	cmp	r3, r1
 8005996:	bf04      	itt	eq
 8005998:	6819      	ldreq	r1, [r3, #0]
 800599a:	685b      	ldreq	r3, [r3, #4]
 800599c:	6063      	str	r3, [r4, #4]
 800599e:	bf04      	itt	eq
 80059a0:	1809      	addeq	r1, r1, r0
 80059a2:	6021      	streq	r1, [r4, #0]
 80059a4:	6054      	str	r4, [r2, #4]
 80059a6:	e7ca      	b.n	800593e <_free_r+0x22>
 80059a8:	bd38      	pop	{r3, r4, r5, pc}
 80059aa:	bf00      	nop
 80059ac:	20004d04 	.word	0x20004d04

080059b0 <__malloc_lock>:
 80059b0:	4801      	ldr	r0, [pc, #4]	@ (80059b8 <__malloc_lock+0x8>)
 80059b2:	f7ff bfa3 	b.w	80058fc <__retarget_lock_acquire_recursive>
 80059b6:	bf00      	nop
 80059b8:	20004d00 	.word	0x20004d00

080059bc <__malloc_unlock>:
 80059bc:	4801      	ldr	r0, [pc, #4]	@ (80059c4 <__malloc_unlock+0x8>)
 80059be:	f7ff bf9e 	b.w	80058fe <__retarget_lock_release_recursive>
 80059c2:	bf00      	nop
 80059c4:	20004d00 	.word	0x20004d00

080059c8 <_init>:
 80059c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ca:	bf00      	nop
 80059cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ce:	bc08      	pop	{r3}
 80059d0:	469e      	mov	lr, r3
 80059d2:	4770      	bx	lr

080059d4 <_fini>:
 80059d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059d6:	bf00      	nop
 80059d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059da:	bc08      	pop	{r3}
 80059dc:	469e      	mov	lr, r3
 80059de:	4770      	bx	lr
